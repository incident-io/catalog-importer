// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for ActionV1Status.
const (
	Completed   ActionV1Status = "completed"
	Deleted     ActionV1Status = "deleted"
	NotDoing    ActionV1Status = "not_doing"
	Outstanding ActionV1Status = "outstanding"
)

// Defines values for CatalogResourceV2Category.
const (
	CatalogResourceV2CategoryCustom    CatalogResourceV2Category = "custom"
	CatalogResourceV2CategoryExternal  CatalogResourceV2Category = "external"
	CatalogResourceV2CategoryPrimitive CatalogResourceV2Category = "primitive"
)

// Defines values for CatalogTypeV2Color.
const (
	CatalogTypeV2ColorBlue   CatalogTypeV2Color = "blue"
	CatalogTypeV2ColorGreen  CatalogTypeV2Color = "green"
	CatalogTypeV2ColorRed    CatalogTypeV2Color = "red"
	CatalogTypeV2ColorSlate  CatalogTypeV2Color = "slate"
	CatalogTypeV2ColorViolet CatalogTypeV2Color = "violet"
	CatalogTypeV2ColorYellow CatalogTypeV2Color = "yellow"
)

// Defines values for CatalogTypeV2Icon.
const (
	CatalogTypeV2IconBolt      CatalogTypeV2Icon = "bolt"
	CatalogTypeV2IconBox       CatalogTypeV2Icon = "box"
	CatalogTypeV2IconBriefcase CatalogTypeV2Icon = "briefcase"
	CatalogTypeV2IconBrowser   CatalogTypeV2Icon = "browser"
	CatalogTypeV2IconBulb      CatalogTypeV2Icon = "bulb"
	CatalogTypeV2IconClock     CatalogTypeV2Icon = "clock"
	CatalogTypeV2IconCog       CatalogTypeV2Icon = "cog"
	CatalogTypeV2IconDatabase  CatalogTypeV2Icon = "database"
	CatalogTypeV2IconDoc       CatalogTypeV2Icon = "doc"
	CatalogTypeV2IconEmail     CatalogTypeV2Icon = "email"
	CatalogTypeV2IconServer    CatalogTypeV2Icon = "server"
	CatalogTypeV2IconSeverity  CatalogTypeV2Icon = "severity"
	CatalogTypeV2IconStar      CatalogTypeV2Icon = "star"
	CatalogTypeV2IconTag       CatalogTypeV2Icon = "tag"
	CatalogTypeV2IconUser      CatalogTypeV2Icon = "user"
	CatalogTypeV2IconUsers     CatalogTypeV2Icon = "users"
)

// Defines values for CreateRequestBody2FieldType.
const (
	CreateRequestBody2FieldTypeLink         CreateRequestBody2FieldType = "link"
	CreateRequestBody2FieldTypeMultiSelect  CreateRequestBody2FieldType = "multi_select"
	CreateRequestBody2FieldTypeNumeric      CreateRequestBody2FieldType = "numeric"
	CreateRequestBody2FieldTypeSingleSelect CreateRequestBody2FieldType = "single_select"
	CreateRequestBody2FieldTypeText         CreateRequestBody2FieldType = "text"
)

// Defines values for CreateRequestBody2Required.
const (
	CreateRequestBody2RequiredAlways        CreateRequestBody2Required = "always"
	CreateRequestBody2RequiredBeforeClosure CreateRequestBody2Required = "before_closure"
	CreateRequestBody2RequiredNever         CreateRequestBody2Required = "never"
)

// Defines values for CreateRequestBody3ResourceResourceType.
const (
	CreateRequestBody3ResourceResourceTypeAtlassianStatuspageIncident CreateRequestBody3ResourceResourceType = "atlassian_statuspage_incident"
	CreateRequestBody3ResourceResourceTypeDatadogMonitorAlert         CreateRequestBody3ResourceResourceType = "datadog_monitor_alert"
	CreateRequestBody3ResourceResourceTypeGithubPullRequest           CreateRequestBody3ResourceResourceType = "github_pull_request"
	CreateRequestBody3ResourceResourceTypeOpsgenieAlert               CreateRequestBody3ResourceResourceType = "opsgenie_alert"
	CreateRequestBody3ResourceResourceTypePagerDutyIncident           CreateRequestBody3ResourceResourceType = "pager_duty_incident"
	CreateRequestBody3ResourceResourceTypeSentryIssue                 CreateRequestBody3ResourceResourceType = "sentry_issue"
	CreateRequestBody3ResourceResourceTypeStatuspageIncident          CreateRequestBody3ResourceResourceType = "statuspage_incident"
	CreateRequestBody3ResourceResourceTypeZendeskTicket               CreateRequestBody3ResourceResourceType = "zendesk_ticket"
)

// Defines values for CreateRequestBody5Category.
const (
	CreateRequestBody5CategoryClosed CreateRequestBody5Category = "closed"
	CreateRequestBody5CategoryLive   CreateRequestBody5Category = "live"
)

// Defines values for CreateRequestBody6Mode.
const (
	CreateRequestBody6ModeReal CreateRequestBody6Mode = "real"
	CreateRequestBody6ModeTest CreateRequestBody6Mode = "test"
)

// Defines values for CreateRequestBody6Status.
const (
	CreateRequestBody6StatusClosed        CreateRequestBody6Status = "closed"
	CreateRequestBody6StatusDeclined      CreateRequestBody6Status = "declined"
	CreateRequestBody6StatusFixing        CreateRequestBody6Status = "fixing"
	CreateRequestBody6StatusInvestigating CreateRequestBody6Status = "investigating"
	CreateRequestBody6StatusMonitoring    CreateRequestBody6Status = "monitoring"
	CreateRequestBody6StatusTriage        CreateRequestBody6Status = "triage"
)

// Defines values for CreateRequestBody6Visibility.
const (
	CreateRequestBody6VisibilityPrivate CreateRequestBody6Visibility = "private"
	CreateRequestBody6VisibilityPublic  CreateRequestBody6Visibility = "public"
)

// Defines values for CreateRequestBody7Mode.
const (
	CreateRequestBody7ModeRetrospective CreateRequestBody7Mode = "retrospective"
	CreateRequestBody7ModeStandard      CreateRequestBody7Mode = "standard"
	CreateRequestBody7ModeTest          CreateRequestBody7Mode = "test"
	CreateRequestBody7ModeTutorial      CreateRequestBody7Mode = "tutorial"
)

// Defines values for CreateRequestBody7Visibility.
const (
	CreateRequestBody7VisibilityPrivate CreateRequestBody7Visibility = "private"
	CreateRequestBody7VisibilityPublic  CreateRequestBody7Visibility = "public"
)

// Defines values for CreateTypeRequestBodyColor.
const (
	CreateTypeRequestBodyColorBlue   CreateTypeRequestBodyColor = "blue"
	CreateTypeRequestBodyColorGreen  CreateTypeRequestBodyColor = "green"
	CreateTypeRequestBodyColorRed    CreateTypeRequestBodyColor = "red"
	CreateTypeRequestBodyColorSlate  CreateTypeRequestBodyColor = "slate"
	CreateTypeRequestBodyColorViolet CreateTypeRequestBodyColor = "violet"
	CreateTypeRequestBodyColorYellow CreateTypeRequestBodyColor = "yellow"
)

// Defines values for CreateTypeRequestBodyIcon.
const (
	CreateTypeRequestBodyIconBolt      CreateTypeRequestBodyIcon = "bolt"
	CreateTypeRequestBodyIconBox       CreateTypeRequestBodyIcon = "box"
	CreateTypeRequestBodyIconBriefcase CreateTypeRequestBodyIcon = "briefcase"
	CreateTypeRequestBodyIconBrowser   CreateTypeRequestBodyIcon = "browser"
	CreateTypeRequestBodyIconBulb      CreateTypeRequestBodyIcon = "bulb"
	CreateTypeRequestBodyIconClock     CreateTypeRequestBodyIcon = "clock"
	CreateTypeRequestBodyIconCog       CreateTypeRequestBodyIcon = "cog"
	CreateTypeRequestBodyIconDatabase  CreateTypeRequestBodyIcon = "database"
	CreateTypeRequestBodyIconDoc       CreateTypeRequestBodyIcon = "doc"
	CreateTypeRequestBodyIconEmail     CreateTypeRequestBodyIcon = "email"
	CreateTypeRequestBodyIconServer    CreateTypeRequestBodyIcon = "server"
	CreateTypeRequestBodyIconSeverity  CreateTypeRequestBodyIcon = "severity"
	CreateTypeRequestBodyIconStar      CreateTypeRequestBodyIcon = "star"
	CreateTypeRequestBodyIconTag       CreateTypeRequestBodyIcon = "tag"
	CreateTypeRequestBodyIconUser      CreateTypeRequestBodyIcon = "user"
	CreateTypeRequestBodyIconUsers     CreateTypeRequestBodyIcon = "users"
)

// Defines values for CustomFieldTypeInfoV1FieldType.
const (
	CustomFieldTypeInfoV1FieldTypeLink         CustomFieldTypeInfoV1FieldType = "link"
	CustomFieldTypeInfoV1FieldTypeMultiSelect  CustomFieldTypeInfoV1FieldType = "multi_select"
	CustomFieldTypeInfoV1FieldTypeNumeric      CustomFieldTypeInfoV1FieldType = "numeric"
	CustomFieldTypeInfoV1FieldTypeSingleSelect CustomFieldTypeInfoV1FieldType = "single_select"
	CustomFieldTypeInfoV1FieldTypeText         CustomFieldTypeInfoV1FieldType = "text"
)

// Defines values for CustomFieldV1FieldType.
const (
	Link         CustomFieldV1FieldType = "link"
	MultiSelect  CustomFieldV1FieldType = "multi_select"
	Numeric      CustomFieldV1FieldType = "numeric"
	SingleSelect CustomFieldV1FieldType = "single_select"
	Text         CustomFieldV1FieldType = "text"
)

// Defines values for CustomFieldV1Required.
const (
	CustomFieldV1RequiredAlways        CustomFieldV1Required = "always"
	CustomFieldV1RequiredBeforeClosure CustomFieldV1Required = "before_closure"
	CustomFieldV1RequiredNever         CustomFieldV1Required = "never"
)

// Defines values for ExternalIssueReferenceV1Provider.
const (
	ExternalIssueReferenceV1ProviderAsana      ExternalIssueReferenceV1Provider = "asana"
	ExternalIssueReferenceV1ProviderGithub     ExternalIssueReferenceV1Provider = "github"
	ExternalIssueReferenceV1ProviderJira       ExternalIssueReferenceV1Provider = "jira"
	ExternalIssueReferenceV1ProviderJiraServer ExternalIssueReferenceV1Provider = "jira_server"
	ExternalIssueReferenceV1ProviderLinear     ExternalIssueReferenceV1Provider = "linear"
	ExternalIssueReferenceV1ProviderShortcut   ExternalIssueReferenceV1Provider = "shortcut"
)

// Defines values for ExternalIssueReferenceV2Provider.
const (
	ExternalIssueReferenceV2ProviderAsana      ExternalIssueReferenceV2Provider = "asana"
	ExternalIssueReferenceV2ProviderGithub     ExternalIssueReferenceV2Provider = "github"
	ExternalIssueReferenceV2ProviderJira       ExternalIssueReferenceV2Provider = "jira"
	ExternalIssueReferenceV2ProviderJiraServer ExternalIssueReferenceV2Provider = "jira_server"
	ExternalIssueReferenceV2ProviderLinear     ExternalIssueReferenceV2Provider = "linear"
	ExternalIssueReferenceV2ProviderShortcut   ExternalIssueReferenceV2Provider = "shortcut"
)

// Defines values for ExternalResourceV1ResourceType.
const (
	ExternalResourceV1ResourceTypeAtlassianStatuspageIncident ExternalResourceV1ResourceType = "atlassian_statuspage_incident"
	ExternalResourceV1ResourceTypeDatadogMonitorAlert         ExternalResourceV1ResourceType = "datadog_monitor_alert"
	ExternalResourceV1ResourceTypeGithubPullRequest           ExternalResourceV1ResourceType = "github_pull_request"
	ExternalResourceV1ResourceTypeOpsgenieAlert               ExternalResourceV1ResourceType = "opsgenie_alert"
	ExternalResourceV1ResourceTypePagerDutyIncident           ExternalResourceV1ResourceType = "pager_duty_incident"
	ExternalResourceV1ResourceTypeSentryIssue                 ExternalResourceV1ResourceType = "sentry_issue"
	ExternalResourceV1ResourceTypeStatuspageIncident          ExternalResourceV1ResourceType = "statuspage_incident"
	ExternalResourceV1ResourceTypeZendeskTicket               ExternalResourceV1ResourceType = "zendesk_ticket"
)

// Defines values for IdentityV1Roles.
const (
	IdentityV1RolesCatalogEditor   IdentityV1Roles = "catalog_editor"
	IdentityV1RolesCatalogViewer   IdentityV1Roles = "catalog_viewer"
	IdentityV1RolesGlobalAccess    IdentityV1Roles = "global_access"
	IdentityV1RolesIncidentCreator IdentityV1Roles = "incident_creator"
	IdentityV1RolesIncidentEditor  IdentityV1Roles = "incident_editor"
	IdentityV1RolesManageSettings  IdentityV1Roles = "manage_settings"
	IdentityV1RolesViewer          IdentityV1Roles = "viewer"
)

// Defines values for IncidentRoleV1RoleType.
const (
	IncidentRoleV1RoleTypeCustom   IncidentRoleV1RoleType = "custom"
	IncidentRoleV1RoleTypeLead     IncidentRoleV1RoleType = "lead"
	IncidentRoleV1RoleTypeReporter IncidentRoleV1RoleType = "reporter"
)

// Defines values for IncidentStatusV1Category.
const (
	IncidentStatusV1CategoryClosed   IncidentStatusV1Category = "closed"
	IncidentStatusV1CategoryDeclined IncidentStatusV1Category = "declined"
	IncidentStatusV1CategoryLive     IncidentStatusV1Category = "live"
	IncidentStatusV1CategoryMerged   IncidentStatusV1Category = "merged"
	IncidentStatusV1CategoryTriage   IncidentStatusV1Category = "triage"
)

// Defines values for IncidentTypeV1CreateInTriage.
const (
	IncidentTypeV1CreateInTriageAlways   IncidentTypeV1CreateInTriage = "always"
	IncidentTypeV1CreateInTriageOptional IncidentTypeV1CreateInTriage = "optional"
)

// Defines values for IncidentV1Mode.
const (
	IncidentV1ModeReal     IncidentV1Mode = "real"
	IncidentV1ModeTest     IncidentV1Mode = "test"
	IncidentV1ModeTutorial IncidentV1Mode = "tutorial"
)

// Defines values for IncidentV1Status.
const (
	IncidentV1StatusClosed        IncidentV1Status = "closed"
	IncidentV1StatusDeclined      IncidentV1Status = "declined"
	IncidentV1StatusFixing        IncidentV1Status = "fixing"
	IncidentV1StatusInvestigating IncidentV1Status = "investigating"
	IncidentV1StatusMonitoring    IncidentV1Status = "monitoring"
	IncidentV1StatusTriage        IncidentV1Status = "triage"
)

// Defines values for IncidentV1Visibility.
const (
	IncidentV1VisibilityPrivate IncidentV1Visibility = "private"
	IncidentV1VisibilityPublic  IncidentV1Visibility = "public"
)

// Defines values for IncidentV2Mode.
const (
	IncidentV2ModeRetrospective IncidentV2Mode = "retrospective"
	IncidentV2ModeStandard      IncidentV2Mode = "standard"
	IncidentV2ModeTest          IncidentV2Mode = "test"
	IncidentV2ModeTutorial      IncidentV2Mode = "tutorial"
)

// Defines values for IncidentV2Visibility.
const (
	IncidentV2VisibilityPrivate IncidentV2Visibility = "private"
	IncidentV2VisibilityPublic  IncidentV2Visibility = "public"
)

// Defines values for UpdateRequestBody2Required.
const (
	UpdateRequestBody2RequiredAlways        UpdateRequestBody2Required = "always"
	UpdateRequestBody2RequiredBeforeClosure UpdateRequestBody2Required = "before_closure"
	UpdateRequestBody2RequiredNever         UpdateRequestBody2Required = "never"
)

// Defines values for UpdateTypeRequestBodyColor.
const (
	Blue   UpdateTypeRequestBodyColor = "blue"
	Green  UpdateTypeRequestBodyColor = "green"
	Red    UpdateTypeRequestBodyColor = "red"
	Slate  UpdateTypeRequestBodyColor = "slate"
	Violet UpdateTypeRequestBodyColor = "violet"
	Yellow UpdateTypeRequestBodyColor = "yellow"
)

// Defines values for UpdateTypeRequestBodyIcon.
const (
	Bolt      UpdateTypeRequestBodyIcon = "bolt"
	Box       UpdateTypeRequestBodyIcon = "box"
	Briefcase UpdateTypeRequestBodyIcon = "briefcase"
	Browser   UpdateTypeRequestBodyIcon = "browser"
	Bulb      UpdateTypeRequestBodyIcon = "bulb"
	Clock     UpdateTypeRequestBodyIcon = "clock"
	Cog       UpdateTypeRequestBodyIcon = "cog"
	Database  UpdateTypeRequestBodyIcon = "database"
	Doc       UpdateTypeRequestBodyIcon = "doc"
	Email     UpdateTypeRequestBodyIcon = "email"
	Server    UpdateTypeRequestBodyIcon = "server"
	Severity  UpdateTypeRequestBodyIcon = "severity"
	Star      UpdateTypeRequestBodyIcon = "star"
	Tag       UpdateTypeRequestBodyIcon = "tag"
	User      UpdateTypeRequestBodyIcon = "user"
	Users     UpdateTypeRequestBodyIcon = "users"
)

// Defines values for UserV1Role.
const (
	UserV1RoleAdministrator UserV1Role = "administrator"
	UserV1RoleOwner         UserV1Role = "owner"
	UserV1RoleResponder     UserV1Role = "responder"
	UserV1RoleUnset         UserV1Role = "unset"
	UserV1RoleViewer        UserV1Role = "viewer"
)

// Defines values for ActionsV1ListParamsIncidentMode.
const (
	Real     ActionsV1ListParamsIncidentMode = "real"
	Test     ActionsV1ListParamsIncidentMode = "test"
	Tutorial ActionsV1ListParamsIncidentMode = "tutorial"
)

// Defines values for IncidentAttachmentsV1ListParamsResourceType.
const (
	AtlassianStatuspageIncident IncidentAttachmentsV1ListParamsResourceType = "atlassian_statuspage_incident"
	DatadogMonitorAlert         IncidentAttachmentsV1ListParamsResourceType = "datadog_monitor_alert"
	GithubPullRequest           IncidentAttachmentsV1ListParamsResourceType = "github_pull_request"
	OpsgenieAlert               IncidentAttachmentsV1ListParamsResourceType = "opsgenie_alert"
	PagerDutyIncident           IncidentAttachmentsV1ListParamsResourceType = "pager_duty_incident"
	SentryIssue                 IncidentAttachmentsV1ListParamsResourceType = "sentry_issue"
	StatuspageIncident          IncidentAttachmentsV1ListParamsResourceType = "statuspage_incident"
	ZendeskTicket               IncidentAttachmentsV1ListParamsResourceType = "zendesk_ticket"
)

// APIKeyV2 defines model for APIKeyV2.
type APIKeyV2 struct {
	// Id Unique identifier for this API key
	Id string `json:"id"`

	// Name The name of the API key, for the user's reference
	Name string `json:"name"`
}

// ActionV1 defines model for ActionV1.
type ActionV1 struct {
	Assignee *UserV1 `json:"assignee,omitempty"`

	// CompletedAt When the action was completed
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the action
	Description            *string                   `json:"description,omitempty"`
	ExternalIssueReference *ExternalIssueReferenceV1 `json:"external_issue_reference,omitempty"`

	// FollowUp Whether an action is marked as follow-up
	FollowUp bool `json:"follow_up"`

	// Id Unique identifier for the action
	Id string `json:"id"`

	// IncidentId Unique identifier of the incident the action belongs to
	IncidentId string `json:"incident_id"`

	// Status Status of the action
	Status ActionV1Status `json:"status"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// ActionV1Status Status of the action
type ActionV1Status string

// ActorV2 defines model for ActorV2.
type ActorV2 struct {
	ApiKey *APIKeyV2 `json:"api_key,omitempty"`
	User   *UserV1   `json:"user,omitempty"`
}

// CatalogAttributeBindingPayloadV2 defines model for CatalogAttributeBindingPayloadV2.
type CatalogAttributeBindingPayloadV2 struct {
	// ArrayValue If set, this is the array value of the attribute
	ArrayValue *[]CatalogAttributeValuePayloadV2 `json:"array_value,omitempty"`
	Value      *CatalogAttributeValuePayloadV2   `json:"value,omitempty"`
}

// CatalogAttributeBindingV2 defines model for CatalogAttributeBindingV2.
type CatalogAttributeBindingV2 struct {
	// ArrayValue If array_value is set, this helps render the values
	ArrayValue *[]CatalogAttributeValueV2 `json:"array_value,omitempty"`
	Value      *CatalogAttributeValueV2   `json:"value,omitempty"`
}

// CatalogAttributeValuePayloadV2 defines model for CatalogAttributeValuePayloadV2.
type CatalogAttributeValuePayloadV2 struct {
	// Literal The literal value of this attribute
	Literal *string `json:"literal,omitempty"`
}

// CatalogAttributeValueV2 defines model for CatalogAttributeValueV2.
type CatalogAttributeValueV2 struct {
	CatalogEntry *CatalogEntryReferenceV2 `json:"catalog_entry,omitempty"`

	// ImageUrl If appropriate, URL to an image that can be displayed alongside the option
	ImageUrl *string `json:"image_url,omitempty"`

	// IsImageSlackIcon If true, the image_url is a Slack icon and should be displayed as such
	IsImageSlackIcon *bool `json:"is_image_slack_icon,omitempty"`

	// Label Human readable label to be displayed for user to select
	Label string `json:"label"`

	// Literal If set, this is the literal value of the step parameter
	Literal *string `json:"literal,omitempty"`

	// SortKey Gives an indication of how to sort the options when displayed to the user
	SortKey string `json:"sort_key"`
}

// CatalogEntryReferenceV2 defines model for CatalogEntryReferenceV2.
type CatalogEntryReferenceV2 struct {
	// CatalogEntryId ID of this catalog entry
	CatalogEntryId string `json:"catalog_entry_id"`

	// CatalogEntryName The name of this entry
	CatalogEntryName string `json:"catalog_entry_name"`

	// CatalogTypeId ID of this catalog type
	CatalogTypeId string `json:"catalog_type_id"`
}

// CatalogEntryV2 defines model for CatalogEntryV2.
type CatalogEntryV2 struct {
	// Aliases Optional aliases that can be used to reference this entry
	Aliases []string `json:"aliases"`

	// AttributeValues Values of this entry
	AttributeValues map[string]CatalogAttributeBindingV2 `json:"attribute_values"`

	// CatalogTypeId ID of this catalog type
	CatalogTypeId string `json:"catalog_type_id"`

	// CreatedAt When this entry was created
	CreatedAt time.Time `json:"created_at"`

	// ExternalId An optional alternative ID for this entry, which is ensured to be unique for the type
	ExternalId *string `json:"external_id,omitempty"`

	// Id ID of this resource
	Id string `json:"id"`

	// Name Name is the human readable name of this entry
	Name string `json:"name"`

	// Rank When catalog type is ranked, this is used to help order things
	Rank int32 `json:"rank"`

	// UpdatedAt When this entry was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CatalogResourceV2 defines model for CatalogResourceV2.
type CatalogResourceV2 struct {
	// Category Which category of resource
	Category CatalogResourceV2Category `json:"category"`

	// Description Human readable description for this resource
	Description string `json:"description"`

	// Label Label for this catalog resource type
	Label string `json:"label"`

	// Type Catalog type name for this resource
	Type string `json:"type"`

	// ValueDocstring Documentation for the literal string value of this resource
	ValueDocstring string `json:"value_docstring"`
}

// CatalogResourceV2Category Which category of resource
type CatalogResourceV2Category string

// CatalogTypeAttributePayloadV2 defines model for CatalogTypeAttributePayloadV2.
type CatalogTypeAttributePayloadV2 struct {
	// Array Whether this attribute is an array
	Array bool `json:"array"`

	// Id The ID of this attribute
	Id *string `json:"id,omitempty"`

	// Name Unique name of this attribute
	Name string `json:"name"`

	// Type Catalog type name for this attribute
	Type string `json:"type"`
}

// CatalogTypeAttributeV2 defines model for CatalogTypeAttributeV2.
type CatalogTypeAttributeV2 struct {
	// Array Whether this attribute is an array
	Array bool `json:"array"`

	// Id The ID of this attribute
	Id string `json:"id"`

	// Name Unique name of this attribute
	Name string `json:"name"`

	// Type Catalog type name for this attribute
	Type string `json:"type"`
}

// CatalogTypeSchemaV2 defines model for CatalogTypeSchemaV2.
type CatalogTypeSchemaV2 struct {
	// Attributes Attributes of this catalog type
	Attributes []CatalogTypeAttributeV2 `json:"attributes"`

	// Version The version number of this schema
	Version int64 `json:"version"`
}

// CatalogTypeV2 defines model for CatalogTypeV2.
type CatalogTypeV2 struct {
	// Annotations Annotations that can track metadata about this type
	Annotations map[string]string `json:"annotations"`

	// Color Sets the display color of this type in the dashboard
	Color CatalogTypeV2Color `json:"color"`

	// CreatedAt When this type was created
	CreatedAt time.Time `json:"created_at"`

	// Description Human readble description of this type
	Description string `json:"description"`

	// EstimatedCount If populated, gives an estimated count of entries for this type
	EstimatedCount *int64 `json:"estimated_count,omitempty"`

	// ExternalType The external resource this type is synced from, if any
	ExternalType *string `json:"external_type,omitempty"`

	// Icon Sets the display icon of this type in the dashboard
	Icon CatalogTypeV2Icon `json:"icon"`

	// Id ID of this resource
	Id string `json:"id"`

	// IsEditable Catalog types that are synced with external resources can't be edited
	IsEditable bool `json:"is_editable"`

	// Name Name is the human readable name of this type
	Name string `json:"name"`

	// Ranked If this type should be ranked
	Ranked bool `json:"ranked"`

	// RequiredIntegrations If populated, the integrations required for this type
	RequiredIntegrations *[]string           `json:"required_integrations,omitempty"`
	Schema               CatalogTypeSchemaV2 `json:"schema"`

	// SemanticType Semantic type of this resource
	SemanticType string `json:"semantic_type"`

	// SourceRepoUrl The url of the external repository where this type is managed
	SourceRepoUrl *string `json:"source_repo_url,omitempty"`

	// TypeName The type name of this catalog type, to be used when defining attributes. This is immutable once a CatalogType has been created. For non-externally sync types, it must follow the pattern Custom["SomeName "]
	TypeName string `json:"type_name"`

	// UpdatedAt When this type was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CatalogTypeV2Color Sets the display color of this type in the dashboard
type CatalogTypeV2Color string

// CatalogTypeV2Icon Sets the display icon of this type in the dashboard
type CatalogTypeV2Icon string

// CreateEntryRequestBody defines model for CreateEntryRequestBody.
type CreateEntryRequestBody struct {
	// Aliases Optional aliases that can be used to reference this entry
	Aliases *[]string `json:"aliases,omitempty"`

	// AttributeValues Values of this entry
	AttributeValues map[string]CatalogAttributeBindingPayloadV2 `json:"attribute_values"`

	// CatalogTypeId ID of this catalog type
	CatalogTypeId string `json:"catalog_type_id"`

	// ExternalId An optional alternative ID for this entry, which is ensured to be unique for the type
	ExternalId *string `json:"external_id,omitempty"`

	// Name Name is the human readable name of this entry
	Name string `json:"name"`

	// Rank When catalog type is ranked, this is used to help order things
	Rank *int32 `json:"rank,omitempty"`
}

// CreateEntryResponseBody defines model for CreateEntryResponseBody.
type CreateEntryResponseBody struct {
	CatalogEntry CatalogEntryV2 `json:"catalog_entry"`
}

// CreateRequestBody defines model for CreateRequestBody.
type CreateRequestBody struct {
	// CustomFieldId ID of the custom field this option belongs to
	CustomFieldId string `json:"custom_field_id"`

	// SortKey Sort key used to order the custom field options correctly
	SortKey *int64 `json:"sort_key,omitempty"`

	// Value Human readable name for the custom field option
	Value string `json:"value"`
}

// CreateRequestBody2 defines model for CreateRequestBody2.
type CreateRequestBody2 struct {
	// Description Description of the custom field
	Description string `json:"description"`

	// FieldType Type of custom field
	FieldType CreateRequestBody2FieldType `json:"field_type"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// Required When this custom field must be set during the incident lifecycle.
	Required CreateRequestBody2Required `json:"required"`

	// ShowBeforeClosure Whether a custom field should be shown in the incident close modal. If this custom field is required before closure, but no value has been set for it, the field will be shown in the closure modal whatever the value of this setting.
	ShowBeforeClosure bool `json:"show_before_closure"`

	// ShowBeforeCreation Whether a custom field should be shown in the incident creation modal. This must be true if the field is always required.
	ShowBeforeCreation bool `json:"show_before_creation"`

	// ShowBeforeUpdate Whether a custom field should be shown in the incident update modal.
	ShowBeforeUpdate bool `json:"show_before_update"`

	// ShowInAnnouncementPost Whether a custom field should be shown in the list of fields as part of the announcement post when set.
	ShowInAnnouncementPost *bool `json:"show_in_announcement_post,omitempty"`
}

// CreateRequestBody2FieldType Type of custom field
type CreateRequestBody2FieldType string

// CreateRequestBody2Required When this custom field must be set during the incident lifecycle.
type CreateRequestBody2Required string

// CreateRequestBody3 defines model for CreateRequestBody3.
type CreateRequestBody3 struct {
	// IncidentId ID of the incident to add an attachment to
	IncidentId string `json:"incident_id"`
	Resource   struct {
		// ExternalId ID of the resource in the external system
		ExternalId string `json:"external_id"`

		// ResourceType E.g. PagerDuty: the external system that holds the resource
		ResourceType CreateRequestBody3ResourceResourceType `json:"resource_type"`
	} `json:"resource"`
}

// CreateRequestBody3ResourceResourceType E.g. PagerDuty: the external system that holds the resource
type CreateRequestBody3ResourceResourceType string

// CreateRequestBody4 defines model for CreateRequestBody4.
type CreateRequestBody4 struct {
	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Instructions Provided to whoever is nominated for the role
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// Required Whether incident require this role to be set
	Required bool `json:"required"`

	// Shortform Short human readable name for Slack
	Shortform string `json:"shortform"`
}

// CreateRequestBody5 defines model for CreateRequestBody5.
type CreateRequestBody5 struct {
	// Category Whether the status should be considered 'live' or 'closed'. The triage and declined statuses cannot be created or modified.
	Category CreateRequestBody5Category `json:"category"`

	// Description Rich text description of the incident status
	Description string `json:"description"`

	// Name Unique name of this status
	Name string `json:"name"`
}

// CreateRequestBody5Category Whether the status should be considered 'live' or 'closed'. The triage and declined statuses cannot be created or modified.
type CreateRequestBody5Category string

// CreateRequestBody6 defines model for CreateRequestBody6.
type CreateRequestBody6 struct {
	// CustomFieldEntries Set the incident's custom fields to these values
	CustomFieldEntries *[]CustomFieldEntryPayloadV1 `json:"custom_field_entries,omitempty"`

	// IdempotencyKey Unique string used to de-duplicate incident create requests
	IdempotencyKey string `json:"idempotency_key"`

	// IncidentRoleAssignments Assign incident roles to these people
	IncidentRoleAssignments *[]IncidentRoleAssignmentPayloadV1 `json:"incident_role_assignments,omitempty"`

	// IncidentTypeId Incident type to create this incident as
	IncidentTypeId *string `json:"incident_type_id,omitempty"`

	// Mode Whether the incident is real or test
	Mode *CreateRequestBody6Mode `json:"mode,omitempty"`

	// Name Explanation of the incident
	Name *string `json:"name,omitempty"`

	// SeverityId Severity to create incident as
	SeverityId *string `json:"severity_id,omitempty"`

	// SlackTeamId ID of the Slack team / workspace
	SlackTeamId *string `json:"slack_team_id,omitempty"`

	// SourceMessageChannelId Channel ID of the source message, if this incident was created from one
	SourceMessageChannelId *string `json:"source_message_channel_id,omitempty"`

	// SourceMessageTimestamp Timestamp of the source message, if this incident was created from one
	SourceMessageTimestamp *string `json:"source_message_timestamp,omitempty"`

	// Status Current status of the incident
	Status *CreateRequestBody6Status `json:"status,omitempty"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`

	// Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
	Visibility CreateRequestBody6Visibility `json:"visibility"`
}

// CreateRequestBody6Mode Whether the incident is real or test
type CreateRequestBody6Mode string

// CreateRequestBody6Status Current status of the incident
type CreateRequestBody6Status string

// CreateRequestBody6Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
type CreateRequestBody6Visibility string

// CreateRequestBody7 defines model for CreateRequestBody7.
type CreateRequestBody7 struct {
	// CustomFieldEntries Set the incident's custom fields to these values
	CustomFieldEntries *[]CustomFieldEntryPayloadV1 `json:"custom_field_entries,omitempty"`

	// Id Unique identifier for the incident
	Id *string `json:"id,omitempty"`

	// IdempotencyKey Unique string used to de-duplicate incident create requests
	IdempotencyKey string `json:"idempotency_key"`

	// IncidentRoleAssignments Assign incident roles to these people
	IncidentRoleAssignments *[]IncidentRoleAssignmentPayloadV2 `json:"incident_role_assignments,omitempty"`

	// IncidentStatusId Incident status to assign to the incident
	IncidentStatusId *string `json:"incident_status_id,omitempty"`

	// IncidentTimestampValues Assign the incident's timestamps to these values
	IncidentTimestampValues *[]IncidentTimestampValuePayloadV2 `json:"incident_timestamp_values,omitempty"`

	// IncidentTypeId Incident type to create this incident as
	IncidentTypeId *string `json:"incident_type_id,omitempty"`

	// Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
	Mode *CreateRequestBody7Mode `json:"mode,omitempty"`

	// Name Explanation of the incident
	Name                         *string                         `json:"name,omitempty"`
	RetrospectiveIncidentOptions *RetrospectiveIncidentOptionsV2 `json:"retrospective_incident_options,omitempty"`

	// SeverityId Severity to create incident as
	SeverityId *string `json:"severity_id,omitempty"`

	// SlackTeamId Slack Team to create the incident in
	SlackTeamId *string `json:"slack_team_id,omitempty"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`

	// Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
	Visibility CreateRequestBody7Visibility `json:"visibility"`
}

// CreateRequestBody7Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
type CreateRequestBody7Mode string

// CreateRequestBody7Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
type CreateRequestBody7Visibility string

// CreateRequestBody8 defines model for CreateRequestBody8.
type CreateRequestBody8 struct {
	// Description Description of the severity
	Description string `json:"description"`

	// Name Human readable name of the severity
	Name string `json:"name"`

	// Rank Rank to help sort severities (lower numbers are less severe)
	Rank *int64 `json:"rank,omitempty"`
}

// CreateResponseBody defines model for CreateResponseBody.
type CreateResponseBody struct {
	IncidentAttachment IncidentAttachmentV1 `json:"incident_attachment"`
}

// CreateTypeRequestBody defines model for CreateTypeRequestBody.
type CreateTypeRequestBody struct {
	// Annotations Annotations that can track metadata about this type
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Color Sets the display color of this type in the dashboard
	Color *CreateTypeRequestBodyColor `json:"color,omitempty"`

	// Description Human readble description of this type
	Description string `json:"description"`

	// Icon Sets the display icon of this type in the dashboard
	Icon *CreateTypeRequestBodyIcon `json:"icon,omitempty"`

	// Name Name is the human readable name of this type
	Name string `json:"name"`

	// Ranked If this type should be ranked
	Ranked *bool `json:"ranked,omitempty"`

	// SemanticType Semantic type of this resource
	SemanticType *string `json:"semantic_type,omitempty"`

	// SourceRepoUrl The url of the external repository where this type is managed
	SourceRepoUrl *string `json:"source_repo_url,omitempty"`

	// TypeName The type name of this catalog type, to be used when defining attributes. This is immutable once a CatalogType has been created. For non-externally sync types, it must follow the pattern Custom["SomeName "]
	TypeName *string `json:"type_name,omitempty"`
}

// CreateTypeRequestBodyColor Sets the display color of this type in the dashboard
type CreateTypeRequestBodyColor string

// CreateTypeRequestBodyIcon Sets the display icon of this type in the dashboard
type CreateTypeRequestBodyIcon string

// CreateTypeResponseBody defines model for CreateTypeResponseBody.
type CreateTypeResponseBody struct {
	CatalogType CatalogTypeV2 `json:"catalog_type"`
}

// CustomFieldEntryPayloadV1 defines model for CustomFieldEntryPayloadV1.
type CustomFieldEntryPayloadV1 struct {
	// CustomFieldId ID of the custom field this entry is linked against
	CustomFieldId string `json:"custom_field_id"`

	// Values List of values to associate with this entry
	Values []CustomFieldValuePayloadV1 `json:"values"`
}

// CustomFieldEntryV1 defines model for CustomFieldEntryV1.
type CustomFieldEntryV1 struct {
	CustomField CustomFieldTypeInfoV1 `json:"custom_field"`

	// Values List of custom field values set on this entry
	Values []CustomFieldValueV1 `json:"values"`
}

// CustomFieldOptionV1 defines model for CustomFieldOptionV1.
type CustomFieldOptionV1 struct {
	// CustomFieldId ID of the custom field this option belongs to
	CustomFieldId string `json:"custom_field_id"`

	// Id Unique identifier for the custom field option
	Id string `json:"id"`

	// SortKey Sort key used to order the custom field options correctly
	SortKey int64 `json:"sort_key"`

	// Value Human readable name for the custom field option
	Value string `json:"value"`
}

// CustomFieldTypeInfoV1 defines model for CustomFieldTypeInfoV1.
type CustomFieldTypeInfoV1 struct {
	// Description Description of the custom field
	Description string `json:"description"`

	// FieldType Type of custom field
	FieldType CustomFieldTypeInfoV1FieldType `json:"field_type"`

	// Id Unique identifier for the custom field
	Id string `json:"id"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// Options What options are available for this custom field, if this field has options
	Options []CustomFieldOptionV1 `json:"options"`
}

// CustomFieldTypeInfoV1FieldType Type of custom field
type CustomFieldTypeInfoV1FieldType string

// CustomFieldV1 defines model for CustomFieldV1.
type CustomFieldV1 struct {
	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the custom field
	Description string `json:"description"`

	// FieldType Type of custom field
	FieldType CustomFieldV1FieldType `json:"field_type"`

	// Id Unique identifier for the custom field
	Id string `json:"id"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// Options What options are available for this custom field, if this field has options
	Options []CustomFieldOptionV1 `json:"options"`

	// Required When this custom field must be set during the incident lifecycle.
	Required CustomFieldV1Required `json:"required"`

	// ShowBeforeClosure Whether a custom field should be shown in the incident close modal. If this custom field is required before closure, but no value has been set for it, the field will be shown in the closure modal whatever the value of this setting.
	ShowBeforeClosure bool `json:"show_before_closure"`

	// ShowBeforeCreation Whether a custom field should be shown in the incident creation modal. This must be true if the field is always required.
	ShowBeforeCreation bool `json:"show_before_creation"`

	// ShowBeforeUpdate Whether a custom field should be shown in the incident update modal.
	ShowBeforeUpdate bool `json:"show_before_update"`

	// ShowInAnnouncementPost Whether a custom field should be shown in the list of fields as part of the announcement post when set.
	ShowInAnnouncementPost *bool `json:"show_in_announcement_post,omitempty"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CustomFieldV1FieldType Type of custom field
type CustomFieldV1FieldType string

// CustomFieldV1Required When this custom field must be set during the incident lifecycle.
type CustomFieldV1Required string

// CustomFieldValuePayloadV1 defines model for CustomFieldValuePayloadV1.
type CustomFieldValuePayloadV1 struct {
	// Id Unique identifier for the custom field value
	Id *string `json:"id,omitempty"`

	// ValueLink If the custom field type is 'link', this will contain the value assigned.
	ValueLink *string `json:"value_link,omitempty"`

	// ValueNumeric If the custom field type is 'numeric', this will contain the value assigned.
	ValueNumeric *string `json:"value_numeric,omitempty"`

	// ValueOptionId ID of the custom field option
	ValueOptionId *string `json:"value_option_id,omitempty"`

	// ValueText If the custom field type is 'text', this will contain the value assigned.
	ValueText *string `json:"value_text,omitempty"`

	// ValueTimestamp Deprecated: please use incident timestamp values instead
	ValueTimestamp *string `json:"value_timestamp,omitempty"`
}

// CustomFieldValueV1 defines model for CustomFieldValueV1.
type CustomFieldValueV1 struct {
	// ValueLink If the custom field type is 'link', this will contain the value assigned.
	ValueLink *string `json:"value_link,omitempty"`

	// ValueNumeric If the custom field type is 'numeric', this will contain the value assigned.
	ValueNumeric *string              `json:"value_numeric,omitempty"`
	ValueOption  *CustomFieldOptionV1 `json:"value_option,omitempty"`

	// ValueText If the custom field type is 'text', this will contain the value assigned.
	ValueText *string `json:"value_text,omitempty"`
}

// EditRequestBody defines model for EditRequestBody.
type EditRequestBody struct {
	Incident IncidentEditPayloadV2 `json:"incident"`

	// NotifyIncidentChannel Should we send Slack channel notifications to inform responders of this update? Note that this won't work if the Slack channel has already been archived.
	NotifyIncidentChannel bool `json:"notify_incident_channel"`
}

// ExternalIssueReferenceV1 defines model for ExternalIssueReferenceV1.
type ExternalIssueReferenceV1 struct {
	// IssueName Human readable ID for the issue
	IssueName *string `json:"issue_name,omitempty"`

	// IssuePermalink URL linking directly to the action in the issue tracker
	IssuePermalink *string `json:"issue_permalink,omitempty"`

	// Provider ID of the issue tracker provider
	Provider *ExternalIssueReferenceV1Provider `json:"provider,omitempty"`
}

// ExternalIssueReferenceV1Provider ID of the issue tracker provider
type ExternalIssueReferenceV1Provider string

// ExternalIssueReferenceV2 defines model for ExternalIssueReferenceV2.
type ExternalIssueReferenceV2 struct {
	// IssueName Human readable ID for the issue
	IssueName string `json:"issue_name"`

	// IssuePermalink URL linking directly to the action in the issue tracker
	IssuePermalink string `json:"issue_permalink"`

	// Provider ID of the issue tracker provider
	Provider ExternalIssueReferenceV2Provider `json:"provider"`
}

// ExternalIssueReferenceV2Provider ID of the issue tracker provider
type ExternalIssueReferenceV2Provider string

// ExternalResourceV1 defines model for ExternalResourceV1.
type ExternalResourceV1 struct {
	// ExternalId ID of the resource in the external system
	ExternalId string `json:"external_id"`

	// Permalink URL of the resource
	Permalink string `json:"permalink"`

	// ResourceType E.g. PagerDuty: the external system that holds the resource
	ResourceType ExternalResourceV1ResourceType `json:"resource_type"`

	// Title Title of resource
	Title string `json:"title"`
}

// ExternalResourceV1ResourceType E.g. PagerDuty: the external system that holds the resource
type ExternalResourceV1ResourceType string

// IdentityResponseBody defines model for IdentityResponseBody.
type IdentityResponseBody struct {
	Identity IdentityV1 `json:"identity"`
}

// IdentityV1 defines model for IdentityV1.
type IdentityV1 struct {
	// Name The name assigned to the current API Key
	Name string `json:"name"`

	// Roles Which roles have been enabled for this key
	Roles []IdentityV1Roles `json:"roles"`
}

// IdentityV1Roles defines model for IdentityV1.Roles.
type IdentityV1Roles string

// IncidentAttachmentV1 defines model for IncidentAttachmentV1.
type IncidentAttachmentV1 struct {
	// Id Unique identifier of this incident membership
	Id string `json:"id"`

	// IncidentId Unique identifier of the incident
	IncidentId string             `json:"incident_id"`
	Resource   ExternalResourceV1 `json:"resource"`
}

// IncidentEditPayloadV2 defines model for IncidentEditPayloadV2.
type IncidentEditPayloadV2 struct {
	// CustomFieldEntries Set the incident's custom fields to these values
	CustomFieldEntries *[]CustomFieldEntryPayloadV1 `json:"custom_field_entries,omitempty"`

	// IncidentTimestampValues Assign the incident's timestamps to these values
	IncidentTimestampValues *[]IncidentTimestampValuePayloadV2 `json:"incident_timestamp_values,omitempty"`

	// Name Explanation of the incident
	Name *string `json:"name,omitempty"`

	// SeverityId Severity to change incident to
	SeverityId *string `json:"severity_id,omitempty"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`
}

// IncidentRoleAssignmentPayloadV1 defines model for IncidentRoleAssignmentPayloadV1.
type IncidentRoleAssignmentPayloadV1 struct {
	Assignee UserReferencePayloadV1 `json:"assignee"`

	// IncidentRoleId Unique ID of an incident role
	IncidentRoleId string `json:"incident_role_id"`
}

// IncidentRoleAssignmentPayloadV2 defines model for IncidentRoleAssignmentPayloadV2.
type IncidentRoleAssignmentPayloadV2 struct {
	Assignee *UserReferencePayloadV1 `json:"assignee,omitempty"`

	// IncidentRoleId Unique ID of an incident role
	IncidentRoleId string `json:"incident_role_id"`
}

// IncidentRoleAssignmentV1 defines model for IncidentRoleAssignmentV1.
type IncidentRoleAssignmentV1 struct {
	Assignee *UserV1        `json:"assignee,omitempty"`
	Role     IncidentRoleV1 `json:"role"`
}

// IncidentRoleV1 defines model for IncidentRoleV1.
type IncidentRoleV1 struct {
	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Id Unique identifier for the role
	Id string `json:"id"`

	// Instructions Provided to whoever is nominated for the role
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// Required Whether incident require this role to be set
	Required bool `json:"required"`

	// RoleType Type of incident role
	RoleType IncidentRoleV1RoleType `json:"role_type"`

	// Shortform Short human readable name for Slack
	Shortform string `json:"shortform"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// IncidentRoleV1RoleType Type of incident role
type IncidentRoleV1RoleType string

// IncidentStatusV1 defines model for IncidentStatusV1.
type IncidentStatusV1 struct {
	// Category Whether this status is a live or closed status. If you have enabled auto-create, there will also be 'triage' and 'declined' statuses, which cannot be modified.
	Category  IncidentStatusV1Category `json:"category"`
	CreatedAt time.Time                `json:"created_at"`

	// Description Rich text description of the incident status
	Description string `json:"description"`

	// Id Unique ID of this incident status
	Id string `json:"id"`

	// Name Unique name of this status
	Name string `json:"name"`

	// Rank Order of this incident status
	Rank      int64     `json:"rank"`
	UpdatedAt time.Time `json:"updated_at"`
}

// IncidentStatusV1Category Whether this status is a live or closed status. If you have enabled auto-create, there will also be 'triage' and 'declined' statuses, which cannot be modified.
type IncidentStatusV1Category string

// IncidentTimestampV1 defines model for IncidentTimestampV1.
type IncidentTimestampV1 struct {
	// LastOccurredAt When this last occurred, if it did
	LastOccurredAt *time.Time `json:"last_occurred_at,omitempty"`

	// Name Name of the lifecycle event
	Name string `json:"name"`
}

// IncidentTimestampV2 defines model for IncidentTimestampV2.
type IncidentTimestampV2 struct {
	// Id Unique ID of this incident timestamp
	Id string `json:"id"`

	// Name Unique name of this timestamp
	Name string `json:"name"`

	// Rank Order in which this timestamp should be shown
	Rank int64 `json:"rank"`
}

// IncidentTimestampValuePayloadV2 defines model for IncidentTimestampValuePayloadV2.
type IncidentTimestampValuePayloadV2 struct {
	// IncidentTimestampId The id of the incident timestamp that this incident timestamp value is associated with.
	IncidentTimestampId string `json:"incident_timestamp_id"`

	// Value The current value of this timestamp, for this incident
	Value *time.Time `json:"value,omitempty"`
}

// IncidentTimestampValueV2 defines model for IncidentTimestampValueV2.
type IncidentTimestampValueV2 struct {
	// Value The current value of this timestamp, for this incident
	Value *time.Time `json:"value,omitempty"`
}

// IncidentTimestampWithValueV2 defines model for IncidentTimestampWithValueV2.
type IncidentTimestampWithValueV2 struct {
	IncidentTimestamp IncidentTimestampV2       `json:"incident_timestamp"`
	Value             *IncidentTimestampValueV2 `json:"value,omitempty"`
}

// IncidentTypeV1 defines model for IncidentTypeV1.
type IncidentTypeV1 struct {
	// CreateInTriage Whether incidents of this must always, or can optionally, be created in triage
	CreateInTriage IncidentTypeV1CreateInTriage `json:"create_in_triage"`

	// CreatedAt When this resource was created
	CreatedAt time.Time `json:"created_at"`

	// Description What is this incident type for?
	Description string `json:"description"`

	// Id Unique identifier for this Incident Type
	Id string `json:"id"`

	// IsDefault The default Incident Type is used when no other type is explicitly specified
	IsDefault bool `json:"is_default"`

	// Name The name of this Incident Type
	Name string `json:"name"`

	// PrivateIncidentsOnly Should all incidents created with this Incident Type be private?
	PrivateIncidentsOnly bool `json:"private_incidents_only"`

	// UpdatedAt When this resource was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// IncidentTypeV1CreateInTriage Whether incidents of this must always, or can optionally, be created in triage
type IncidentTypeV1CreateInTriage string

// IncidentUpdateV2 defines model for IncidentUpdateV2.
type IncidentUpdateV2 struct {
	// CreatedAt When the update was created
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for this incident update
	Id string `json:"id"`

	// IncidentId The incident this update relates to
	IncidentId string `json:"incident_id"`

	// Message Message that explains the context behind the update
	Message           *string          `json:"message,omitempty"`
	NewIncidentStatus IncidentStatusV1 `json:"new_incident_status"`
	NewSeverity       *SeverityV2      `json:"new_severity,omitempty"`
	Updater           ActorV2          `json:"updater"`
}

// IncidentV1 defines model for IncidentV1.
type IncidentV1 struct {
	// CallUrl The call URL attached to this incident
	CallUrl *string `json:"call_url,omitempty"`

	// CreatedAt When the incident was created
	CreatedAt time.Time `json:"created_at"`
	Creator   ActorV2   `json:"creator"`

	// CustomFieldEntries Custom field entries for this incident
	CustomFieldEntries []CustomFieldEntryV1 `json:"custom_field_entries"`

	// Id Unique identifier for the incident
	Id string `json:"id"`

	// IncidentRoleAssignments A list of who is assigned to each role for this incident
	IncidentRoleAssignments []IncidentRoleAssignmentV1 `json:"incident_role_assignments"`
	IncidentType            *IncidentTypeV1            `json:"incident_type,omitempty"`

	// Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
	Mode IncidentV1Mode `json:"mode"`

	// Name Explanation of the incident
	Name string `json:"name"`

	// Permalink A permanent link to the homepage for this incident
	Permalink *string `json:"permalink,omitempty"`

	// PostmortemDocumentUrl Description of the incident
	PostmortemDocumentUrl *string `json:"postmortem_document_url,omitempty"`

	// Reference Reference to this incident, as displayed across the product
	Reference string      `json:"reference"`
	Severity  *SeverityV2 `json:"severity,omitempty"`

	// SlackChannelId ID of the Slack channel in the organisation Slack workspace
	SlackChannelId string `json:"slack_channel_id"`

	// SlackChannelName Name of the slack channel
	SlackChannelName *string `json:"slack_channel_name,omitempty"`

	// SlackTeamId ID of the Slack team / workspace
	SlackTeamId string `json:"slack_team_id"`

	// Status Current status of the incident
	Status IncidentV1Status `json:"status"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`

	// Timestamps Incident lifecycle events and when they last occurred
	Timestamps *[]IncidentTimestampV1 `json:"timestamps,omitempty"`

	// UpdatedAt When the incident was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
	Visibility IncidentV1Visibility `json:"visibility"`
}

// IncidentV1Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
type IncidentV1Mode string

// IncidentV1Status Current status of the incident
type IncidentV1Status string

// IncidentV1Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
type IncidentV1Visibility string

// IncidentV2 defines model for IncidentV2.
type IncidentV2 struct {
	// CallUrl The call URL attached to this incident
	CallUrl *string `json:"call_url,omitempty"`

	// CreatedAt When the incident was created
	CreatedAt time.Time `json:"created_at"`
	Creator   ActorV2   `json:"creator"`

	// CustomFieldEntries Custom field entries for this incident
	CustomFieldEntries     []CustomFieldEntryV1      `json:"custom_field_entries"`
	ExternalIssueReference *ExternalIssueReferenceV2 `json:"external_issue_reference,omitempty"`

	// Id Unique identifier for the incident
	Id string `json:"id"`

	// IncidentRoleAssignments A list of who is assigned to each role for this incident
	IncidentRoleAssignments []IncidentRoleAssignmentV1 `json:"incident_role_assignments"`
	IncidentStatus          IncidentStatusV1           `json:"incident_status"`

	// IncidentTimestampValues Incident lifecycle events and when they occurred
	IncidentTimestampValues *[]IncidentTimestampWithValueV2 `json:"incident_timestamp_values,omitempty"`
	IncidentType            *IncidentTypeV1                 `json:"incident_type,omitempty"`

	// Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
	Mode IncidentV2Mode `json:"mode"`

	// Name Explanation of the incident
	Name string `json:"name"`

	// Permalink A permanent link to the homepage for this incident
	Permalink *string `json:"permalink,omitempty"`

	// PostmortemDocumentUrl Description of the incident
	PostmortemDocumentUrl *string `json:"postmortem_document_url,omitempty"`

	// Reference Reference to this incident, as displayed across the product
	Reference string      `json:"reference"`
	Severity  *SeverityV2 `json:"severity,omitempty"`

	// SlackChannelId ID of the Slack channel in the organisation Slack workspace
	SlackChannelId string `json:"slack_channel_id"`

	// SlackChannelName Name of the slack channel
	SlackChannelName *string `json:"slack_channel_name,omitempty"`

	// SlackTeamId ID of the Slack team / workspace
	SlackTeamId string `json:"slack_team_id"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`

	// UpdatedAt When the incident was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
	Visibility IncidentV2Visibility `json:"visibility"`
}

// IncidentV2Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
type IncidentV2Mode string

// IncidentV2Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
type IncidentV2Visibility string

// ListEntriesResponseBody defines model for ListEntriesResponseBody.
type ListEntriesResponseBody struct {
	CatalogEntries []CatalogEntryV2     `json:"catalog_entries"`
	CatalogType    CatalogTypeV2        `json:"catalog_type"`
	PaginationMeta PaginationMetaResult `json:"pagination_meta"`
}

// ListResourcesResponseBody defines model for ListResourcesResponseBody.
type ListResourcesResponseBody struct {
	Resources []CatalogResourceV2 `json:"resources"`
}

// ListResponseBody defines model for ListResponseBody.
type ListResponseBody struct {
	Actions []ActionV1 `json:"actions"`
}

// ListResponseBody10 defines model for ListResponseBody10.
type ListResponseBody10 struct {
	Incidents      []IncidentV1                   `json:"incidents"`
	PaginationMeta *PaginationMetaResultWithTotal `json:"pagination_meta,omitempty"`
}

// ListResponseBody11 defines model for ListResponseBody11.
type ListResponseBody11 struct {
	Incidents      []IncidentV2                   `json:"incidents"`
	PaginationMeta *PaginationMetaResultWithTotal `json:"pagination_meta,omitempty"`
}

// ListResponseBody12 defines model for ListResponseBody12.
type ListResponseBody12 struct {
	Severities []SeverityV2 `json:"severities"`
}

// ListResponseBody2 defines model for ListResponseBody2.
type ListResponseBody2 struct {
	CustomFieldOptions []CustomFieldOptionV1 `json:"custom_field_options"`
}

// ListResponseBody3 defines model for ListResponseBody3.
type ListResponseBody3 struct {
	CustomFields []CustomFieldV1 `json:"custom_fields"`
}

// ListResponseBody4 defines model for ListResponseBody4.
type ListResponseBody4 struct {
	IncidentAttachments []IncidentAttachmentV1 `json:"incident_attachments"`
}

// ListResponseBody5 defines model for ListResponseBody5.
type ListResponseBody5 struct {
	IncidentRoles []IncidentRoleV1 `json:"incident_roles"`
}

// ListResponseBody6 defines model for ListResponseBody6.
type ListResponseBody6 struct {
	IncidentStatuses []IncidentStatusV1 `json:"incident_statuses"`
}

// ListResponseBody7 defines model for ListResponseBody7.
type ListResponseBody7 struct {
	IncidentTimestamps []IncidentTimestampV2 `json:"incident_timestamps"`
}

// ListResponseBody8 defines model for ListResponseBody8.
type ListResponseBody8 struct {
	IncidentTypes []IncidentTypeV1 `json:"incident_types"`
}

// ListResponseBody9 defines model for ListResponseBody9.
type ListResponseBody9 struct {
	IncidentUpdates []IncidentUpdateV2    `json:"incident_updates"`
	PaginationMeta  *PaginationMetaResult `json:"pagination_meta,omitempty"`
}

// ListTypesResponseBody defines model for ListTypesResponseBody.
type ListTypesResponseBody struct {
	CatalogTypes []CatalogTypeV2 `json:"catalog_types"`
}

// PaginationMetaResult defines model for PaginationMetaResult.
type PaginationMetaResult struct {
	// After If provided, pass this as the 'after' param to load the next page
	After *string `json:"after,omitempty"`

	// PageSize What was the maximum number of results requested
	PageSize int64 `json:"page_size"`
}

// PaginationMetaResultWithTotal defines model for PaginationMetaResultWithTotal.
type PaginationMetaResultWithTotal struct {
	// After If provided, pass this as the 'after' param to load the next page
	After *string `json:"after,omitempty"`

	// PageSize What was the maximum number of results requested
	PageSize int64 `json:"page_size"`

	// TotalRecordCount How many matching records were there in total, if known
	TotalRecordCount *int64 `json:"total_record_count,omitempty"`
}

// RetrospectiveIncidentOptionsV2 defines model for RetrospectiveIncidentOptionsV2.
type RetrospectiveIncidentOptionsV2 struct {
	// SlackChannelId If the incident mode is 'retrospective', pass the ID of a Slack channel in your workspace to attach the incident to an existing channel, rather than creating a new one
	SlackChannelId *string `json:"slack_channel_id,omitempty"`
}

// SeverityV2 defines model for SeverityV2.
type SeverityV2 struct {
	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the severity
	Description string `json:"description"`

	// Id Unique identifier of the severity
	Id string `json:"id"`

	// Name Human readable name of the severity
	Name string `json:"name"`

	// Rank Rank to help sort severities (lower numbers are less severe)
	Rank int64 `json:"rank"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// ShowEntryResponseBody defines model for ShowEntryResponseBody.
type ShowEntryResponseBody struct {
	CatalogEntry CatalogEntryV2 `json:"catalog_entry"`
	CatalogType  CatalogTypeV2  `json:"catalog_type"`
}

// ShowResponseBody defines model for ShowResponseBody.
type ShowResponseBody struct {
	Action ActionV1 `json:"action"`
}

// ShowResponseBody10 defines model for ShowResponseBody10.
type ShowResponseBody10 struct {
	Severity SeverityV2 `json:"severity"`
}

// ShowResponseBody2 defines model for ShowResponseBody2.
type ShowResponseBody2 struct {
	CustomFieldOption CustomFieldOptionV1 `json:"custom_field_option"`
}

// ShowResponseBody3 defines model for ShowResponseBody3.
type ShowResponseBody3 struct {
	CustomField CustomFieldV1 `json:"custom_field"`
}

// ShowResponseBody4 defines model for ShowResponseBody4.
type ShowResponseBody4 struct {
	IncidentRole IncidentRoleV1 `json:"incident_role"`
}

// ShowResponseBody5 defines model for ShowResponseBody5.
type ShowResponseBody5 struct {
	IncidentStatus IncidentStatusV1 `json:"incident_status"`
}

// ShowResponseBody6 defines model for ShowResponseBody6.
type ShowResponseBody6 struct {
	IncidentTimestamp IncidentTimestampV2 `json:"incident_timestamp"`
}

// ShowResponseBody7 defines model for ShowResponseBody7.
type ShowResponseBody7 struct {
	IncidentType IncidentTypeV1 `json:"incident_type"`
}

// ShowResponseBody8 defines model for ShowResponseBody8.
type ShowResponseBody8 struct {
	Incident IncidentV1 `json:"incident"`
}

// ShowResponseBody9 defines model for ShowResponseBody9.
type ShowResponseBody9 struct {
	Incident IncidentV2 `json:"incident"`
}

// UpdateEntryRequestBody defines model for UpdateEntryRequestBody.
type UpdateEntryRequestBody struct {
	// Aliases Optional aliases that can be used to reference this entry
	Aliases *[]string `json:"aliases,omitempty"`

	// AttributeValues Values of this entry
	AttributeValues map[string]CatalogAttributeBindingPayloadV2 `json:"attribute_values"`

	// ExternalId An optional alternative ID for this entry, which is ensured to be unique for the type
	ExternalId *string `json:"external_id,omitempty"`

	// Name Name is the human readable name of this entry
	Name string `json:"name"`

	// Rank When catalog type is ranked, this is used to help order things
	Rank *int32 `json:"rank,omitempty"`
}

// UpdateRequestBody defines model for UpdateRequestBody.
type UpdateRequestBody struct {
	// SortKey Sort key used to order the custom field options correctly
	SortKey int64 `json:"sort_key"`

	// Value Human readable name for the custom field option
	Value string `json:"value"`
}

// UpdateRequestBody2 defines model for UpdateRequestBody2.
type UpdateRequestBody2 struct {
	// Description Description of the custom field
	Description string `json:"description"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// Required When this custom field must be set during the incident lifecycle.
	Required UpdateRequestBody2Required `json:"required"`

	// ShowBeforeClosure Whether a custom field should be shown in the incident close modal. If this custom field is required before closure, but no value has been set for it, the field will be shown in the closure modal whatever the value of this setting.
	ShowBeforeClosure bool `json:"show_before_closure"`

	// ShowBeforeCreation Whether a custom field should be shown in the incident creation modal. This must be true if the field is always required.
	ShowBeforeCreation bool `json:"show_before_creation"`

	// ShowBeforeUpdate Whether a custom field should be shown in the incident update modal.
	ShowBeforeUpdate bool `json:"show_before_update"`

	// ShowInAnnouncementPost Whether a custom field should be shown in the list of fields as part of the announcement post when set.
	ShowInAnnouncementPost *bool `json:"show_in_announcement_post,omitempty"`
}

// UpdateRequestBody2Required When this custom field must be set during the incident lifecycle.
type UpdateRequestBody2Required string

// UpdateRequestBody3 defines model for UpdateRequestBody3.
type UpdateRequestBody3 struct {
	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Instructions Provided to whoever is nominated for the role
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// Required Whether incident require this role to be set
	Required bool `json:"required"`

	// Shortform Short human readable name for Slack
	Shortform string `json:"shortform"`
}

// UpdateRequestBody4 defines model for UpdateRequestBody4.
type UpdateRequestBody4 struct {
	// Description Rich text description of the incident status
	Description string `json:"description"`

	// Name Unique name of this status
	Name string `json:"name"`
}

// UpdateTypeRequestBody defines model for UpdateTypeRequestBody.
type UpdateTypeRequestBody struct {
	// Annotations Annotations that can track metadata about this type
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Color Sets the display color of this type in the dashboard
	Color *UpdateTypeRequestBodyColor `json:"color,omitempty"`

	// Description Human readble description of this type
	Description string `json:"description"`

	// Icon Sets the display icon of this type in the dashboard
	Icon *UpdateTypeRequestBodyIcon `json:"icon,omitempty"`

	// Name Name is the human readable name of this type
	Name string `json:"name"`

	// Ranked If this type should be ranked
	Ranked *bool `json:"ranked,omitempty"`

	// SemanticType Semantic type of this resource
	SemanticType *string `json:"semantic_type,omitempty"`

	// SourceRepoUrl The url of the external repository where this type is managed
	SourceRepoUrl *string `json:"source_repo_url,omitempty"`
}

// UpdateTypeRequestBodyColor Sets the display color of this type in the dashboard
type UpdateTypeRequestBodyColor string

// UpdateTypeRequestBodyIcon Sets the display icon of this type in the dashboard
type UpdateTypeRequestBodyIcon string

// UpdateTypeSchemaRequestBody defines model for UpdateTypeSchemaRequestBody.
type UpdateTypeSchemaRequestBody struct {
	Attributes []CatalogTypeAttributePayloadV2 `json:"attributes"`
	Version    int64                           `json:"version"`
}

// UserReferencePayloadV1 defines model for UserReferencePayloadV1.
type UserReferencePayloadV1 struct {
	// Email The user's email address, matching the email on their Slack account
	Email *string `json:"email,omitempty"`

	// Id The incident.io ID of a user
	Id *string `json:"id,omitempty"`

	// SlackUserId The ID of the user's Slack account.
	SlackUserId *string `json:"slack_user_id,omitempty"`
}

// UserV1 defines model for UserV1.
type UserV1 struct {
	// Email Email address of the user.
	Email *string `json:"email,omitempty"`

	// Id Unique identifier of the user
	Id string `json:"id"`

	// Name Name of the user
	Name string `json:"name"`

	// Role DEPRECATED: Role of the user as of March 9th 2023, this value is no longer updated.
	Role UserV1Role `json:"role"`

	// SlackUserId Slack ID of the user
	SlackUserId *string `json:"slack_user_id,omitempty"`
}

// UserV1Role DEPRECATED: Role of the user as of March 9th 2023, this value is no longer updated.
type UserV1Role string

// ActionsV1ListParams defines parameters for ActionsV1List.
type ActionsV1ListParams struct {
	// IncidentId Find actions related to this incident
	IncidentId *string `form:"incident_id,omitempty" json:"incident_id,omitempty"`

	// IsFollowUp Filter to actions marked as being follow up actions
	IsFollowUp *bool `form:"is_follow_up,omitempty" json:"is_follow_up,omitempty"`

	// IncidentMode Filter to actions from incidents of the given mode. If not set, only actions from `real` incidents are returned
	IncidentMode *ActionsV1ListParamsIncidentMode `form:"incident_mode,omitempty" json:"incident_mode,omitempty"`
}

// ActionsV1ListParamsIncidentMode defines parameters for ActionsV1List.
type ActionsV1ListParamsIncidentMode string

// CustomFieldOptionsV1ListParams defines parameters for CustomFieldOptionsV1List.
type CustomFieldOptionsV1ListParams struct {
	// PageSize number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After A custom field option's ID. This endpoint will return a list of custom field options created after this option.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// CustomFieldId The custom field to list options for.
	CustomFieldId string `form:"custom_field_id" json:"custom_field_id"`
}

// IncidentAttachmentsV1ListParams defines parameters for IncidentAttachmentsV1List.
type IncidentAttachmentsV1ListParams struct {
	// IncidentId Incident that this attachment is against
	IncidentId *string `form:"incident_id,omitempty" json:"incident_id,omitempty"`

	// ExternalId ID of the resource in the external system
	ExternalId *string `form:"external_id,omitempty" json:"external_id,omitempty"`

	// ResourceType E.g. PagerDuty: the external system that holds the resource
	ResourceType *IncidentAttachmentsV1ListParamsResourceType `form:"resource_type,omitempty" json:"resource_type,omitempty"`
}

// IncidentAttachmentsV1ListParamsResourceType defines parameters for IncidentAttachmentsV1List.
type IncidentAttachmentsV1ListParamsResourceType string

// IncidentsV1ListParams defines parameters for IncidentsV1List.
type IncidentsV1ListParams struct {
	// PageSize Integer number of records to return
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An record's ID. This endpoint will return a list of records after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Status Filter for incidents in these statuses
	Status *[]string `form:"status,omitempty" json:"status,omitempty"`
}

// CatalogV2ListEntriesParams defines parameters for CatalogV2ListEntries.
type CatalogV2ListEntriesParams struct {
	// CatalogTypeId ID of this catalog type
	CatalogTypeId string `form:"catalog_type_id" json:"catalog_type_id"`

	// PageSize Integer number of records to return
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An record's ID. This endpoint will return a list of records after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// IncidentUpdatesV2ListParams defines parameters for IncidentUpdatesV2List.
type IncidentUpdatesV2ListParams struct {
	// IncidentId Incident whose updates you want to list
	IncidentId *string `form:"incident_id,omitempty" json:"incident_id,omitempty"`

	// PageSize Integer number of records to return
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An record's ID. This endpoint will return a list of records after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// IncidentsV2ListParams defines parameters for IncidentsV2List.
type IncidentsV2ListParams struct {
	// PageSize number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An incident's ID. This endpoint will return a list of incidents after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Status Filter on incident status. The accepted operators are 'one_of', or 'not_in'.
	Status *map[string][]string `form:"status,omitempty" json:"status,omitempty"`

	// Severity Filter on incident severity. The accepted operators are 'one_of', 'not_in', 'gte', 'lte'.
	Severity *map[string][]string `form:"severity,omitempty" json:"severity,omitempty"`

	// IncidentType Filter on incident type. The accepted operator is 'one_of'.
	IncidentType *map[string][]string `form:"incident_type,omitempty" json:"incident_type,omitempty"`

	// IncidentRole Filter on an incident role. Role ID should be sent, followed by the operator and values. The accepted operators are 'one_of', 'is_blank'.
	IncidentRole *map[string]map[string][]string `form:"incident_role,omitempty" json:"incident_role,omitempty"`

	// CustomField Filter on an incident custom field. Custom field ID should be sent, followed by the operator and values. Accepted operator will depend on the custom field type.
	CustomField *map[string]map[string][]string `form:"custom_field,omitempty" json:"custom_field,omitempty"`
}

// CustomFieldOptionsV1CreateJSONRequestBody defines body for CustomFieldOptionsV1Create for application/json ContentType.
type CustomFieldOptionsV1CreateJSONRequestBody = CreateRequestBody

// CustomFieldOptionsV1UpdateJSONRequestBody defines body for CustomFieldOptionsV1Update for application/json ContentType.
type CustomFieldOptionsV1UpdateJSONRequestBody = UpdateRequestBody

// CustomFieldsV1CreateJSONRequestBody defines body for CustomFieldsV1Create for application/json ContentType.
type CustomFieldsV1CreateJSONRequestBody = CreateRequestBody2

// CustomFieldsV1UpdateJSONRequestBody defines body for CustomFieldsV1Update for application/json ContentType.
type CustomFieldsV1UpdateJSONRequestBody = UpdateRequestBody2

// IncidentAttachmentsV1CreateJSONRequestBody defines body for IncidentAttachmentsV1Create for application/json ContentType.
type IncidentAttachmentsV1CreateJSONRequestBody = CreateRequestBody3

// IncidentRolesV1CreateJSONRequestBody defines body for IncidentRolesV1Create for application/json ContentType.
type IncidentRolesV1CreateJSONRequestBody = CreateRequestBody4

// IncidentRolesV1UpdateJSONRequestBody defines body for IncidentRolesV1Update for application/json ContentType.
type IncidentRolesV1UpdateJSONRequestBody = UpdateRequestBody3

// IncidentStatusesV1CreateJSONRequestBody defines body for IncidentStatusesV1Create for application/json ContentType.
type IncidentStatusesV1CreateJSONRequestBody = CreateRequestBody5

// IncidentStatusesV1UpdateJSONRequestBody defines body for IncidentStatusesV1Update for application/json ContentType.
type IncidentStatusesV1UpdateJSONRequestBody = UpdateRequestBody4

// IncidentsV1CreateJSONRequestBody defines body for IncidentsV1Create for application/json ContentType.
type IncidentsV1CreateJSONRequestBody = CreateRequestBody6

// SeveritiesV1CreateJSONRequestBody defines body for SeveritiesV1Create for application/json ContentType.
type SeveritiesV1CreateJSONRequestBody = CreateRequestBody8

// SeveritiesV1UpdateJSONRequestBody defines body for SeveritiesV1Update for application/json ContentType.
type SeveritiesV1UpdateJSONRequestBody = CreateRequestBody8

// CatalogV2CreateEntryJSONRequestBody defines body for CatalogV2CreateEntry for application/json ContentType.
type CatalogV2CreateEntryJSONRequestBody = CreateEntryRequestBody

// CatalogV2UpdateEntryJSONRequestBody defines body for CatalogV2UpdateEntry for application/json ContentType.
type CatalogV2UpdateEntryJSONRequestBody = UpdateEntryRequestBody

// CatalogV2CreateTypeJSONRequestBody defines body for CatalogV2CreateType for application/json ContentType.
type CatalogV2CreateTypeJSONRequestBody = CreateTypeRequestBody

// CatalogV2UpdateTypeJSONRequestBody defines body for CatalogV2UpdateType for application/json ContentType.
type CatalogV2UpdateTypeJSONRequestBody = UpdateTypeRequestBody

// CatalogV2UpdateTypeSchemaJSONRequestBody defines body for CatalogV2UpdateTypeSchema for application/json ContentType.
type CatalogV2UpdateTypeSchemaJSONRequestBody = UpdateTypeSchemaRequestBody

// IncidentsV2CreateJSONRequestBody defines body for IncidentsV2Create for application/json ContentType.
type IncidentsV2CreateJSONRequestBody = CreateRequestBody7

// IncidentsV2EditJSONRequestBody defines body for IncidentsV2Edit for application/json ContentType.
type IncidentsV2EditJSONRequestBody = EditRequestBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ActionsV1List request
	ActionsV1List(ctx context.Context, params *ActionsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsV1Show request
	ActionsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1List request
	CustomFieldOptionsV1List(ctx context.Context, params *CustomFieldOptionsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1Create request with any body
	CustomFieldOptionsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldOptionsV1Create(ctx context.Context, body CustomFieldOptionsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1Delete request
	CustomFieldOptionsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1Show request
	CustomFieldOptionsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1Update request with any body
	CustomFieldOptionsV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldOptionsV1Update(ctx context.Context, id string, body CustomFieldOptionsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1List request
	CustomFieldsV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1Create request with any body
	CustomFieldsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsV1Create(ctx context.Context, body CustomFieldsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1Delete request
	CustomFieldsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1Show request
	CustomFieldsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1Update request with any body
	CustomFieldsV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsV1Update(ctx context.Context, id string, body CustomFieldsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UtilitiesV1Identity request
	UtilitiesV1Identity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentAttachmentsV1List request
	IncidentAttachmentsV1List(ctx context.Context, params *IncidentAttachmentsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentAttachmentsV1Create request with any body
	IncidentAttachmentsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentAttachmentsV1Create(ctx context.Context, body IncidentAttachmentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentAttachmentsV1Delete request
	IncidentAttachmentsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1List request
	IncidentRolesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1Create request with any body
	IncidentRolesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentRolesV1Create(ctx context.Context, body IncidentRolesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1Delete request
	IncidentRolesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1Show request
	IncidentRolesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1Update request with any body
	IncidentRolesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentRolesV1Update(ctx context.Context, id string, body IncidentRolesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1List request
	IncidentStatusesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1Create request with any body
	IncidentStatusesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentStatusesV1Create(ctx context.Context, body IncidentStatusesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1Delete request
	IncidentStatusesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1Show request
	IncidentStatusesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1Update request with any body
	IncidentStatusesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentStatusesV1Update(ctx context.Context, id string, body IncidentStatusesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentTypesV1List request
	IncidentTypesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentTypesV1Show request
	IncidentTypesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV1List request
	IncidentsV1List(ctx context.Context, params *IncidentsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV1Create request with any body
	IncidentsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsV1Create(ctx context.Context, body IncidentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV1Show request
	IncidentsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UtilitiesV1OpenAPI request
	UtilitiesV1OpenAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1List request
	SeveritiesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1Create request with any body
	SeveritiesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SeveritiesV1Create(ctx context.Context, body SeveritiesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1Delete request
	SeveritiesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1Show request
	SeveritiesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1Update request with any body
	SeveritiesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SeveritiesV1Update(ctx context.Context, id string, body SeveritiesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ListEntries request
	CatalogV2ListEntries(ctx context.Context, params *CatalogV2ListEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2CreateEntry request with any body
	CatalogV2CreateEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2CreateEntry(ctx context.Context, body CatalogV2CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2DestroyEntry request
	CatalogV2DestroyEntry(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ShowEntry request
	CatalogV2ShowEntry(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2UpdateEntry request with any body
	CatalogV2UpdateEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2UpdateEntry(ctx context.Context, id string, body CatalogV2UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ListResources request
	CatalogV2ListResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ListTypes request
	CatalogV2ListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2CreateType request with any body
	CatalogV2CreateTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2CreateType(ctx context.Context, body CatalogV2CreateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2DestroyType request
	CatalogV2DestroyType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ShowType request
	CatalogV2ShowType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2UpdateType request with any body
	CatalogV2UpdateTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2UpdateType(ctx context.Context, id string, body CatalogV2UpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2UpdateTypeSchema request with any body
	CatalogV2UpdateTypeSchemaWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2UpdateTypeSchema(ctx context.Context, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentTimestampsV2List request
	IncidentTimestampsV2List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentTimestampsV2Show request
	IncidentTimestampsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentUpdatesV2List request
	IncidentUpdatesV2List(ctx context.Context, params *IncidentUpdatesV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV2List request
	IncidentsV2List(ctx context.Context, params *IncidentsV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV2Create request with any body
	IncidentsV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsV2Create(ctx context.Context, body IncidentsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV2Show request
	IncidentsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV2Edit request with any body
	IncidentsV2EditWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsV2Edit(ctx context.Context, id string, body IncidentsV2EditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ActionsV1List(ctx context.Context, params *ActionsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsV1ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1List(ctx context.Context, params *CustomFieldOptionsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1Create(ctx context.Context, body CustomFieldOptionsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1Update(ctx context.Context, id string, body CustomFieldOptionsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1Create(ctx context.Context, body CustomFieldsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1Update(ctx context.Context, id string, body CustomFieldsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UtilitiesV1Identity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUtilitiesV1IdentityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentAttachmentsV1List(ctx context.Context, params *IncidentAttachmentsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentAttachmentsV1ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentAttachmentsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentAttachmentsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentAttachmentsV1Create(ctx context.Context, body IncidentAttachmentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentAttachmentsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentAttachmentsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentAttachmentsV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1Create(ctx context.Context, body IncidentRolesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1Update(ctx context.Context, id string, body IncidentRolesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1Create(ctx context.Context, body IncidentStatusesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1Update(ctx context.Context, id string, body IncidentStatusesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentTypesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentTypesV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentTypesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentTypesV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV1List(ctx context.Context, params *IncidentsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV1ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV1Create(ctx context.Context, body IncidentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UtilitiesV1OpenAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUtilitiesV1OpenAPIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1Create(ctx context.Context, body SeveritiesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1Update(ctx context.Context, id string, body SeveritiesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ListEntries(ctx context.Context, params *CatalogV2ListEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ListEntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2CreateEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2CreateEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2CreateEntry(ctx context.Context, body CatalogV2CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2CreateEntryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2DestroyEntry(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2DestroyEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ShowEntry(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ShowEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateEntry(ctx context.Context, id string, body CatalogV2UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateEntryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ListResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ListResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ListTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2CreateTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2CreateTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2CreateType(ctx context.Context, body CatalogV2CreateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2CreateTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2DestroyType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2DestroyTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ShowType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ShowTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateType(ctx context.Context, id string, body CatalogV2UpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateTypeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateTypeSchemaWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateTypeSchemaRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateTypeSchema(ctx context.Context, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateTypeSchemaRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentTimestampsV2List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentTimestampsV2ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentTimestampsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentTimestampsV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentUpdatesV2List(ctx context.Context, params *IncidentUpdatesV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentUpdatesV2ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2List(ctx context.Context, params *IncidentsV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2Create(ctx context.Context, body IncidentsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2EditWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2EditRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2Edit(ctx context.Context, id string, body IncidentsV2EditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2EditRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewActionsV1ListRequest generates requests for ActionsV1List
func NewActionsV1ListRequest(server string, params *ActionsV1ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncidentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsFollowUp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_follow_up", runtime.ParamLocationQuery, *params.IsFollowUp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentMode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_mode", runtime.ParamLocationQuery, *params.IncidentMode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionsV1ShowRequest generates requests for ActionsV1Show
func NewActionsV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldOptionsV1ListRequest generates requests for CustomFieldOptionsV1List
func NewCustomFieldOptionsV1ListRequest(server string, params *CustomFieldOptionsV1ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_field_id", runtime.ParamLocationQuery, params.CustomFieldId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldOptionsV1CreateRequest calls the generic CustomFieldOptionsV1Create builder with application/json body
func NewCustomFieldOptionsV1CreateRequest(server string, body CustomFieldOptionsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldOptionsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomFieldOptionsV1CreateRequestWithBody generates requests for CustomFieldOptionsV1Create with any type of body
func NewCustomFieldOptionsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldOptionsV1DeleteRequest generates requests for CustomFieldOptionsV1Delete
func NewCustomFieldOptionsV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldOptionsV1ShowRequest generates requests for CustomFieldOptionsV1Show
func NewCustomFieldOptionsV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldOptionsV1UpdateRequest calls the generic CustomFieldOptionsV1Update builder with application/json body
func NewCustomFieldOptionsV1UpdateRequest(server string, id string, body CustomFieldOptionsV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldOptionsV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCustomFieldOptionsV1UpdateRequestWithBody generates requests for CustomFieldOptionsV1Update with any type of body
func NewCustomFieldOptionsV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsV1ListRequest generates requests for CustomFieldsV1List
func NewCustomFieldsV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV1CreateRequest calls the generic CustomFieldsV1Create builder with application/json body
func NewCustomFieldsV1CreateRequest(server string, body CustomFieldsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomFieldsV1CreateRequestWithBody generates requests for CustomFieldsV1Create with any type of body
func NewCustomFieldsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsV1DeleteRequest generates requests for CustomFieldsV1Delete
func NewCustomFieldsV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV1ShowRequest generates requests for CustomFieldsV1Show
func NewCustomFieldsV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV1UpdateRequest calls the generic CustomFieldsV1Update builder with application/json body
func NewCustomFieldsV1UpdateRequest(server string, id string, body CustomFieldsV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCustomFieldsV1UpdateRequestWithBody generates requests for CustomFieldsV1Update with any type of body
func NewCustomFieldsV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUtilitiesV1IdentityRequest generates requests for UtilitiesV1Identity
func NewUtilitiesV1IdentityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/identity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentAttachmentsV1ListRequest generates requests for IncidentAttachmentsV1List
func NewIncidentAttachmentsV1ListRequest(server string, params *IncidentAttachmentsV1ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_attachments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncidentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExternalId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_type", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentAttachmentsV1CreateRequest calls the generic IncidentAttachmentsV1Create builder with application/json body
func NewIncidentAttachmentsV1CreateRequest(server string, body IncidentAttachmentsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentAttachmentsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentAttachmentsV1CreateRequestWithBody generates requests for IncidentAttachmentsV1Create with any type of body
func NewIncidentAttachmentsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_attachments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentAttachmentsV1DeleteRequest generates requests for IncidentAttachmentsV1Delete
func NewIncidentAttachmentsV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_attachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV1ListRequest generates requests for IncidentRolesV1List
func NewIncidentRolesV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV1CreateRequest calls the generic IncidentRolesV1Create builder with application/json body
func NewIncidentRolesV1CreateRequest(server string, body IncidentRolesV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentRolesV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentRolesV1CreateRequestWithBody generates requests for IncidentRolesV1Create with any type of body
func NewIncidentRolesV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentRolesV1DeleteRequest generates requests for IncidentRolesV1Delete
func NewIncidentRolesV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV1ShowRequest generates requests for IncidentRolesV1Show
func NewIncidentRolesV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV1UpdateRequest calls the generic IncidentRolesV1Update builder with application/json body
func NewIncidentRolesV1UpdateRequest(server string, id string, body IncidentRolesV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentRolesV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIncidentRolesV1UpdateRequestWithBody generates requests for IncidentRolesV1Update with any type of body
func NewIncidentRolesV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentStatusesV1ListRequest generates requests for IncidentStatusesV1List
func NewIncidentStatusesV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentStatusesV1CreateRequest calls the generic IncidentStatusesV1Create builder with application/json body
func NewIncidentStatusesV1CreateRequest(server string, body IncidentStatusesV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentStatusesV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentStatusesV1CreateRequestWithBody generates requests for IncidentStatusesV1Create with any type of body
func NewIncidentStatusesV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentStatusesV1DeleteRequest generates requests for IncidentStatusesV1Delete
func NewIncidentStatusesV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentStatusesV1ShowRequest generates requests for IncidentStatusesV1Show
func NewIncidentStatusesV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentStatusesV1UpdateRequest calls the generic IncidentStatusesV1Update builder with application/json body
func NewIncidentStatusesV1UpdateRequest(server string, id string, body IncidentStatusesV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentStatusesV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIncidentStatusesV1UpdateRequestWithBody generates requests for IncidentStatusesV1Update with any type of body
func NewIncidentStatusesV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentTypesV1ListRequest generates requests for IncidentTypesV1List
func NewIncidentTypesV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentTypesV1ShowRequest generates requests for IncidentTypesV1Show
func NewIncidentTypesV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV1ListRequest generates requests for IncidentsV1List
func NewIncidentsV1ListRequest(server string, params *IncidentsV1ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV1CreateRequest calls the generic IncidentsV1Create builder with application/json body
func NewIncidentsV1CreateRequest(server string, body IncidentsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsV1CreateRequestWithBody generates requests for IncidentsV1Create with any type of body
func NewIncidentsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsV1ShowRequest generates requests for IncidentsV1Show
func NewIncidentsV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUtilitiesV1OpenAPIRequest generates requests for UtilitiesV1OpenAPI
func NewUtilitiesV1OpenAPIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeveritiesV1ListRequest generates requests for SeveritiesV1List
func NewSeveritiesV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeveritiesV1CreateRequest calls the generic SeveritiesV1Create builder with application/json body
func NewSeveritiesV1CreateRequest(server string, body SeveritiesV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSeveritiesV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSeveritiesV1CreateRequestWithBody generates requests for SeveritiesV1Create with any type of body
func NewSeveritiesV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSeveritiesV1DeleteRequest generates requests for SeveritiesV1Delete
func NewSeveritiesV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeveritiesV1ShowRequest generates requests for SeveritiesV1Show
func NewSeveritiesV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeveritiesV1UpdateRequest calls the generic SeveritiesV1Update builder with application/json body
func NewSeveritiesV1UpdateRequest(server string, id string, body SeveritiesV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSeveritiesV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSeveritiesV1UpdateRequestWithBody generates requests for SeveritiesV1Update with any type of body
func NewSeveritiesV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2ListEntriesRequest generates requests for CatalogV2ListEntries
func NewCatalogV2ListEntriesRequest(server string, params *CatalogV2ListEntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalog_type_id", runtime.ParamLocationQuery, params.CatalogTypeId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2CreateEntryRequest calls the generic CatalogV2CreateEntry builder with application/json body
func NewCatalogV2CreateEntryRequest(server string, body CatalogV2CreateEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2CreateEntryRequestWithBody(server, "application/json", bodyReader)
}

// NewCatalogV2CreateEntryRequestWithBody generates requests for CatalogV2CreateEntry with any type of body
func NewCatalogV2CreateEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2DestroyEntryRequest generates requests for CatalogV2DestroyEntry
func NewCatalogV2DestroyEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2ShowEntryRequest generates requests for CatalogV2ShowEntry
func NewCatalogV2ShowEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2UpdateEntryRequest calls the generic CatalogV2UpdateEntry builder with application/json body
func NewCatalogV2UpdateEntryRequest(server string, id string, body CatalogV2UpdateEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2UpdateEntryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCatalogV2UpdateEntryRequestWithBody generates requests for CatalogV2UpdateEntry with any type of body
func NewCatalogV2UpdateEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2ListResourcesRequest generates requests for CatalogV2ListResources
func NewCatalogV2ListResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2ListTypesRequest generates requests for CatalogV2ListTypes
func NewCatalogV2ListTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2CreateTypeRequest calls the generic CatalogV2CreateType builder with application/json body
func NewCatalogV2CreateTypeRequest(server string, body CatalogV2CreateTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2CreateTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewCatalogV2CreateTypeRequestWithBody generates requests for CatalogV2CreateType with any type of body
func NewCatalogV2CreateTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error
	
	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2DestroyTypeRequest generates requests for CatalogV2DestroyType
func NewCatalogV2DestroyTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2ShowTypeRequest generates requests for CatalogV2ShowType
func NewCatalogV2ShowTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2UpdateTypeRequest calls the generic CatalogV2UpdateType builder with application/json body
func NewCatalogV2UpdateTypeRequest(server string, id string, body CatalogV2UpdateTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2UpdateTypeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCatalogV2UpdateTypeRequestWithBody generates requests for CatalogV2UpdateType with any type of body
func NewCatalogV2UpdateTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2UpdateTypeSchemaRequest calls the generic CatalogV2UpdateTypeSchema builder with application/json body
func NewCatalogV2UpdateTypeSchemaRequest(server string, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2UpdateTypeSchemaRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCatalogV2UpdateTypeSchemaRequestWithBody generates requests for CatalogV2UpdateTypeSchema with any type of body
func NewCatalogV2UpdateTypeSchemaRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types/%s/actions/update_schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentTimestampsV2ListRequest generates requests for IncidentTimestampsV2List
func NewIncidentTimestampsV2ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_timestamps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentTimestampsV2ShowRequest generates requests for IncidentTimestampsV2Show
func NewIncidentTimestampsV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_timestamps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentUpdatesV2ListRequest generates requests for IncidentUpdatesV2List
func NewIncidentUpdatesV2ListRequest(server string, params *IncidentUpdatesV2ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncidentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV2ListRequest generates requests for IncidentsV2List
func NewIncidentsV2ListRequest(server string, params *IncidentsV2ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Severity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_type", runtime.ParamLocationQuery, *params.IncidentType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentRole != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_role", runtime.ParamLocationQuery, *params.IncidentRole); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CustomField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_field", runtime.ParamLocationQuery, *params.CustomField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV2CreateRequest calls the generic IncidentsV2Create builder with application/json body
func NewIncidentsV2CreateRequest(server string, body IncidentsV2CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsV2CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsV2CreateRequestWithBody generates requests for IncidentsV2Create with any type of body
func NewIncidentsV2CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsV2ShowRequest generates requests for IncidentsV2Show
func NewIncidentsV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV2EditRequest calls the generic IncidentsV2Edit builder with application/json body
func NewIncidentsV2EditRequest(server string, id string, body IncidentsV2EditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsV2EditRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIncidentsV2EditRequestWithBody generates requests for IncidentsV2Edit with any type of body
func NewIncidentsV2EditRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incidents/%s/actions/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ActionsV1List request
	ActionsV1ListWithResponse(ctx context.Context, params *ActionsV1ListParams, reqEditors ...RequestEditorFn) (*ActionsV1ListResponse, error)

	// ActionsV1Show request
	ActionsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsV1ShowResponse, error)

	// CustomFieldOptionsV1List request
	CustomFieldOptionsV1ListWithResponse(ctx context.Context, params *CustomFieldOptionsV1ListParams, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1ListResponse, error)

	// CustomFieldOptionsV1Create request with any body
	CustomFieldOptionsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1CreateResponse, error)

	CustomFieldOptionsV1CreateWithResponse(ctx context.Context, body CustomFieldOptionsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1CreateResponse, error)

	// CustomFieldOptionsV1Delete request
	CustomFieldOptionsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1DeleteResponse, error)

	// CustomFieldOptionsV1Show request
	CustomFieldOptionsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1ShowResponse, error)

	// CustomFieldOptionsV1Update request with any body
	CustomFieldOptionsV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1UpdateResponse, error)

	CustomFieldOptionsV1UpdateWithResponse(ctx context.Context, id string, body CustomFieldOptionsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1UpdateResponse, error)

	// CustomFieldsV1List request
	CustomFieldsV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomFieldsV1ListResponse, error)

	// CustomFieldsV1Create request with any body
	CustomFieldsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV1CreateResponse, error)

	CustomFieldsV1CreateWithResponse(ctx context.Context, body CustomFieldsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV1CreateResponse, error)

	// CustomFieldsV1Delete request
	CustomFieldsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV1DeleteResponse, error)

	// CustomFieldsV1Show request
	CustomFieldsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV1ShowResponse, error)

	// CustomFieldsV1Update request with any body
	CustomFieldsV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV1UpdateResponse, error)

	CustomFieldsV1UpdateWithResponse(ctx context.Context, id string, body CustomFieldsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV1UpdateResponse, error)

	// UtilitiesV1Identity request
	UtilitiesV1IdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1IdentityResponse, error)

	// IncidentAttachmentsV1List request
	IncidentAttachmentsV1ListWithResponse(ctx context.Context, params *IncidentAttachmentsV1ListParams, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1ListResponse, error)

	// IncidentAttachmentsV1Create request with any body
	IncidentAttachmentsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1CreateResponse, error)

	IncidentAttachmentsV1CreateWithResponse(ctx context.Context, body IncidentAttachmentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1CreateResponse, error)

	// IncidentAttachmentsV1Delete request
	IncidentAttachmentsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1DeleteResponse, error)

	// IncidentRolesV1List request
	IncidentRolesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentRolesV1ListResponse, error)

	// IncidentRolesV1Create request with any body
	IncidentRolesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV1CreateResponse, error)

	IncidentRolesV1CreateWithResponse(ctx context.Context, body IncidentRolesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV1CreateResponse, error)

	// IncidentRolesV1Delete request
	IncidentRolesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV1DeleteResponse, error)

	// IncidentRolesV1Show request
	IncidentRolesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV1ShowResponse, error)

	// IncidentRolesV1Update request with any body
	IncidentRolesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV1UpdateResponse, error)

	IncidentRolesV1UpdateWithResponse(ctx context.Context, id string, body IncidentRolesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV1UpdateResponse, error)

	// IncidentStatusesV1List request
	IncidentStatusesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentStatusesV1ListResponse, error)

	// IncidentStatusesV1Create request with any body
	IncidentStatusesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentStatusesV1CreateResponse, error)

	IncidentStatusesV1CreateWithResponse(ctx context.Context, body IncidentStatusesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentStatusesV1CreateResponse, error)

	// IncidentStatusesV1Delete request
	IncidentStatusesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentStatusesV1DeleteResponse, error)

	// IncidentStatusesV1Show request
	IncidentStatusesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentStatusesV1ShowResponse, error)

	// IncidentStatusesV1Update request with any body
	IncidentStatusesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentStatusesV1UpdateResponse, error)

	IncidentStatusesV1UpdateWithResponse(ctx context.Context, id string, body IncidentStatusesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentStatusesV1UpdateResponse, error)

	// IncidentTypesV1List request
	IncidentTypesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentTypesV1ListResponse, error)

	// IncidentTypesV1Show request
	IncidentTypesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentTypesV1ShowResponse, error)

	// IncidentsV1List request
	IncidentsV1ListWithResponse(ctx context.Context, params *IncidentsV1ListParams, reqEditors ...RequestEditorFn) (*IncidentsV1ListResponse, error)

	// IncidentsV1Create request with any body
	IncidentsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV1CreateResponse, error)

	IncidentsV1CreateWithResponse(ctx context.Context, body IncidentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV1CreateResponse, error)

	// IncidentsV1Show request
	IncidentsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsV1ShowResponse, error)

	// UtilitiesV1OpenAPI request
	UtilitiesV1OpenAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1OpenAPIResponse, error)

	// SeveritiesV1List request
	SeveritiesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeveritiesV1ListResponse, error)

	// SeveritiesV1Create request with any body
	SeveritiesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SeveritiesV1CreateResponse, error)

	SeveritiesV1CreateWithResponse(ctx context.Context, body SeveritiesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SeveritiesV1CreateResponse, error)

	// SeveritiesV1Delete request
	SeveritiesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SeveritiesV1DeleteResponse, error)

	// SeveritiesV1Show request
	SeveritiesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SeveritiesV1ShowResponse, error)

	// SeveritiesV1Update request with any body
	SeveritiesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SeveritiesV1UpdateResponse, error)

	SeveritiesV1UpdateWithResponse(ctx context.Context, id string, body SeveritiesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SeveritiesV1UpdateResponse, error)

	// CatalogV2ListEntries request
	CatalogV2ListEntriesWithResponse(ctx context.Context, params *CatalogV2ListEntriesParams, reqEditors ...RequestEditorFn) (*CatalogV2ListEntriesResponse, error)

	// CatalogV2CreateEntry request with any body
	CatalogV2CreateEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2CreateEntryResponse, error)

	CatalogV2CreateEntryWithResponse(ctx context.Context, body CatalogV2CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2CreateEntryResponse, error)

	// CatalogV2DestroyEntry request
	CatalogV2DestroyEntryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2DestroyEntryResponse, error)

	// CatalogV2ShowEntry request
	CatalogV2ShowEntryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2ShowEntryResponse, error)

	// CatalogV2UpdateEntry request with any body
	CatalogV2UpdateEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateEntryResponse, error)

	CatalogV2UpdateEntryWithResponse(ctx context.Context, id string, body CatalogV2UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateEntryResponse, error)

	// CatalogV2ListResources request
	CatalogV2ListResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CatalogV2ListResourcesResponse, error)

	// CatalogV2ListTypes request
	CatalogV2ListTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CatalogV2ListTypesResponse, error)

	// CatalogV2CreateType request with any body
	CatalogV2CreateTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2CreateTypeResponse, error)

	CatalogV2CreateTypeWithResponse(ctx context.Context, body CatalogV2CreateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2CreateTypeResponse, error)

	// CatalogV2DestroyType request
	CatalogV2DestroyTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2DestroyTypeResponse, error)

	// CatalogV2ShowType request
	CatalogV2ShowTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2ShowTypeResponse, error)

	// CatalogV2UpdateType request with any body
	CatalogV2UpdateTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeResponse, error)

	CatalogV2UpdateTypeWithResponse(ctx context.Context, id string, body CatalogV2UpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeResponse, error)

	// CatalogV2UpdateTypeSchema request with any body
	CatalogV2UpdateTypeSchemaWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeSchemaResponse, error)

	CatalogV2UpdateTypeSchemaWithResponse(ctx context.Context, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeSchemaResponse, error)

	// IncidentTimestampsV2List request
	IncidentTimestampsV2ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentTimestampsV2ListResponse, error)

	// IncidentTimestampsV2Show request
	IncidentTimestampsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentTimestampsV2ShowResponse, error)

	// IncidentUpdatesV2List request
	IncidentUpdatesV2ListWithResponse(ctx context.Context, params *IncidentUpdatesV2ListParams, reqEditors ...RequestEditorFn) (*IncidentUpdatesV2ListResponse, error)

	// IncidentsV2List request
	IncidentsV2ListWithResponse(ctx context.Context, params *IncidentsV2ListParams, reqEditors ...RequestEditorFn) (*IncidentsV2ListResponse, error)

	// IncidentsV2Create request with any body
	IncidentsV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV2CreateResponse, error)

	IncidentsV2CreateWithResponse(ctx context.Context, body IncidentsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV2CreateResponse, error)

	// IncidentsV2Show request
	IncidentsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsV2ShowResponse, error)

	// IncidentsV2Edit request with any body
	IncidentsV2EditWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV2EditResponse, error)

	IncidentsV2EditWithResponse(ctx context.Context, id string, body IncidentsV2EditJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV2EditResponse, error)
}

type ActionsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody
}

// Status returns HTTPResponse.Status
func (r ActionsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody
}

// Status returns HTTPResponse.Status
func (r ActionsV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody2
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody2
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody2
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody2
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody3
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody3
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody3
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody3
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UtilitiesV1IdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityResponseBody
}

// Status returns HTTPResponse.Status
func (r UtilitiesV1IdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UtilitiesV1IdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentAttachmentsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody4
}

// Status returns HTTPResponse.Status
func (r IncidentAttachmentsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentAttachmentsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentAttachmentsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateResponseBody
}

// Status returns HTTPResponse.Status
func (r IncidentAttachmentsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentAttachmentsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentAttachmentsV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IncidentAttachmentsV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentAttachmentsV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody5
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody4
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody4
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody4
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody6
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody5
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody5
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody5
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentTypesV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody8
}

// Status returns HTTPResponse.Status
func (r IncidentTypesV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentTypesV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentTypesV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody7
}

// Status returns HTTPResponse.Status
func (r IncidentTypesV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentTypesV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody10
}

// Status returns HTTPResponse.Status
func (r IncidentsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody8
}

// Status returns HTTPResponse.Status
func (r IncidentsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody8
}

// Status returns HTTPResponse.Status
func (r IncidentsV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UtilitiesV1OpenAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r UtilitiesV1OpenAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UtilitiesV1OpenAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody12
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody10
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody10
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody10
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ListEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListEntriesResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ListEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ListEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2CreateEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateEntryResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2CreateEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2CreateEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2DestroyEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogV2DestroyEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2DestroyEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ShowEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowEntryResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ShowEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ShowEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2UpdateEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowEntryResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2UpdateEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2UpdateEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ListResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResourcesResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ListResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ListResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ListTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTypesResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ListTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ListTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2CreateTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateTypeResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2CreateTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2CreateTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2DestroyTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogV2DestroyTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2DestroyTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ShowTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTypeResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ShowTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ShowTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2UpdateTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTypeResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2UpdateTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2UpdateTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2UpdateTypeSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTypeResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2UpdateTypeSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2UpdateTypeSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentTimestampsV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody7
}

// Status returns HTTPResponse.Status
func (r IncidentTimestampsV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentTimestampsV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentTimestampsV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody6
}

// Status returns HTTPResponse.Status
func (r IncidentTimestampsV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentTimestampsV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentUpdatesV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody9
}

// Status returns HTTPResponse.Status
func (r IncidentUpdatesV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentUpdatesV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody11
}

// Status returns HTTPResponse.Status
func (r IncidentsV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV2CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody9
}

// Status returns HTTPResponse.Status
func (r IncidentsV2CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV2CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody9
}

// Status returns HTTPResponse.Status
func (r IncidentsV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV2EditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody9
}

// Status returns HTTPResponse.Status
func (r IncidentsV2EditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV2EditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ActionsV1ListWithResponse request returning *ActionsV1ListResponse
func (c *ClientWithResponses) ActionsV1ListWithResponse(ctx context.Context, params *ActionsV1ListParams, reqEditors ...RequestEditorFn) (*ActionsV1ListResponse, error) {
	rsp, err := c.ActionsV1List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsV1ListResponse(rsp)
}

// ActionsV1ShowWithResponse request returning *ActionsV1ShowResponse
func (c *ClientWithResponses) ActionsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsV1ShowResponse, error) {
	rsp, err := c.ActionsV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsV1ShowResponse(rsp)
}

// CustomFieldOptionsV1ListWithResponse request returning *CustomFieldOptionsV1ListResponse
func (c *ClientWithResponses) CustomFieldOptionsV1ListWithResponse(ctx context.Context, params *CustomFieldOptionsV1ListParams, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1ListResponse, error) {
	rsp, err := c.CustomFieldOptionsV1List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1ListResponse(rsp)
}

// CustomFieldOptionsV1CreateWithBodyWithResponse request with arbitrary body returning *CustomFieldOptionsV1CreateResponse
func (c *ClientWithResponses) CustomFieldOptionsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1CreateResponse, error) {
	rsp, err := c.CustomFieldOptionsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldOptionsV1CreateWithResponse(ctx context.Context, body CustomFieldOptionsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1CreateResponse, error) {
	rsp, err := c.CustomFieldOptionsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1CreateResponse(rsp)
}

// CustomFieldOptionsV1DeleteWithResponse request returning *CustomFieldOptionsV1DeleteResponse
func (c *ClientWithResponses) CustomFieldOptionsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1DeleteResponse, error) {
	rsp, err := c.CustomFieldOptionsV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1DeleteResponse(rsp)
}

// CustomFieldOptionsV1ShowWithResponse request returning *CustomFieldOptionsV1ShowResponse
func (c *ClientWithResponses) CustomFieldOptionsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1ShowResponse, error) {
	rsp, err := c.CustomFieldOptionsV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1ShowResponse(rsp)
}

// CustomFieldOptionsV1UpdateWithBodyWithResponse request with arbitrary body returning *CustomFieldOptionsV1UpdateResponse
func (c *ClientWithResponses) CustomFieldOptionsV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1UpdateResponse, error) {
	rsp, err := c.CustomFieldOptionsV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldOptionsV1UpdateWithResponse(ctx context.Context, id string, body CustomFieldOptionsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1UpdateResponse, error) {
	rsp, err := c.CustomFieldOptionsV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1UpdateResponse(rsp)
}

// CustomFieldsV1ListWithResponse request returning *CustomFieldsV1ListResponse
func (c *ClientWithResponses) CustomFieldsV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomFieldsV1ListResponse, error) {
	rsp, err := c.CustomFieldsV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1ListResponse(rsp)
}

// CustomFieldsV1CreateWithBodyWithResponse request with arbitrary body returning *CustomFieldsV1CreateResponse
func (c *ClientWithResponses) CustomFieldsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV1CreateResponse, error) {
	rsp, err := c.CustomFieldsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldsV1CreateWithResponse(ctx context.Context, body CustomFieldsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV1CreateResponse, error) {
	rsp, err := c.CustomFieldsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1CreateResponse(rsp)
}

// CustomFieldsV1DeleteWithResponse request returning *CustomFieldsV1DeleteResponse
func (c *ClientWithResponses) CustomFieldsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV1DeleteResponse, error) {
	rsp, err := c.CustomFieldsV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1DeleteResponse(rsp)
}

// CustomFieldsV1ShowWithResponse request returning *CustomFieldsV1ShowResponse
func (c *ClientWithResponses) CustomFieldsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV1ShowResponse, error) {
	rsp, err := c.CustomFieldsV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1ShowResponse(rsp)
}

// CustomFieldsV1UpdateWithBodyWithResponse request with arbitrary body returning *CustomFieldsV1UpdateResponse
func (c *ClientWithResponses) CustomFieldsV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV1UpdateResponse, error) {
	rsp, err := c.CustomFieldsV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldsV1UpdateWithResponse(ctx context.Context, id string, body CustomFieldsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV1UpdateResponse, error) {
	rsp, err := c.CustomFieldsV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1UpdateResponse(rsp)
}

// UtilitiesV1IdentityWithResponse request returning *UtilitiesV1IdentityResponse
func (c *ClientWithResponses) UtilitiesV1IdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1IdentityResponse, error) {
	rsp, err := c.UtilitiesV1Identity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUtilitiesV1IdentityResponse(rsp)
}

// IncidentAttachmentsV1ListWithResponse request returning *IncidentAttachmentsV1ListResponse
func (c *ClientWithResponses) IncidentAttachmentsV1ListWithResponse(ctx context.Context, params *IncidentAttachmentsV1ListParams, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1ListResponse, error) {
	rsp, err := c.IncidentAttachmentsV1List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentAttachmentsV1ListResponse(rsp)
}

// IncidentAttachmentsV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentAttachmentsV1CreateResponse
func (c *ClientWithResponses) IncidentAttachmentsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1CreateResponse, error) {
	rsp, err := c.IncidentAttachmentsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentAttachmentsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentAttachmentsV1CreateWithResponse(ctx context.Context, body IncidentAttachmentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1CreateResponse, error) {
	rsp, err := c.IncidentAttachmentsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentAttachmentsV1CreateResponse(rsp)
}

// IncidentAttachmentsV1DeleteWithResponse request returning *IncidentAttachmentsV1DeleteResponse
func (c *ClientWithResponses) IncidentAttachmentsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1DeleteResponse, error) {
	rsp, err := c.IncidentAttachmentsV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentAttachmentsV1DeleteResponse(rsp)
}

// IncidentRolesV1ListWithResponse request returning *IncidentRolesV1ListResponse
func (c *ClientWithResponses) IncidentRolesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentRolesV1ListResponse, error) {
	rsp, err := c.IncidentRolesV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1ListResponse(rsp)
}

// IncidentRolesV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentRolesV1CreateResponse
func (c *ClientWithResponses) IncidentRolesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV1CreateResponse, error) {
	rsp, err := c.IncidentRolesV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentRolesV1CreateWithResponse(ctx context.Context, body IncidentRolesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV1CreateResponse, error) {
	rsp, err := c.IncidentRolesV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1CreateResponse(rsp)
}

// IncidentRolesV1DeleteWithResponse request returning *IncidentRolesV1DeleteResponse
func (c *ClientWithResponses) IncidentRolesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV1DeleteResponse, error) {
	rsp, err := c.IncidentRolesV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1DeleteResponse(rsp)
}

// IncidentRolesV1ShowWithResponse request returning *IncidentRolesV1ShowResponse
func (c *ClientWithResponses) IncidentRolesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV1ShowResponse, error) {
	rsp, err := c.IncidentRolesV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1ShowResponse(rsp)
}

// IncidentRolesV1UpdateWithBodyWithResponse request with arbitrary body returning *IncidentRolesV1UpdateResponse
func (c *ClientWithResponses) IncidentRolesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV1UpdateResponse, error) {
	rsp, err := c.IncidentRolesV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) IncidentRolesV1UpdateWithResponse(ctx context.Context, id string, body IncidentRolesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV1UpdateResponse, error) {
	rsp, err := c.IncidentRolesV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1UpdateResponse(rsp)
}

// IncidentStatusesV1ListWithResponse request returning *IncidentStatusesV1ListResponse
func (c *ClientWithResponses) IncidentStatusesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentStatusesV1ListResponse, error) {
	rsp, err := c.IncidentStatusesV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1ListResponse(rsp)
}

// IncidentStatusesV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentStatusesV1CreateResponse
func (c *ClientWithResponses) IncidentStatusesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentStatusesV1CreateResponse, error) {
	rsp, err := c.IncidentStatusesV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentStatusesV1CreateWithResponse(ctx context.Context, body IncidentStatusesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentStatusesV1CreateResponse, error) {
	rsp, err := c.IncidentStatusesV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1CreateResponse(rsp)
}

// IncidentStatusesV1DeleteWithResponse request returning *IncidentStatusesV1DeleteResponse
func (c *ClientWithResponses) IncidentStatusesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentStatusesV1DeleteResponse, error) {
	rsp, err := c.IncidentStatusesV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1DeleteResponse(rsp)
}

// IncidentStatusesV1ShowWithResponse request returning *IncidentStatusesV1ShowResponse
func (c *ClientWithResponses) IncidentStatusesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentStatusesV1ShowResponse, error) {
	rsp, err := c.IncidentStatusesV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1ShowResponse(rsp)
}

// IncidentStatusesV1UpdateWithBodyWithResponse request with arbitrary body returning *IncidentStatusesV1UpdateResponse
func (c *ClientWithResponses) IncidentStatusesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentStatusesV1UpdateResponse, error) {
	rsp, err := c.IncidentStatusesV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) IncidentStatusesV1UpdateWithResponse(ctx context.Context, id string, body IncidentStatusesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentStatusesV1UpdateResponse, error) {
	rsp, err := c.IncidentStatusesV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1UpdateResponse(rsp)
}

// IncidentTypesV1ListWithResponse request returning *IncidentTypesV1ListResponse
func (c *ClientWithResponses) IncidentTypesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentTypesV1ListResponse, error) {
	rsp, err := c.IncidentTypesV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentTypesV1ListResponse(rsp)
}

// IncidentTypesV1ShowWithResponse request returning *IncidentTypesV1ShowResponse
func (c *ClientWithResponses) IncidentTypesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentTypesV1ShowResponse, error) {
	rsp, err := c.IncidentTypesV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentTypesV1ShowResponse(rsp)
}

// IncidentsV1ListWithResponse request returning *IncidentsV1ListResponse
func (c *ClientWithResponses) IncidentsV1ListWithResponse(ctx context.Context, params *IncidentsV1ListParams, reqEditors ...RequestEditorFn) (*IncidentsV1ListResponse, error) {
	rsp, err := c.IncidentsV1List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV1ListResponse(rsp)
}

// IncidentsV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentsV1CreateResponse
func (c *ClientWithResponses) IncidentsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV1CreateResponse, error) {
	rsp, err := c.IncidentsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentsV1CreateWithResponse(ctx context.Context, body IncidentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV1CreateResponse, error) {
	rsp, err := c.IncidentsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV1CreateResponse(rsp)
}

// IncidentsV1ShowWithResponse request returning *IncidentsV1ShowResponse
func (c *ClientWithResponses) IncidentsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsV1ShowResponse, error) {
	rsp, err := c.IncidentsV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV1ShowResponse(rsp)
}

// UtilitiesV1OpenAPIWithResponse request returning *UtilitiesV1OpenAPIResponse
func (c *ClientWithResponses) UtilitiesV1OpenAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1OpenAPIResponse, error) {
	rsp, err := c.UtilitiesV1OpenAPI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUtilitiesV1OpenAPIResponse(rsp)
}

// SeveritiesV1ListWithResponse request returning *SeveritiesV1ListResponse
func (c *ClientWithResponses) SeveritiesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeveritiesV1ListResponse, error) {
	rsp, err := c.SeveritiesV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1ListResponse(rsp)
}

// SeveritiesV1CreateWithBodyWithResponse request with arbitrary body returning *SeveritiesV1CreateResponse
func (c *ClientWithResponses) SeveritiesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SeveritiesV1CreateResponse, error) {
	rsp, err := c.SeveritiesV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1CreateResponse(rsp)
}

func (c *ClientWithResponses) SeveritiesV1CreateWithResponse(ctx context.Context, body SeveritiesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SeveritiesV1CreateResponse, error) {
	rsp, err := c.SeveritiesV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1CreateResponse(rsp)
}

// SeveritiesV1DeleteWithResponse request returning *SeveritiesV1DeleteResponse
func (c *ClientWithResponses) SeveritiesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SeveritiesV1DeleteResponse, error) {
	rsp, err := c.SeveritiesV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1DeleteResponse(rsp)
}

// SeveritiesV1ShowWithResponse request returning *SeveritiesV1ShowResponse
func (c *ClientWithResponses) SeveritiesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SeveritiesV1ShowResponse, error) {
	rsp, err := c.SeveritiesV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1ShowResponse(rsp)
}

// SeveritiesV1UpdateWithBodyWithResponse request with arbitrary body returning *SeveritiesV1UpdateResponse
func (c *ClientWithResponses) SeveritiesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SeveritiesV1UpdateResponse, error) {
	rsp, err := c.SeveritiesV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) SeveritiesV1UpdateWithResponse(ctx context.Context, id string, body SeveritiesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SeveritiesV1UpdateResponse, error) {
	rsp, err := c.SeveritiesV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1UpdateResponse(rsp)
}

// CatalogV2ListEntriesWithResponse request returning *CatalogV2ListEntriesResponse
func (c *ClientWithResponses) CatalogV2ListEntriesWithResponse(ctx context.Context, params *CatalogV2ListEntriesParams, reqEditors ...RequestEditorFn) (*CatalogV2ListEntriesResponse, error) {
	rsp, err := c.CatalogV2ListEntries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ListEntriesResponse(rsp)
}

// CatalogV2CreateEntryWithBodyWithResponse request with arbitrary body returning *CatalogV2CreateEntryResponse
func (c *ClientWithResponses) CatalogV2CreateEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2CreateEntryResponse, error) {
	rsp, err := c.CatalogV2CreateEntryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2CreateEntryResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2CreateEntryWithResponse(ctx context.Context, body CatalogV2CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2CreateEntryResponse, error) {
	rsp, err := c.CatalogV2CreateEntry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2CreateEntryResponse(rsp)
}

// CatalogV2DestroyEntryWithResponse request returning *CatalogV2DestroyEntryResponse
func (c *ClientWithResponses) CatalogV2DestroyEntryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2DestroyEntryResponse, error) {
	rsp, err := c.CatalogV2DestroyEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2DestroyEntryResponse(rsp)
}

// CatalogV2ShowEntryWithResponse request returning *CatalogV2ShowEntryResponse
func (c *ClientWithResponses) CatalogV2ShowEntryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2ShowEntryResponse, error) {
	rsp, err := c.CatalogV2ShowEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ShowEntryResponse(rsp)
}

// CatalogV2UpdateEntryWithBodyWithResponse request with arbitrary body returning *CatalogV2UpdateEntryResponse
func (c *ClientWithResponses) CatalogV2UpdateEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateEntryResponse, error) {
	rsp, err := c.CatalogV2UpdateEntryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateEntryResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2UpdateEntryWithResponse(ctx context.Context, id string, body CatalogV2UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateEntryResponse, error) {
	rsp, err := c.CatalogV2UpdateEntry(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateEntryResponse(rsp)
}

// CatalogV2ListResourcesWithResponse request returning *CatalogV2ListResourcesResponse
func (c *ClientWithResponses) CatalogV2ListResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CatalogV2ListResourcesResponse, error) {
	rsp, err := c.CatalogV2ListResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ListResourcesResponse(rsp)
}

// CatalogV2ListTypesWithResponse request returning *CatalogV2ListTypesResponse
func (c *ClientWithResponses) CatalogV2ListTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CatalogV2ListTypesResponse, error) {
	rsp, err := c.CatalogV2ListTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ListTypesResponse(rsp)
}

// CatalogV2CreateTypeWithBodyWithResponse request with arbitrary body returning *CatalogV2CreateTypeResponse
func (c *ClientWithResponses) CatalogV2CreateTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2CreateTypeResponse, error) {
	rsp, err := c.CatalogV2CreateTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2CreateTypeResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2CreateTypeWithResponse(ctx context.Context, body CatalogV2CreateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2CreateTypeResponse, error) {
	rsp, err := c.CatalogV2CreateType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2CreateTypeResponse(rsp)
}

// CatalogV2DestroyTypeWithResponse request returning *CatalogV2DestroyTypeResponse
func (c *ClientWithResponses) CatalogV2DestroyTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2DestroyTypeResponse, error) {
	rsp, err := c.CatalogV2DestroyType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2DestroyTypeResponse(rsp)
}

// CatalogV2ShowTypeWithResponse request returning *CatalogV2ShowTypeResponse
func (c *ClientWithResponses) CatalogV2ShowTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2ShowTypeResponse, error) {
	rsp, err := c.CatalogV2ShowType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ShowTypeResponse(rsp)
}

// CatalogV2UpdateTypeWithBodyWithResponse request with arbitrary body returning *CatalogV2UpdateTypeResponse
func (c *ClientWithResponses) CatalogV2UpdateTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeResponse, error) {
	rsp, err := c.CatalogV2UpdateTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateTypeResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2UpdateTypeWithResponse(ctx context.Context, id string, body CatalogV2UpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeResponse, error) {
	rsp, err := c.CatalogV2UpdateType(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateTypeResponse(rsp)
}

// CatalogV2UpdateTypeSchemaWithBodyWithResponse request with arbitrary body returning *CatalogV2UpdateTypeSchemaResponse
func (c *ClientWithResponses) CatalogV2UpdateTypeSchemaWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeSchemaResponse, error) {
	rsp, err := c.CatalogV2UpdateTypeSchemaWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateTypeSchemaResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2UpdateTypeSchemaWithResponse(ctx context.Context, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeSchemaResponse, error) {
	rsp, err := c.CatalogV2UpdateTypeSchema(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateTypeSchemaResponse(rsp)
}

// IncidentTimestampsV2ListWithResponse request returning *IncidentTimestampsV2ListResponse
func (c *ClientWithResponses) IncidentTimestampsV2ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentTimestampsV2ListResponse, error) {
	rsp, err := c.IncidentTimestampsV2List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentTimestampsV2ListResponse(rsp)
}

// IncidentTimestampsV2ShowWithResponse request returning *IncidentTimestampsV2ShowResponse
func (c *ClientWithResponses) IncidentTimestampsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentTimestampsV2ShowResponse, error) {
	rsp, err := c.IncidentTimestampsV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentTimestampsV2ShowResponse(rsp)
}

// IncidentUpdatesV2ListWithResponse request returning *IncidentUpdatesV2ListResponse
func (c *ClientWithResponses) IncidentUpdatesV2ListWithResponse(ctx context.Context, params *IncidentUpdatesV2ListParams, reqEditors ...RequestEditorFn) (*IncidentUpdatesV2ListResponse, error) {
	rsp, err := c.IncidentUpdatesV2List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentUpdatesV2ListResponse(rsp)
}

// IncidentsV2ListWithResponse request returning *IncidentsV2ListResponse
func (c *ClientWithResponses) IncidentsV2ListWithResponse(ctx context.Context, params *IncidentsV2ListParams, reqEditors ...RequestEditorFn) (*IncidentsV2ListResponse, error) {
	rsp, err := c.IncidentsV2List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2ListResponse(rsp)
}

// IncidentsV2CreateWithBodyWithResponse request with arbitrary body returning *IncidentsV2CreateResponse
func (c *ClientWithResponses) IncidentsV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV2CreateResponse, error) {
	rsp, err := c.IncidentsV2CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentsV2CreateWithResponse(ctx context.Context, body IncidentsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV2CreateResponse, error) {
	rsp, err := c.IncidentsV2Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2CreateResponse(rsp)
}

// IncidentsV2ShowWithResponse request returning *IncidentsV2ShowResponse
func (c *ClientWithResponses) IncidentsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsV2ShowResponse, error) {
	rsp, err := c.IncidentsV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2ShowResponse(rsp)
}

// IncidentsV2EditWithBodyWithResponse request with arbitrary body returning *IncidentsV2EditResponse
func (c *ClientWithResponses) IncidentsV2EditWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV2EditResponse, error) {
	rsp, err := c.IncidentsV2EditWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2EditResponse(rsp)
}

func (c *ClientWithResponses) IncidentsV2EditWithResponse(ctx context.Context, id string, body IncidentsV2EditJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV2EditResponse, error) {
	rsp, err := c.IncidentsV2Edit(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2EditResponse(rsp)
}

// ParseActionsV1ListResponse parses an HTTP response from a ActionsV1ListWithResponse call
func ParseActionsV1ListResponse(rsp *http.Response) (*ActionsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionsV1ShowResponse parses an HTTP response from a ActionsV1ShowWithResponse call
func ParseActionsV1ShowResponse(rsp *http.Response) (*ActionsV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldOptionsV1ListResponse parses an HTTP response from a CustomFieldOptionsV1ListWithResponse call
func ParseCustomFieldOptionsV1ListResponse(rsp *http.Response) (*CustomFieldOptionsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldOptionsV1CreateResponse parses an HTTP response from a CustomFieldOptionsV1CreateWithResponse call
func ParseCustomFieldOptionsV1CreateResponse(rsp *http.Response) (*CustomFieldOptionsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCustomFieldOptionsV1DeleteResponse parses an HTTP response from a CustomFieldOptionsV1DeleteWithResponse call
func ParseCustomFieldOptionsV1DeleteResponse(rsp *http.Response) (*CustomFieldOptionsV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCustomFieldOptionsV1ShowResponse parses an HTTP response from a CustomFieldOptionsV1ShowWithResponse call
func ParseCustomFieldOptionsV1ShowResponse(rsp *http.Response) (*CustomFieldOptionsV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldOptionsV1UpdateResponse parses an HTTP response from a CustomFieldOptionsV1UpdateWithResponse call
func ParseCustomFieldOptionsV1UpdateResponse(rsp *http.Response) (*CustomFieldOptionsV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV1ListResponse parses an HTTP response from a CustomFieldsV1ListWithResponse call
func ParseCustomFieldsV1ListResponse(rsp *http.Response) (*CustomFieldsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV1CreateResponse parses an HTTP response from a CustomFieldsV1CreateWithResponse call
func ParseCustomFieldsV1CreateResponse(rsp *http.Response) (*CustomFieldsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV1DeleteResponse parses an HTTP response from a CustomFieldsV1DeleteWithResponse call
func ParseCustomFieldsV1DeleteResponse(rsp *http.Response) (*CustomFieldsV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCustomFieldsV1ShowResponse parses an HTTP response from a CustomFieldsV1ShowWithResponse call
func ParseCustomFieldsV1ShowResponse(rsp *http.Response) (*CustomFieldsV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV1UpdateResponse parses an HTTP response from a CustomFieldsV1UpdateWithResponse call
func ParseCustomFieldsV1UpdateResponse(rsp *http.Response) (*CustomFieldsV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUtilitiesV1IdentityResponse parses an HTTP response from a UtilitiesV1IdentityWithResponse call
func ParseUtilitiesV1IdentityResponse(rsp *http.Response) (*UtilitiesV1IdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UtilitiesV1IdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentAttachmentsV1ListResponse parses an HTTP response from a IncidentAttachmentsV1ListWithResponse call
func ParseIncidentAttachmentsV1ListResponse(rsp *http.Response) (*IncidentAttachmentsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentAttachmentsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentAttachmentsV1CreateResponse parses an HTTP response from a IncidentAttachmentsV1CreateWithResponse call
func ParseIncidentAttachmentsV1CreateResponse(rsp *http.Response) (*IncidentAttachmentsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentAttachmentsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIncidentAttachmentsV1DeleteResponse parses an HTTP response from a IncidentAttachmentsV1DeleteWithResponse call
func ParseIncidentAttachmentsV1DeleteResponse(rsp *http.Response) (*IncidentAttachmentsV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentAttachmentsV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIncidentRolesV1ListResponse parses an HTTP response from a IncidentRolesV1ListWithResponse call
func ParseIncidentRolesV1ListResponse(rsp *http.Response) (*IncidentRolesV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV1CreateResponse parses an HTTP response from a IncidentRolesV1CreateWithResponse call
func ParseIncidentRolesV1CreateResponse(rsp *http.Response) (*IncidentRolesV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV1DeleteResponse parses an HTTP response from a IncidentRolesV1DeleteWithResponse call
func ParseIncidentRolesV1DeleteResponse(rsp *http.Response) (*IncidentRolesV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIncidentRolesV1ShowResponse parses an HTTP response from a IncidentRolesV1ShowWithResponse call
func ParseIncidentRolesV1ShowResponse(rsp *http.Response) (*IncidentRolesV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV1UpdateResponse parses an HTTP response from a IncidentRolesV1UpdateWithResponse call
func ParseIncidentRolesV1UpdateResponse(rsp *http.Response) (*IncidentRolesV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentStatusesV1ListResponse parses an HTTP response from a IncidentStatusesV1ListWithResponse call
func ParseIncidentStatusesV1ListResponse(rsp *http.Response) (*IncidentStatusesV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody6
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentStatusesV1CreateResponse parses an HTTP response from a IncidentStatusesV1CreateWithResponse call
func ParseIncidentStatusesV1CreateResponse(rsp *http.Response) (*IncidentStatusesV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIncidentStatusesV1DeleteResponse parses an HTTP response from a IncidentStatusesV1DeleteWithResponse call
func ParseIncidentStatusesV1DeleteResponse(rsp *http.Response) (*IncidentStatusesV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIncidentStatusesV1ShowResponse parses an HTTP response from a IncidentStatusesV1ShowWithResponse call
func ParseIncidentStatusesV1ShowResponse(rsp *http.Response) (*IncidentStatusesV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentStatusesV1UpdateResponse parses an HTTP response from a IncidentStatusesV1UpdateWithResponse call
func ParseIncidentStatusesV1UpdateResponse(rsp *http.Response) (*IncidentStatusesV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentTypesV1ListResponse parses an HTTP response from a IncidentTypesV1ListWithResponse call
func ParseIncidentTypesV1ListResponse(rsp *http.Response) (*IncidentTypesV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentTypesV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentTypesV1ShowResponse parses an HTTP response from a IncidentTypesV1ShowWithResponse call
func ParseIncidentTypesV1ShowResponse(rsp *http.Response) (*IncidentTypesV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentTypesV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody7
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV1ListResponse parses an HTTP response from a IncidentsV1ListWithResponse call
func ParseIncidentsV1ListResponse(rsp *http.Response) (*IncidentsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody10
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV1CreateResponse parses an HTTP response from a IncidentsV1CreateWithResponse call
func ParseIncidentsV1CreateResponse(rsp *http.Response) (*IncidentsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV1ShowResponse parses an HTTP response from a IncidentsV1ShowWithResponse call
func ParseIncidentsV1ShowResponse(rsp *http.Response) (*IncidentsV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUtilitiesV1OpenAPIResponse parses an HTTP response from a UtilitiesV1OpenAPIWithResponse call
func ParseUtilitiesV1OpenAPIResponse(rsp *http.Response) (*UtilitiesV1OpenAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UtilitiesV1OpenAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSeveritiesV1ListResponse parses an HTTP response from a SeveritiesV1ListWithResponse call
func ParseSeveritiesV1ListResponse(rsp *http.Response) (*SeveritiesV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody12
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSeveritiesV1CreateResponse parses an HTTP response from a SeveritiesV1CreateWithResponse call
func ParseSeveritiesV1CreateResponse(rsp *http.Response) (*SeveritiesV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody10
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSeveritiesV1DeleteResponse parses an HTTP response from a SeveritiesV1DeleteWithResponse call
func ParseSeveritiesV1DeleteResponse(rsp *http.Response) (*SeveritiesV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSeveritiesV1ShowResponse parses an HTTP response from a SeveritiesV1ShowWithResponse call
func ParseSeveritiesV1ShowResponse(rsp *http.Response) (*SeveritiesV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody10
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSeveritiesV1UpdateResponse parses an HTTP response from a SeveritiesV1UpdateWithResponse call
func ParseSeveritiesV1UpdateResponse(rsp *http.Response) (*SeveritiesV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody10
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2ListEntriesResponse parses an HTTP response from a CatalogV2ListEntriesWithResponse call
func ParseCatalogV2ListEntriesResponse(rsp *http.Response) (*CatalogV2ListEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ListEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListEntriesResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2CreateEntryResponse parses an HTTP response from a CatalogV2CreateEntryWithResponse call
func ParseCatalogV2CreateEntryResponse(rsp *http.Response) (*CatalogV2CreateEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2CreateEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateEntryResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCatalogV2DestroyEntryResponse parses an HTTP response from a CatalogV2DestroyEntryWithResponse call
func ParseCatalogV2DestroyEntryResponse(rsp *http.Response) (*CatalogV2DestroyEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2DestroyEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogV2ShowEntryResponse parses an HTTP response from a CatalogV2ShowEntryWithResponse call
func ParseCatalogV2ShowEntryResponse(rsp *http.Response) (*CatalogV2ShowEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ShowEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowEntryResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2UpdateEntryResponse parses an HTTP response from a CatalogV2UpdateEntryWithResponse call
func ParseCatalogV2UpdateEntryResponse(rsp *http.Response) (*CatalogV2UpdateEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2UpdateEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowEntryResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2ListResourcesResponse parses an HTTP response from a CatalogV2ListResourcesWithResponse call
func ParseCatalogV2ListResourcesResponse(rsp *http.Response) (*CatalogV2ListResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ListResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResourcesResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2ListTypesResponse parses an HTTP response from a CatalogV2ListTypesWithResponse call
func ParseCatalogV2ListTypesResponse(rsp *http.Response) (*CatalogV2ListTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ListTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTypesResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2CreateTypeResponse parses an HTTP response from a CatalogV2CreateTypeWithResponse call
func ParseCatalogV2CreateTypeResponse(rsp *http.Response) (*CatalogV2CreateTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2CreateTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateTypeResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCatalogV2DestroyTypeResponse parses an HTTP response from a CatalogV2DestroyTypeWithResponse call
func ParseCatalogV2DestroyTypeResponse(rsp *http.Response) (*CatalogV2DestroyTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2DestroyTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogV2ShowTypeResponse parses an HTTP response from a CatalogV2ShowTypeWithResponse call
func ParseCatalogV2ShowTypeResponse(rsp *http.Response) (*CatalogV2ShowTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ShowTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTypeResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2UpdateTypeResponse parses an HTTP response from a CatalogV2UpdateTypeWithResponse call
func ParseCatalogV2UpdateTypeResponse(rsp *http.Response) (*CatalogV2UpdateTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2UpdateTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTypeResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2UpdateTypeSchemaResponse parses an HTTP response from a CatalogV2UpdateTypeSchemaWithResponse call
func ParseCatalogV2UpdateTypeSchemaResponse(rsp *http.Response) (*CatalogV2UpdateTypeSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2UpdateTypeSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTypeResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentTimestampsV2ListResponse parses an HTTP response from a IncidentTimestampsV2ListWithResponse call
func ParseIncidentTimestampsV2ListResponse(rsp *http.Response) (*IncidentTimestampsV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentTimestampsV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody7
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentTimestampsV2ShowResponse parses an HTTP response from a IncidentTimestampsV2ShowWithResponse call
func ParseIncidentTimestampsV2ShowResponse(rsp *http.Response) (*IncidentTimestampsV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentTimestampsV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody6
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentUpdatesV2ListResponse parses an HTTP response from a IncidentUpdatesV2ListWithResponse call
func ParseIncidentUpdatesV2ListResponse(rsp *http.Response) (*IncidentUpdatesV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentUpdatesV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV2ListResponse parses an HTTP response from a IncidentsV2ListWithResponse call
func ParseIncidentsV2ListResponse(rsp *http.Response) (*IncidentsV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody11
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV2CreateResponse parses an HTTP response from a IncidentsV2CreateWithResponse call
func ParseIncidentsV2CreateResponse(rsp *http.Response) (*IncidentsV2CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV2CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV2ShowResponse parses an HTTP response from a IncidentsV2ShowWithResponse call
func ParseIncidentsV2ShowResponse(rsp *http.Response) (*IncidentsV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV2EditResponse parses an HTTP response from a IncidentsV2EditWithResponse call
func ParseIncidentsV2EditResponse(rsp *http.Response) (*IncidentsV2EditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV2EditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
