// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for ActionV1Status.
const (
	ActionV1StatusCompleted   ActionV1Status = "completed"
	ActionV1StatusDeleted     ActionV1Status = "deleted"
	ActionV1StatusNotDoing    ActionV1Status = "not_doing"
	ActionV1StatusOutstanding ActionV1Status = "outstanding"
)

// Defines values for ActionV2Status.
const (
	ActionV2StatusCompleted   ActionV2Status = "completed"
	ActionV2StatusDeleted     ActionV2Status = "deleted"
	ActionV2StatusNotDoing    ActionV2Status = "not_doing"
	ActionV2StatusOutstanding ActionV2Status = "outstanding"
)

// Defines values for AlertResultDeduplicationKey.
const (
	UniqueKey AlertResultDeduplicationKey = "unique-key"
)

// Defines values for AlertResultMessage.
const (
	EventAcceptedForProcessing AlertResultMessage = "Event accepted for processing"
)

// Defines values for AlertResultStatus.
const (
	Success AlertResultStatus = "success"
)

// Defines values for CatalogResourceV2Category.
const (
	CatalogResourceV2CategoryCustom    CatalogResourceV2Category = "custom"
	CatalogResourceV2CategoryExternal  CatalogResourceV2Category = "external"
	CatalogResourceV2CategoryPrimitive CatalogResourceV2Category = "primitive"
)

// Defines values for CatalogTypeAttributePayloadV2Mode.
const (
	CatalogTypeAttributePayloadV2ModeBacklink CatalogTypeAttributePayloadV2Mode = "backlink"
	CatalogTypeAttributePayloadV2ModeDynamic  CatalogTypeAttributePayloadV2Mode = "dynamic"
	CatalogTypeAttributePayloadV2ModeEmpty    CatalogTypeAttributePayloadV2Mode = ""
	CatalogTypeAttributePayloadV2ModeExternal CatalogTypeAttributePayloadV2Mode = "external"
	CatalogTypeAttributePayloadV2ModeInternal CatalogTypeAttributePayloadV2Mode = "internal"
	CatalogTypeAttributePayloadV2ModeManual   CatalogTypeAttributePayloadV2Mode = "manual"
	CatalogTypeAttributePayloadV2ModePath     CatalogTypeAttributePayloadV2Mode = "path"
)

// Defines values for CatalogTypeAttributeV2Mode.
const (
	CatalogTypeAttributeV2ModeBacklink CatalogTypeAttributeV2Mode = "backlink"
	CatalogTypeAttributeV2ModeDynamic  CatalogTypeAttributeV2Mode = "dynamic"
	CatalogTypeAttributeV2ModeEmpty    CatalogTypeAttributeV2Mode = ""
	CatalogTypeAttributeV2ModeExternal CatalogTypeAttributeV2Mode = "external"
	CatalogTypeAttributeV2ModeInternal CatalogTypeAttributeV2Mode = "internal"
	CatalogTypeAttributeV2ModeManual   CatalogTypeAttributeV2Mode = "manual"
	CatalogTypeAttributeV2ModePath     CatalogTypeAttributeV2Mode = "path"
)

// Defines values for CatalogTypeV2Categories.
const (
	CatalogTypeV2CategoriesCustomer        CatalogTypeV2Categories = "customer"
	CatalogTypeV2CategoriesIssueTracker    CatalogTypeV2Categories = "issue-tracker"
	CatalogTypeV2CategoriesOnCall          CatalogTypeV2Categories = "on-call"
	CatalogTypeV2CategoriesProductFeatures CatalogTypeV2Categories = "product-features"
	CatalogTypeV2CategoriesService         CatalogTypeV2Categories = "service"
	CatalogTypeV2CategoriesTeam            CatalogTypeV2Categories = "team"
	CatalogTypeV2CategoriesUser            CatalogTypeV2Categories = "user"
)

// Defines values for CatalogTypeV2Color.
const (
	CatalogTypeV2ColorBlue   CatalogTypeV2Color = "blue"
	CatalogTypeV2ColorCyan   CatalogTypeV2Color = "cyan"
	CatalogTypeV2ColorGreen  CatalogTypeV2Color = "green"
	CatalogTypeV2ColorOrange CatalogTypeV2Color = "orange"
	CatalogTypeV2ColorPink   CatalogTypeV2Color = "pink"
	CatalogTypeV2ColorViolet CatalogTypeV2Color = "violet"
	CatalogTypeV2ColorYellow CatalogTypeV2Color = "yellow"
)

// Defines values for CatalogTypeV2Icon.
const (
	CatalogTypeV2IconBolt       CatalogTypeV2Icon = "bolt"
	CatalogTypeV2IconBox        CatalogTypeV2Icon = "box"
	CatalogTypeV2IconBriefcase  CatalogTypeV2Icon = "briefcase"
	CatalogTypeV2IconBrowser    CatalogTypeV2Icon = "browser"
	CatalogTypeV2IconBulb       CatalogTypeV2Icon = "bulb"
	CatalogTypeV2IconCalendar   CatalogTypeV2Icon = "calendar"
	CatalogTypeV2IconClock      CatalogTypeV2Icon = "clock"
	CatalogTypeV2IconCog        CatalogTypeV2Icon = "cog"
	CatalogTypeV2IconComponents CatalogTypeV2Icon = "components"
	CatalogTypeV2IconDatabase   CatalogTypeV2Icon = "database"
	CatalogTypeV2IconDoc        CatalogTypeV2Icon = "doc"
	CatalogTypeV2IconEmail      CatalogTypeV2Icon = "email"
	CatalogTypeV2IconFiles      CatalogTypeV2Icon = "files"
	CatalogTypeV2IconFlag       CatalogTypeV2Icon = "flag"
	CatalogTypeV2IconFolder     CatalogTypeV2Icon = "folder"
	CatalogTypeV2IconGlobe      CatalogTypeV2Icon = "globe"
	CatalogTypeV2IconMoney      CatalogTypeV2Icon = "money"
	CatalogTypeV2IconServer     CatalogTypeV2Icon = "server"
	CatalogTypeV2IconSeverity   CatalogTypeV2Icon = "severity"
	CatalogTypeV2IconStar       CatalogTypeV2Icon = "star"
	CatalogTypeV2IconStore      CatalogTypeV2Icon = "store"
	CatalogTypeV2IconTag        CatalogTypeV2Icon = "tag"
	CatalogTypeV2IconUser       CatalogTypeV2Icon = "user"
	CatalogTypeV2IconUsers      CatalogTypeV2Icon = "users"
)

// Defines values for CreateHTTPRequestBodyStatus.
const (
	Firing   CreateHTTPRequestBodyStatus = "firing"
	Resolved CreateHTTPRequestBodyStatus = "resolved"
)

// Defines values for CreateManagedResourceRequestBodyResourceType.
const (
	CreateManagedResourceRequestBodyResourceTypeSchedule CreateManagedResourceRequestBodyResourceType = "schedule"
	CreateManagedResourceRequestBodyResourceTypeWorkflow CreateManagedResourceRequestBodyResourceType = "workflow"
)

// Defines values for CreateRequestBody10Mode.
const (
	CreateRequestBody10ModeRetrospective CreateRequestBody10Mode = "retrospective"
	CreateRequestBody10ModeStandard      CreateRequestBody10Mode = "standard"
	CreateRequestBody10ModeTest          CreateRequestBody10Mode = "test"
	CreateRequestBody10ModeTutorial      CreateRequestBody10Mode = "tutorial"
)

// Defines values for CreateRequestBody10Visibility.
const (
	CreateRequestBody10VisibilityPrivate CreateRequestBody10Visibility = "private"
	CreateRequestBody10VisibilityPublic  CreateRequestBody10Visibility = "public"
)

// Defines values for CreateRequestBody2FieldType.
const (
	CreateRequestBody2FieldTypeLink         CreateRequestBody2FieldType = "link"
	CreateRequestBody2FieldTypeMultiSelect  CreateRequestBody2FieldType = "multi_select"
	CreateRequestBody2FieldTypeNumeric      CreateRequestBody2FieldType = "numeric"
	CreateRequestBody2FieldTypeSingleSelect CreateRequestBody2FieldType = "single_select"
	CreateRequestBody2FieldTypeText         CreateRequestBody2FieldType = "text"
)

// Defines values for CreateRequestBody2Required.
const (
	CreateRequestBody2RequiredAlways        CreateRequestBody2Required = "always"
	CreateRequestBody2RequiredBeforeClosure CreateRequestBody2Required = "before_closure"
	CreateRequestBody2RequiredNever         CreateRequestBody2Required = "never"
)

// Defines values for CreateRequestBody2RequiredV2.
const (
	CreateRequestBody2RequiredV2Always           CreateRequestBody2RequiredV2 = "always"
	CreateRequestBody2RequiredV2BeforeResolution CreateRequestBody2RequiredV2 = "before_resolution"
	CreateRequestBody2RequiredV2Never            CreateRequestBody2RequiredV2 = "never"
)

// Defines values for CreateRequestBody3FieldType.
const (
	CreateRequestBody3FieldTypeLink         CreateRequestBody3FieldType = "link"
	CreateRequestBody3FieldTypeMultiSelect  CreateRequestBody3FieldType = "multi_select"
	CreateRequestBody3FieldTypeNumeric      CreateRequestBody3FieldType = "numeric"
	CreateRequestBody3FieldTypeSingleSelect CreateRequestBody3FieldType = "single_select"
	CreateRequestBody3FieldTypeText         CreateRequestBody3FieldType = "text"
)

// Defines values for CreateRequestBody4ResourceResourceType.
const (
	CreateRequestBody4ResourceResourceTypeAtlassianStatuspageIncident CreateRequestBody4ResourceResourceType = "atlassian_statuspage_incident"
	CreateRequestBody4ResourceResourceTypeDatadogMonitorAlert         CreateRequestBody4ResourceResourceType = "datadog_monitor_alert"
	CreateRequestBody4ResourceResourceTypeGithubPullRequest           CreateRequestBody4ResourceResourceType = "github_pull_request"
	CreateRequestBody4ResourceResourceTypeGitlabMergeRequest          CreateRequestBody4ResourceResourceType = "gitlab_merge_request"
	CreateRequestBody4ResourceResourceTypeGoogleCalendarEvent         CreateRequestBody4ResourceResourceType = "google_calendar_event"
	CreateRequestBody4ResourceResourceTypeJiraIssue                   CreateRequestBody4ResourceResourceType = "jira_issue"
	CreateRequestBody4ResourceResourceTypeOpsgenieAlert               CreateRequestBody4ResourceResourceType = "opsgenie_alert"
	CreateRequestBody4ResourceResourceTypePagerDutyIncident           CreateRequestBody4ResourceResourceType = "pager_duty_incident"
	CreateRequestBody4ResourceResourceTypeScrubbed                    CreateRequestBody4ResourceResourceType = "scrubbed"
	CreateRequestBody4ResourceResourceTypeSentryIssue                 CreateRequestBody4ResourceResourceType = "sentry_issue"
	CreateRequestBody4ResourceResourceTypeStatuspageIncident          CreateRequestBody4ResourceResourceType = "statuspage_incident"
	CreateRequestBody4ResourceResourceTypeZendeskTicket               CreateRequestBody4ResourceResourceType = "zendesk_ticket"
)

// Defines values for CreateRequestBody8Category.
const (
	CreateRequestBody8CategoryClosed   CreateRequestBody8Category = "closed"
	CreateRequestBody8CategoryLearning CreateRequestBody8Category = "learning"
	CreateRequestBody8CategoryLive     CreateRequestBody8Category = "live"
)

// Defines values for CreateRequestBody9Mode.
const (
	CreateRequestBody9ModeReal CreateRequestBody9Mode = "real"
	CreateRequestBody9ModeTest CreateRequestBody9Mode = "test"
)

// Defines values for CreateRequestBody9Status.
const (
	CreateRequestBody9StatusClosed        CreateRequestBody9Status = "closed"
	CreateRequestBody9StatusDeclined      CreateRequestBody9Status = "declined"
	CreateRequestBody9StatusFixing        CreateRequestBody9Status = "fixing"
	CreateRequestBody9StatusInvestigating CreateRequestBody9Status = "investigating"
	CreateRequestBody9StatusMonitoring    CreateRequestBody9Status = "monitoring"
	CreateRequestBody9StatusTriage        CreateRequestBody9Status = "triage"
)

// Defines values for CreateRequestBody9Visibility.
const (
	CreateRequestBody9VisibilityPrivate CreateRequestBody9Visibility = "private"
	CreateRequestBody9VisibilityPublic  CreateRequestBody9Visibility = "public"
)

// Defines values for CreateTypeRequestBodyCategories.
const (
	CreateTypeRequestBodyCategoriesCustomer        CreateTypeRequestBodyCategories = "customer"
	CreateTypeRequestBodyCategoriesIssueTracker    CreateTypeRequestBodyCategories = "issue-tracker"
	CreateTypeRequestBodyCategoriesOnCall          CreateTypeRequestBodyCategories = "on-call"
	CreateTypeRequestBodyCategoriesProductFeatures CreateTypeRequestBodyCategories = "product-features"
	CreateTypeRequestBodyCategoriesService         CreateTypeRequestBodyCategories = "service"
	CreateTypeRequestBodyCategoriesTeam            CreateTypeRequestBodyCategories = "team"
	CreateTypeRequestBodyCategoriesUser            CreateTypeRequestBodyCategories = "user"
)

// Defines values for CreateTypeRequestBodyColor.
const (
	CreateTypeRequestBodyColorBlue   CreateTypeRequestBodyColor = "blue"
	CreateTypeRequestBodyColorCyan   CreateTypeRequestBodyColor = "cyan"
	CreateTypeRequestBodyColorGreen  CreateTypeRequestBodyColor = "green"
	CreateTypeRequestBodyColorOrange CreateTypeRequestBodyColor = "orange"
	CreateTypeRequestBodyColorPink   CreateTypeRequestBodyColor = "pink"
	CreateTypeRequestBodyColorViolet CreateTypeRequestBodyColor = "violet"
	CreateTypeRequestBodyColorYellow CreateTypeRequestBodyColor = "yellow"
)

// Defines values for CreateTypeRequestBodyIcon.
const (
	CreateTypeRequestBodyIconBolt       CreateTypeRequestBodyIcon = "bolt"
	CreateTypeRequestBodyIconBox        CreateTypeRequestBodyIcon = "box"
	CreateTypeRequestBodyIconBriefcase  CreateTypeRequestBodyIcon = "briefcase"
	CreateTypeRequestBodyIconBrowser    CreateTypeRequestBodyIcon = "browser"
	CreateTypeRequestBodyIconBulb       CreateTypeRequestBodyIcon = "bulb"
	CreateTypeRequestBodyIconCalendar   CreateTypeRequestBodyIcon = "calendar"
	CreateTypeRequestBodyIconClock      CreateTypeRequestBodyIcon = "clock"
	CreateTypeRequestBodyIconCog        CreateTypeRequestBodyIcon = "cog"
	CreateTypeRequestBodyIconComponents CreateTypeRequestBodyIcon = "components"
	CreateTypeRequestBodyIconDatabase   CreateTypeRequestBodyIcon = "database"
	CreateTypeRequestBodyIconDoc        CreateTypeRequestBodyIcon = "doc"
	CreateTypeRequestBodyIconEmail      CreateTypeRequestBodyIcon = "email"
	CreateTypeRequestBodyIconFiles      CreateTypeRequestBodyIcon = "files"
	CreateTypeRequestBodyIconFlag       CreateTypeRequestBodyIcon = "flag"
	CreateTypeRequestBodyIconFolder     CreateTypeRequestBodyIcon = "folder"
	CreateTypeRequestBodyIconGlobe      CreateTypeRequestBodyIcon = "globe"
	CreateTypeRequestBodyIconMoney      CreateTypeRequestBodyIcon = "money"
	CreateTypeRequestBodyIconServer     CreateTypeRequestBodyIcon = "server"
	CreateTypeRequestBodyIconSeverity   CreateTypeRequestBodyIcon = "severity"
	CreateTypeRequestBodyIconStar       CreateTypeRequestBodyIcon = "star"
	CreateTypeRequestBodyIconStore      CreateTypeRequestBodyIcon = "store"
	CreateTypeRequestBodyIconTag        CreateTypeRequestBodyIcon = "tag"
	CreateTypeRequestBodyIconUser       CreateTypeRequestBodyIcon = "user"
	CreateTypeRequestBodyIconUsers      CreateTypeRequestBodyIcon = "users"
)

// Defines values for CreateWorkflowRequestBodyRunsOnIncidentModes.
const (
	CreateWorkflowRequestBodyRunsOnIncidentModesRetrospective CreateWorkflowRequestBodyRunsOnIncidentModes = "retrospective"
	CreateWorkflowRequestBodyRunsOnIncidentModesStandard      CreateWorkflowRequestBodyRunsOnIncidentModes = "standard"
	CreateWorkflowRequestBodyRunsOnIncidentModesTest          CreateWorkflowRequestBodyRunsOnIncidentModes = "test"
)

// Defines values for CreateWorkflowRequestBodyRunsOnIncidents.
const (
	CreateWorkflowRequestBodyRunsOnIncidentsNewlyCreated          CreateWorkflowRequestBodyRunsOnIncidents = "newly_created"
	CreateWorkflowRequestBodyRunsOnIncidentsNewlyCreatedAndActive CreateWorkflowRequestBodyRunsOnIncidents = "newly_created_and_active"
)

// Defines values for CreateWorkflowRequestBodyState.
const (
	CreateWorkflowRequestBodyStateActive   CreateWorkflowRequestBodyState = "active"
	CreateWorkflowRequestBodyStateDisabled CreateWorkflowRequestBodyState = "disabled"
	CreateWorkflowRequestBodyStateDraft    CreateWorkflowRequestBodyState = "draft"
	CreateWorkflowRequestBodyStateError    CreateWorkflowRequestBodyState = "error"
)

// Defines values for CustomFieldTypeInfoV1FieldType.
const (
	CustomFieldTypeInfoV1FieldTypeLink         CustomFieldTypeInfoV1FieldType = "link"
	CustomFieldTypeInfoV1FieldTypeMultiSelect  CustomFieldTypeInfoV1FieldType = "multi_select"
	CustomFieldTypeInfoV1FieldTypeNumeric      CustomFieldTypeInfoV1FieldType = "numeric"
	CustomFieldTypeInfoV1FieldTypeSingleSelect CustomFieldTypeInfoV1FieldType = "single_select"
	CustomFieldTypeInfoV1FieldTypeText         CustomFieldTypeInfoV1FieldType = "text"
)

// Defines values for CustomFieldV1FieldType.
const (
	CustomFieldV1FieldTypeLink         CustomFieldV1FieldType = "link"
	CustomFieldV1FieldTypeMultiSelect  CustomFieldV1FieldType = "multi_select"
	CustomFieldV1FieldTypeNumeric      CustomFieldV1FieldType = "numeric"
	CustomFieldV1FieldTypeSingleSelect CustomFieldV1FieldType = "single_select"
	CustomFieldV1FieldTypeText         CustomFieldV1FieldType = "text"
)

// Defines values for CustomFieldV1Required.
const (
	CustomFieldV1RequiredAlways        CustomFieldV1Required = "always"
	CustomFieldV1RequiredBeforeClosure CustomFieldV1Required = "before_closure"
	CustomFieldV1RequiredNever         CustomFieldV1Required = "never"
)

// Defines values for CustomFieldV1RequiredV2.
const (
	CustomFieldV1RequiredV2Always           CustomFieldV1RequiredV2 = "always"
	CustomFieldV1RequiredV2BeforeResolution CustomFieldV1RequiredV2 = "before_resolution"
	CustomFieldV1RequiredV2Never            CustomFieldV1RequiredV2 = "never"
)

// Defines values for CustomFieldV2FieldType.
const (
	Link         CustomFieldV2FieldType = "link"
	MultiSelect  CustomFieldV2FieldType = "multi_select"
	Numeric      CustomFieldV2FieldType = "numeric"
	SingleSelect CustomFieldV2FieldType = "single_select"
	Text         CustomFieldV2FieldType = "text"
)

// Defines values for EscalationPathNodeLevelV2TimeToAckIntervalCondition.
const (
	EscalationPathNodeLevelV2TimeToAckIntervalConditionActive   EscalationPathNodeLevelV2TimeToAckIntervalCondition = "active"
	EscalationPathNodeLevelV2TimeToAckIntervalConditionInactive EscalationPathNodeLevelV2TimeToAckIntervalCondition = "inactive"
)

// Defines values for EscalationPathNodePayloadV2Type.
const (
	EscalationPathNodePayloadV2TypeIfElse        EscalationPathNodePayloadV2Type = "if_else"
	EscalationPathNodePayloadV2TypeLevel         EscalationPathNodePayloadV2Type = "level"
	EscalationPathNodePayloadV2TypeNotifyChannel EscalationPathNodePayloadV2Type = "notify_channel"
	EscalationPathNodePayloadV2TypeRepeat        EscalationPathNodePayloadV2Type = "repeat"
)

// Defines values for EscalationPathNodeV2Type.
const (
	EscalationPathNodeV2TypeIfElse        EscalationPathNodeV2Type = "if_else"
	EscalationPathNodeV2TypeLevel         EscalationPathNodeV2Type = "level"
	EscalationPathNodeV2TypeNotifyChannel EscalationPathNodeV2Type = "notify_channel"
	EscalationPathNodeV2TypeRepeat        EscalationPathNodeV2Type = "repeat"
)

// Defines values for EscalationPathTargetV2Type.
const (
	EscalationPathTargetV2TypeSchedule     EscalationPathTargetV2Type = "schedule"
	EscalationPathTargetV2TypeSlackChannel EscalationPathTargetV2Type = "slack_channel"
	EscalationPathTargetV2TypeUser         EscalationPathTargetV2Type = "user"
)

// Defines values for EscalationPathTargetV2Urgency.
const (
	High EscalationPathTargetV2Urgency = "high"
	Low  EscalationPathTargetV2Urgency = "low"
)

// Defines values for ExpressionOperationPayloadV2OperationType.
const (
	ExpressionOperationPayloadV2OperationTypeBranches ExpressionOperationPayloadV2OperationType = "branches"
	ExpressionOperationPayloadV2OperationTypeCount    ExpressionOperationPayloadV2OperationType = "count"
	ExpressionOperationPayloadV2OperationTypeFilter   ExpressionOperationPayloadV2OperationType = "filter"
	ExpressionOperationPayloadV2OperationTypeFirst    ExpressionOperationPayloadV2OperationType = "first"
	ExpressionOperationPayloadV2OperationTypeMax      ExpressionOperationPayloadV2OperationType = "max"
	ExpressionOperationPayloadV2OperationTypeMin      ExpressionOperationPayloadV2OperationType = "min"
	ExpressionOperationPayloadV2OperationTypeNavigate ExpressionOperationPayloadV2OperationType = "navigate"
	ExpressionOperationPayloadV2OperationTypeParse    ExpressionOperationPayloadV2OperationType = "parse"
	ExpressionOperationPayloadV2OperationTypeRandom   ExpressionOperationPayloadV2OperationType = "random"
)

// Defines values for ExpressionOperationV2OperationType.
const (
	ExpressionOperationV2OperationTypeBranches ExpressionOperationV2OperationType = "branches"
	ExpressionOperationV2OperationTypeCount    ExpressionOperationV2OperationType = "count"
	ExpressionOperationV2OperationTypeFilter   ExpressionOperationV2OperationType = "filter"
	ExpressionOperationV2OperationTypeFirst    ExpressionOperationV2OperationType = "first"
	ExpressionOperationV2OperationTypeMax      ExpressionOperationV2OperationType = "max"
	ExpressionOperationV2OperationTypeMin      ExpressionOperationV2OperationType = "min"
	ExpressionOperationV2OperationTypeNavigate ExpressionOperationV2OperationType = "navigate"
	ExpressionOperationV2OperationTypeParse    ExpressionOperationV2OperationType = "parse"
	ExpressionOperationV2OperationTypeRandom   ExpressionOperationV2OperationType = "random"
)

// Defines values for ExternalIssueReferenceV1Provider.
const (
	ExternalIssueReferenceV1ProviderAsana      ExternalIssueReferenceV1Provider = "asana"
	ExternalIssueReferenceV1ProviderClickUp    ExternalIssueReferenceV1Provider = "click_up"
	ExternalIssueReferenceV1ProviderGithub     ExternalIssueReferenceV1Provider = "github"
	ExternalIssueReferenceV1ProviderGitlab     ExternalIssueReferenceV1Provider = "gitlab"
	ExternalIssueReferenceV1ProviderJira       ExternalIssueReferenceV1Provider = "jira"
	ExternalIssueReferenceV1ProviderJiraServer ExternalIssueReferenceV1Provider = "jira_server"
	ExternalIssueReferenceV1ProviderLinear     ExternalIssueReferenceV1Provider = "linear"
	ExternalIssueReferenceV1ProviderShortcut   ExternalIssueReferenceV1Provider = "shortcut"
)

// Defines values for ExternalIssueReferenceV2Provider.
const (
	ExternalIssueReferenceV2ProviderAsana      ExternalIssueReferenceV2Provider = "asana"
	ExternalIssueReferenceV2ProviderClickUp    ExternalIssueReferenceV2Provider = "click_up"
	ExternalIssueReferenceV2ProviderGithub     ExternalIssueReferenceV2Provider = "github"
	ExternalIssueReferenceV2ProviderGitlab     ExternalIssueReferenceV2Provider = "gitlab"
	ExternalIssueReferenceV2ProviderJira       ExternalIssueReferenceV2Provider = "jira"
	ExternalIssueReferenceV2ProviderJiraServer ExternalIssueReferenceV2Provider = "jira_server"
	ExternalIssueReferenceV2ProviderLinear     ExternalIssueReferenceV2Provider = "linear"
	ExternalIssueReferenceV2ProviderShortcut   ExternalIssueReferenceV2Provider = "shortcut"
)

// Defines values for ExternalResourceV1ResourceType.
const (
	ExternalResourceV1ResourceTypeAtlassianStatuspageIncident ExternalResourceV1ResourceType = "atlassian_statuspage_incident"
	ExternalResourceV1ResourceTypeDatadogMonitorAlert         ExternalResourceV1ResourceType = "datadog_monitor_alert"
	ExternalResourceV1ResourceTypeGithubPullRequest           ExternalResourceV1ResourceType = "github_pull_request"
	ExternalResourceV1ResourceTypeGitlabMergeRequest          ExternalResourceV1ResourceType = "gitlab_merge_request"
	ExternalResourceV1ResourceTypeGoogleCalendarEvent         ExternalResourceV1ResourceType = "google_calendar_event"
	ExternalResourceV1ResourceTypeJiraIssue                   ExternalResourceV1ResourceType = "jira_issue"
	ExternalResourceV1ResourceTypeOpsgenieAlert               ExternalResourceV1ResourceType = "opsgenie_alert"
	ExternalResourceV1ResourceTypePagerDutyIncident           ExternalResourceV1ResourceType = "pager_duty_incident"
	ExternalResourceV1ResourceTypeScrubbed                    ExternalResourceV1ResourceType = "scrubbed"
	ExternalResourceV1ResourceTypeSentryIssue                 ExternalResourceV1ResourceType = "sentry_issue"
	ExternalResourceV1ResourceTypeStatuspageIncident          ExternalResourceV1ResourceType = "statuspage_incident"
	ExternalResourceV1ResourceTypeZendeskTicket               ExternalResourceV1ResourceType = "zendesk_ticket"
)

// Defines values for FollowUpV2Status.
const (
	Completed   FollowUpV2Status = "completed"
	Deleted     FollowUpV2Status = "deleted"
	NotDoing    FollowUpV2Status = "not_doing"
	Outstanding FollowUpV2Status = "outstanding"
)

// Defines values for IdentityV1Roles.
const (
	IdentityV1RolesCatalogEditor             IdentityV1Roles = "catalog_editor"
	IdentityV1RolesCatalogViewer             IdentityV1Roles = "catalog_viewer"
	IdentityV1RolesGlobalAccess              IdentityV1Roles = "global_access"
	IdentityV1RolesIncidentCreator           IdentityV1Roles = "incident_creator"
	IdentityV1RolesIncidentEditor            IdentityV1Roles = "incident_editor"
	IdentityV1RolesIncidentMembershipsEditor IdentityV1Roles = "incident_memberships_editor"
	IdentityV1RolesManageSettings            IdentityV1Roles = "manage_settings"
	IdentityV1RolesOnCallEditor              IdentityV1Roles = "on_call_editor"
	IdentityV1RolesPrivateWorkflowsEditor    IdentityV1Roles = "private_workflows_editor"
	IdentityV1RolesSchedulesEditor           IdentityV1Roles = "schedules_editor"
	IdentityV1RolesSchedulesReader           IdentityV1Roles = "schedules_reader"
	IdentityV1RolesViewer                    IdentityV1Roles = "viewer"
	IdentityV1RolesWorkflowsEditor           IdentityV1Roles = "workflows_editor"
)

// Defines values for IncidentRoleV1RoleType.
const (
	IncidentRoleV1RoleTypeCustom   IncidentRoleV1RoleType = "custom"
	IncidentRoleV1RoleTypeLead     IncidentRoleV1RoleType = "lead"
	IncidentRoleV1RoleTypeReporter IncidentRoleV1RoleType = "reporter"
)

// Defines values for IncidentRoleV2RoleType.
const (
	IncidentRoleV2RoleTypeCustom   IncidentRoleV2RoleType = "custom"
	IncidentRoleV2RoleTypeLead     IncidentRoleV2RoleType = "lead"
	IncidentRoleV2RoleTypeReporter IncidentRoleV2RoleType = "reporter"
)

// Defines values for IncidentStatusV1Category.
const (
	IncidentStatusV1CategoryCanceled IncidentStatusV1Category = "canceled"
	IncidentStatusV1CategoryClosed   IncidentStatusV1Category = "closed"
	IncidentStatusV1CategoryDeclined IncidentStatusV1Category = "declined"
	IncidentStatusV1CategoryLearning IncidentStatusV1Category = "learning"
	IncidentStatusV1CategoryLive     IncidentStatusV1Category = "live"
	IncidentStatusV1CategoryMerged   IncidentStatusV1Category = "merged"
	IncidentStatusV1CategoryPaused   IncidentStatusV1Category = "paused"
	IncidentStatusV1CategoryTriage   IncidentStatusV1Category = "triage"
)

// Defines values for IncidentTypeV1CreateInTriage.
const (
	IncidentTypeV1CreateInTriageAlways   IncidentTypeV1CreateInTriage = "always"
	IncidentTypeV1CreateInTriageOptional IncidentTypeV1CreateInTriage = "optional"
)

// Defines values for IncidentV1Mode.
const (
	IncidentV1ModeReal     IncidentV1Mode = "real"
	IncidentV1ModeTest     IncidentV1Mode = "test"
	IncidentV1ModeTutorial IncidentV1Mode = "tutorial"
)

// Defines values for IncidentV1Status.
const (
	IncidentV1StatusClosed        IncidentV1Status = "closed"
	IncidentV1StatusDeclined      IncidentV1Status = "declined"
	IncidentV1StatusFixing        IncidentV1Status = "fixing"
	IncidentV1StatusInvestigating IncidentV1Status = "investigating"
	IncidentV1StatusMonitoring    IncidentV1Status = "monitoring"
	IncidentV1StatusTriage        IncidentV1Status = "triage"
)

// Defines values for IncidentV1Visibility.
const (
	IncidentV1VisibilityPrivate IncidentV1Visibility = "private"
	IncidentV1VisibilityPublic  IncidentV1Visibility = "public"
)

// Defines values for IncidentV2Mode.
const (
	IncidentV2ModeRetrospective IncidentV2Mode = "retrospective"
	IncidentV2ModeStandard      IncidentV2Mode = "standard"
	IncidentV2ModeTest          IncidentV2Mode = "test"
	IncidentV2ModeTutorial      IncidentV2Mode = "tutorial"
)

// Defines values for IncidentV2Visibility.
const (
	IncidentV2VisibilityPrivate IncidentV2Visibility = "private"
	IncidentV2VisibilityPublic  IncidentV2Visibility = "public"
)

// Defines values for ManagedResourceV2ManagedBy.
const (
	ManagedResourceV2ManagedByDashboard ManagedResourceV2ManagedBy = "dashboard"
	ManagedResourceV2ManagedByExternal  ManagedResourceV2ManagedBy = "external"
	ManagedResourceV2ManagedByTerraform ManagedResourceV2ManagedBy = "terraform"
)

// Defines values for ManagedResourceV2ResourceType.
const (
	ManagedResourceV2ResourceTypeSchedule ManagedResourceV2ResourceType = "schedule"
	ManagedResourceV2ResourceTypeWorkflow ManagedResourceV2ResourceType = "workflow"
)

// Defines values for ManagementMetaV2ManagedBy.
const (
	Dashboard ManagementMetaV2ManagedBy = "dashboard"
	External  ManagementMetaV2ManagedBy = "external"
	Terraform ManagementMetaV2ManagedBy = "terraform"
)

// Defines values for ScheduleRotationHandoverV2IntervalType.
const (
	Daily  ScheduleRotationHandoverV2IntervalType = "daily"
	Hourly ScheduleRotationHandoverV2IntervalType = "hourly"
	Weekly ScheduleRotationHandoverV2IntervalType = "weekly"
)

// Defines values for ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday.
const (
	Friday    ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday = "friday"
	Monday    ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday = "monday"
	Saturday  ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday = "saturday"
	Sunday    ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday = "sunday"
	Thursday  ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday = "thursday"
	Tuesday   ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday = "tuesday"
	Wednesday ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday = "wednesday"
)

// Defines values for UpdateRequestBody2Required.
const (
	UpdateRequestBody2RequiredAlways        UpdateRequestBody2Required = "always"
	UpdateRequestBody2RequiredBeforeClosure UpdateRequestBody2Required = "before_closure"
	UpdateRequestBody2RequiredNever         UpdateRequestBody2Required = "never"
)

// Defines values for UpdateRequestBody2RequiredV2.
const (
	Always           UpdateRequestBody2RequiredV2 = "always"
	BeforeResolution UpdateRequestBody2RequiredV2 = "before_resolution"
	Never            UpdateRequestBody2RequiredV2 = "never"
)

// Defines values for UpdateTypeRequestBodyCategories.
const (
	UpdateTypeRequestBodyCategoriesCustomer        UpdateTypeRequestBodyCategories = "customer"
	UpdateTypeRequestBodyCategoriesIssueTracker    UpdateTypeRequestBodyCategories = "issue-tracker"
	UpdateTypeRequestBodyCategoriesOnCall          UpdateTypeRequestBodyCategories = "on-call"
	UpdateTypeRequestBodyCategoriesProductFeatures UpdateTypeRequestBodyCategories = "product-features"
	UpdateTypeRequestBodyCategoriesService         UpdateTypeRequestBodyCategories = "service"
	UpdateTypeRequestBodyCategoriesTeam            UpdateTypeRequestBodyCategories = "team"
	UpdateTypeRequestBodyCategoriesUser            UpdateTypeRequestBodyCategories = "user"
)

// Defines values for UpdateTypeRequestBodyColor.
const (
	Blue   UpdateTypeRequestBodyColor = "blue"
	Cyan   UpdateTypeRequestBodyColor = "cyan"
	Green  UpdateTypeRequestBodyColor = "green"
	Orange UpdateTypeRequestBodyColor = "orange"
	Pink   UpdateTypeRequestBodyColor = "pink"
	Violet UpdateTypeRequestBodyColor = "violet"
	Yellow UpdateTypeRequestBodyColor = "yellow"
)

// Defines values for UpdateTypeRequestBodyIcon.
const (
	UpdateTypeRequestBodyIconBolt       UpdateTypeRequestBodyIcon = "bolt"
	UpdateTypeRequestBodyIconBox        UpdateTypeRequestBodyIcon = "box"
	UpdateTypeRequestBodyIconBriefcase  UpdateTypeRequestBodyIcon = "briefcase"
	UpdateTypeRequestBodyIconBrowser    UpdateTypeRequestBodyIcon = "browser"
	UpdateTypeRequestBodyIconBulb       UpdateTypeRequestBodyIcon = "bulb"
	UpdateTypeRequestBodyIconCalendar   UpdateTypeRequestBodyIcon = "calendar"
	UpdateTypeRequestBodyIconClock      UpdateTypeRequestBodyIcon = "clock"
	UpdateTypeRequestBodyIconCog        UpdateTypeRequestBodyIcon = "cog"
	UpdateTypeRequestBodyIconComponents UpdateTypeRequestBodyIcon = "components"
	UpdateTypeRequestBodyIconDatabase   UpdateTypeRequestBodyIcon = "database"
	UpdateTypeRequestBodyIconDoc        UpdateTypeRequestBodyIcon = "doc"
	UpdateTypeRequestBodyIconEmail      UpdateTypeRequestBodyIcon = "email"
	UpdateTypeRequestBodyIconFiles      UpdateTypeRequestBodyIcon = "files"
	UpdateTypeRequestBodyIconFlag       UpdateTypeRequestBodyIcon = "flag"
	UpdateTypeRequestBodyIconFolder     UpdateTypeRequestBodyIcon = "folder"
	UpdateTypeRequestBodyIconGlobe      UpdateTypeRequestBodyIcon = "globe"
	UpdateTypeRequestBodyIconMoney      UpdateTypeRequestBodyIcon = "money"
	UpdateTypeRequestBodyIconServer     UpdateTypeRequestBodyIcon = "server"
	UpdateTypeRequestBodyIconSeverity   UpdateTypeRequestBodyIcon = "severity"
	UpdateTypeRequestBodyIconStar       UpdateTypeRequestBodyIcon = "star"
	UpdateTypeRequestBodyIconStore      UpdateTypeRequestBodyIcon = "store"
	UpdateTypeRequestBodyIconTag        UpdateTypeRequestBodyIcon = "tag"
	UpdateTypeRequestBodyIconUser       UpdateTypeRequestBodyIcon = "user"
	UpdateTypeRequestBodyIconUsers      UpdateTypeRequestBodyIcon = "users"
)

// Defines values for UpdateWorkflowRequestBodyRunsOnIncidentModes.
const (
	UpdateWorkflowRequestBodyRunsOnIncidentModesRetrospective UpdateWorkflowRequestBodyRunsOnIncidentModes = "retrospective"
	UpdateWorkflowRequestBodyRunsOnIncidentModesStandard      UpdateWorkflowRequestBodyRunsOnIncidentModes = "standard"
	UpdateWorkflowRequestBodyRunsOnIncidentModesTest          UpdateWorkflowRequestBodyRunsOnIncidentModes = "test"
)

// Defines values for UpdateWorkflowRequestBodyRunsOnIncidents.
const (
	UpdateWorkflowRequestBodyRunsOnIncidentsNewlyCreated          UpdateWorkflowRequestBodyRunsOnIncidents = "newly_created"
	UpdateWorkflowRequestBodyRunsOnIncidentsNewlyCreatedAndActive UpdateWorkflowRequestBodyRunsOnIncidents = "newly_created_and_active"
)

// Defines values for UpdateWorkflowRequestBodyState.
const (
	UpdateWorkflowRequestBodyStateActive   UpdateWorkflowRequestBodyState = "active"
	UpdateWorkflowRequestBodyStateDisabled UpdateWorkflowRequestBodyState = "disabled"
	UpdateWorkflowRequestBodyStateDraft    UpdateWorkflowRequestBodyState = "draft"
	UpdateWorkflowRequestBodyStateError    UpdateWorkflowRequestBodyState = "error"
)

// Defines values for UserV1Role.
const (
	UserV1RoleAdministrator UserV1Role = "administrator"
	UserV1RoleOwner         UserV1Role = "owner"
	UserV1RoleResponder     UserV1Role = "responder"
	UserV1RoleUnset         UserV1Role = "unset"
	UserV1RoleViewer        UserV1Role = "viewer"
)

// Defines values for UserWithRolesV2Role.
const (
	Administrator UserWithRolesV2Role = "administrator"
	Owner         UserWithRolesV2Role = "owner"
	Responder     UserWithRolesV2Role = "responder"
	Unset         UserWithRolesV2Role = "unset"
	Viewer        UserWithRolesV2Role = "viewer"
)

// Defines values for WorkflowRunsOnIncidentModes.
const (
	WorkflowRunsOnIncidentModesRetrospective WorkflowRunsOnIncidentModes = "retrospective"
	WorkflowRunsOnIncidentModesStandard      WorkflowRunsOnIncidentModes = "standard"
	WorkflowRunsOnIncidentModesTest          WorkflowRunsOnIncidentModes = "test"
)

// Defines values for WorkflowRunsOnIncidents.
const (
	WorkflowRunsOnIncidentsNewlyCreated          WorkflowRunsOnIncidents = "newly_created"
	WorkflowRunsOnIncidentsNewlyCreatedAndActive WorkflowRunsOnIncidents = "newly_created_and_active"
)

// Defines values for WorkflowState.
const (
	WorkflowStateActive   WorkflowState = "active"
	WorkflowStateDisabled WorkflowState = "disabled"
	WorkflowStateDraft    WorkflowState = "draft"
	WorkflowStateError    WorkflowState = "error"
)

// Defines values for WorkflowSlimRunsOnIncidentModes.
const (
	WorkflowSlimRunsOnIncidentModesRetrospective WorkflowSlimRunsOnIncidentModes = "retrospective"
	WorkflowSlimRunsOnIncidentModesStandard      WorkflowSlimRunsOnIncidentModes = "standard"
	WorkflowSlimRunsOnIncidentModesTest          WorkflowSlimRunsOnIncidentModes = "test"
)

// Defines values for WorkflowSlimRunsOnIncidents.
const (
	WorkflowSlimRunsOnIncidentsNewlyCreated          WorkflowSlimRunsOnIncidents = "newly_created"
	WorkflowSlimRunsOnIncidentsNewlyCreatedAndActive WorkflowSlimRunsOnIncidents = "newly_created_and_active"
)

// Defines values for WorkflowSlimState.
const (
	Active   WorkflowSlimState = "active"
	Disabled WorkflowSlimState = "disabled"
	Draft    WorkflowSlimState = "draft"
	Error    WorkflowSlimState = "error"
)

// Defines values for ActionsV1ListParamsIncidentMode.
const (
	ActionsV1ListParamsIncidentModeReal     ActionsV1ListParamsIncidentMode = "real"
	ActionsV1ListParamsIncidentModeTest     ActionsV1ListParamsIncidentMode = "test"
	ActionsV1ListParamsIncidentModeTutorial ActionsV1ListParamsIncidentMode = "tutorial"
)

// Defines values for IncidentAttachmentsV1ListParamsResourceType.
const (
	AtlassianStatuspageIncident IncidentAttachmentsV1ListParamsResourceType = "atlassian_statuspage_incident"
	DatadogMonitorAlert         IncidentAttachmentsV1ListParamsResourceType = "datadog_monitor_alert"
	GithubPullRequest           IncidentAttachmentsV1ListParamsResourceType = "github_pull_request"
	GitlabMergeRequest          IncidentAttachmentsV1ListParamsResourceType = "gitlab_merge_request"
	GoogleCalendarEvent         IncidentAttachmentsV1ListParamsResourceType = "google_calendar_event"
	JiraIssue                   IncidentAttachmentsV1ListParamsResourceType = "jira_issue"
	OpsgenieAlert               IncidentAttachmentsV1ListParamsResourceType = "opsgenie_alert"
	PagerDutyIncident           IncidentAttachmentsV1ListParamsResourceType = "pager_duty_incident"
	Scrubbed                    IncidentAttachmentsV1ListParamsResourceType = "scrubbed"
	SentryIssue                 IncidentAttachmentsV1ListParamsResourceType = "sentry_issue"
	StatuspageIncident          IncidentAttachmentsV1ListParamsResourceType = "statuspage_incident"
	ZendeskTicket               IncidentAttachmentsV1ListParamsResourceType = "zendesk_ticket"
)

// Defines values for ActionsV2ListParamsIncidentMode.
const (
	ActionsV2ListParamsIncidentModeRetrospective ActionsV2ListParamsIncidentMode = "retrospective"
	ActionsV2ListParamsIncidentModeStandard      ActionsV2ListParamsIncidentMode = "standard"
	ActionsV2ListParamsIncidentModeStream        ActionsV2ListParamsIncidentMode = "stream"
	ActionsV2ListParamsIncidentModeTest          ActionsV2ListParamsIncidentMode = "test"
	ActionsV2ListParamsIncidentModeTutorial      ActionsV2ListParamsIncidentMode = "tutorial"
)

// Defines values for FollowUpsV2ListParamsIncidentMode.
const (
	Retrospective FollowUpsV2ListParamsIncidentMode = "retrospective"
	Standard      FollowUpsV2ListParamsIncidentMode = "standard"
	Stream        FollowUpsV2ListParamsIncidentMode = "stream"
	Test          FollowUpsV2ListParamsIncidentMode = "test"
	Tutorial      FollowUpsV2ListParamsIncidentMode = "tutorial"
)

// APIKeyV2 defines model for APIKeyV2.
type APIKeyV2 struct {
	// Id Unique identifier for this API key
	Id string `json:"id"`

	// Name The name of the API key, for the user's reference
	Name string `json:"name"`
}

// ActionV1 defines model for ActionV1.
type ActionV1 struct {
	Assignee *UserV1 `json:"assignee,omitempty"`

	// CompletedAt When the action was completed
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the action
	Description            *string                   `json:"description,omitempty"`
	ExternalIssueReference *ExternalIssueReferenceV1 `json:"external_issue_reference,omitempty"`

	// FollowUp Whether an action is marked as follow-up
	FollowUp bool `json:"follow_up"`

	// Id Unique identifier for the action
	Id string `json:"id"`

	// IncidentId Unique identifier of the incident the action belongs to
	IncidentId string `json:"incident_id"`

	// Status Status of the action
	Status ActionV1Status `json:"status"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// ActionV1Status Status of the action
type ActionV1Status string

// ActionV2 defines model for ActionV2.
type ActionV2 struct {
	Assignee *UserV1 `json:"assignee,omitempty"`

	// CompletedAt When the action was completed
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the action
	Description string `json:"description"`

	// Id Unique identifier for the action
	Id string `json:"id"`

	// IncidentId Unique identifier of the incident the action belongs to
	IncidentId string `json:"incident_id"`

	// Status Status of the action
	Status ActionV2Status `json:"status"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// ActionV2Status Status of the action
type ActionV2Status string

// ActorV2 defines model for ActorV2.
type ActorV2 struct {
	ApiKey *APIKeyV2 `json:"api_key,omitempty"`
	User   *UserV1   `json:"user,omitempty"`
}

// AfterPaginationMetaResultV2 defines model for AfterPaginationMetaResultV2.
type AfterPaginationMetaResultV2 struct {
	// After The time, if it exists, of the last entry's end time
	After string `json:"after"`

	// AfterUrl The URL to fetch the next page of entries
	AfterUrl string `json:"after_url"`
}

// AlertResult defines model for AlertResult.
type AlertResult struct {
	// DeduplicationKey The deduplication key that the event has been processed with
	DeduplicationKey AlertResultDeduplicationKey `json:"deduplication_key"`

	// Message Human readable message giving detail about the event
	Message AlertResultMessage `json:"message"`

	// Status Status of the event
	Status AlertResultStatus `json:"status"`
}

// AlertResultDeduplicationKey The deduplication key that the event has been processed with
type AlertResultDeduplicationKey string

// AlertResultMessage Human readable message giving detail about the event
type AlertResultMessage string

// AlertResultStatus Status of the event
type AlertResultStatus string

// CatalogEntryEngineParamBindingV2 defines model for CatalogEntryEngineParamBindingV2.
type CatalogEntryEngineParamBindingV2 struct {
	// ArrayValue If array_value is set, this helps render the values
	ArrayValue *[]CatalogEntryEngineParamBindingValueV2 `json:"array_value,omitempty"`
	Value      *CatalogEntryEngineParamBindingValueV2   `json:"value,omitempty"`
}

// CatalogEntryEngineParamBindingValueV2 defines model for CatalogEntryEngineParamBindingValueV2.
type CatalogEntryEngineParamBindingValueV2 struct {
	CatalogEntry *CatalogEntryReferenceV2 `json:"catalog_entry,omitempty"`

	// Helptext Gives a description of the option to the user
	Helptext *string `json:"helptext,omitempty"`

	// ImageUrl If appropriate, URL to an image that can be displayed alongside the option
	ImageUrl *string `json:"image_url,omitempty"`

	// IsImageSlackIcon If true, the image_url is a Slack icon and should be displayed as such
	IsImageSlackIcon *bool `json:"is_image_slack_icon,omitempty"`

	// Label Human readable label to be displayed for user to select
	Label string `json:"label"`

	// Literal If set, this is the literal value of the step parameter
	Literal *string `json:"literal,omitempty"`

	// Reference If set, this is the reference into the trigger scope that is the value of this parameter
	Reference *string `json:"reference,omitempty"`

	// SortKey Gives an indication of how to sort the options when displayed to the user
	SortKey string `json:"sort_key"`

	// Unavailable Unavailable is true if we've failed to build the value for this binding
	Unavailable *bool `json:"unavailable,omitempty"`

	// Value Either the reference or the literal: this field is designed purely to make working with react-select easier
	Value *string `json:"value,omitempty"`
}

// CatalogEntryReferenceV2 defines model for CatalogEntryReferenceV2.
type CatalogEntryReferenceV2 struct {
	// ArchivedAt When this entry was archived
	ArchivedAt *time.Time `json:"archived_at,omitempty"`

	// CatalogEntryId ID of this catalog entry
	CatalogEntryId string `json:"catalog_entry_id"`

	// CatalogEntryName The name of this entry
	CatalogEntryName string `json:"catalog_entry_name"`

	// CatalogTypeId ID of this catalog type
	CatalogTypeId string `json:"catalog_type_id"`
}

// CatalogEntryV2 defines model for CatalogEntryV2.
type CatalogEntryV2 struct {
	// Aliases Optional aliases that can be used to reference this entry
	Aliases []string `json:"aliases"`

	// ArchivedAt When this entry was archived
	ArchivedAt *time.Time `json:"archived_at,omitempty"`

	// AttributeValues Values of this entry
	AttributeValues map[string]CatalogEntryEngineParamBindingV2 `json:"attribute_values"`

	// CatalogTypeId ID of this catalog type
	CatalogTypeId string `json:"catalog_type_id"`

	// CreatedAt When this entry was created
	CreatedAt time.Time `json:"created_at"`

	// ExternalId An optional alternative ID for this entry, which is ensured to be unique for the type
	ExternalId *string `json:"external_id,omitempty"`

	// Id ID of this catalog entry
	Id string `json:"id"`

	// Name Name is the human readable name of this entry
	Name string `json:"name"`

	// Rank When catalog type is ranked, this is used to help order things
	Rank int32 `json:"rank"`

	// UpdatedAt When this entry was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CatalogResourceV2 defines model for CatalogResourceV2.
type CatalogResourceV2 struct {
	// Category Which category of resource
	Category CatalogResourceV2Category `json:"category"`

	// Description Human readable description for this resource
	Description string `json:"description"`

	// Label Label for this catalog resource type
	Label string `json:"label"`

	// Type Catalog type name for this resource
	Type string `json:"type"`

	// ValueDocstring Documentation for the literal string value of this resource
	ValueDocstring string `json:"value_docstring"`
}

// CatalogResourceV2Category Which category of resource
type CatalogResourceV2Category string

// CatalogTypeAttributePathItemPayloadV2 defines model for CatalogTypeAttributePathItemPayloadV2.
type CatalogTypeAttributePathItemPayloadV2 struct {
	// AttributeId the ID of the attribute to use
	AttributeId string `json:"attribute_id"`
}

// CatalogTypeAttributePathItemV2 defines model for CatalogTypeAttributePathItemV2.
type CatalogTypeAttributePathItemV2 struct {
	// AttributeId the ID of the attribute to use
	AttributeId string `json:"attribute_id"`

	// AttributeName the name of the attribute to use
	AttributeName string `json:"attribute_name"`
}

// CatalogTypeAttributePayloadV2 defines model for CatalogTypeAttributePayloadV2.
type CatalogTypeAttributePayloadV2 struct {
	// Array Whether this attribute is an array
	Array bool `json:"array"`

	// BacklinkAttribute The attribute to use (if this is a backlink)
	BacklinkAttribute *string `json:"backlink_attribute,omitempty"`

	// Id The ID of this attribute
	Id *string `json:"id,omitempty"`

	// Mode Controls how this attribute is modified
	Mode *CatalogTypeAttributePayloadV2Mode `json:"mode,omitempty"`

	// Name Unique name of this attribute
	Name string `json:"name"`

	// Path The path to use (if this is an path)
	Path *[]CatalogTypeAttributePathItemPayloadV2 `json:"path,omitempty"`

	// Type Catalog type name for this attribute
	Type string `json:"type"`
}

// CatalogTypeAttributePayloadV2Mode Controls how this attribute is modified
type CatalogTypeAttributePayloadV2Mode string

// CatalogTypeAttributeV2 defines model for CatalogTypeAttributeV2.
type CatalogTypeAttributeV2 struct {
	// Array Whether this attribute is an array
	Array bool `json:"array"`

	// BacklinkAttribute The attribute to use (if this is a backlink)
	BacklinkAttribute *string `json:"backlink_attribute,omitempty"`

	// Id The ID of this attribute
	Id string `json:"id"`

	// Mode Controls how this attribute is modified
	Mode CatalogTypeAttributeV2Mode `json:"mode"`

	// Name Unique name of this attribute
	Name string `json:"name"`

	// Path The path to use (if this is a path attribute)
	Path *[]CatalogTypeAttributePathItemV2 `json:"path,omitempty"`

	// Type Catalog type name for this attribute
	Type string `json:"type"`
}

// CatalogTypeAttributeV2Mode Controls how this attribute is modified
type CatalogTypeAttributeV2Mode string

// CatalogTypeSchemaV2 defines model for CatalogTypeSchemaV2.
type CatalogTypeSchemaV2 struct {
	// Attributes Attributes of this catalog type
	Attributes []CatalogTypeAttributeV2 `json:"attributes"`

	// Version The version number of this schema
	Version int64 `json:"version"`
}

// CatalogTypeV2 defines model for CatalogTypeV2.
type CatalogTypeV2 struct {
	// Annotations Annotations that can track metadata about this type
	Annotations map[string]string `json:"annotations"`

	// Categories What categories is this type considered part of
	Categories []CatalogTypeV2Categories `json:"categories"`

	// Color Sets the display color of this type in the dashboard
	Color CatalogTypeV2Color `json:"color"`

	// CreatedAt When this type was created
	CreatedAt time.Time `json:"created_at"`

	// Description Human readble description of this type
	Description string `json:"description"`

	// DynamicResourceParameter If this is a dynamic catalog type, this will be the unique parameter for identitfying this resource externally.
	DynamicResourceParameter *string `json:"dynamic_resource_parameter,omitempty"`

	// EstimatedCount If populated, gives an estimated count of entries for this type
	EstimatedCount *int64 `json:"estimated_count,omitempty"`

	// Icon Sets the display icon of this type in the dashboard
	Icon CatalogTypeV2Icon `json:"icon"`

	// Id ID of this catalog type
	Id string `json:"id"`

	// IsEditable Catalog types that are synced with external resources can't be edited
	IsEditable bool `json:"is_editable"`

	// LastSyncedAt When this type was last synced (if it's ever been sync'd)
	LastSyncedAt *time.Time `json:"last_synced_at,omitempty"`

	// Name Name is the human readable name of this type
	Name string `json:"name"`

	// Ranked If this type should be ranked
	Ranked bool `json:"ranked"`

	// RegistryType The registry resource this type is synced from, if any
	RegistryType *string `json:"registry_type,omitempty"`

	// RequiredIntegrations If populated, the integrations required for this type
	RequiredIntegrations *[]string           `json:"required_integrations,omitempty"`
	Schema               CatalogTypeSchemaV2 `json:"schema"`

	// SemanticType Semantic type of this resource (unused)
	SemanticType string `json:"semantic_type"`

	// SourceRepoUrl The url of the external repository where this type is managed
	SourceRepoUrl *string `json:"source_repo_url,omitempty"`

	// TypeName The type name of this catalog type, to be used when defining attributes. This is immutable once a CatalogType has been created. For non-externally sync types, it must follow the pattern Custom["SomeName "]
	TypeName string `json:"type_name"`

	// UpdatedAt When this type was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CatalogTypeV2Categories defines model for CatalogTypeV2.Categories.
type CatalogTypeV2Categories string

// CatalogTypeV2Color Sets the display color of this type in the dashboard
type CatalogTypeV2Color string

// CatalogTypeV2Icon Sets the display icon of this type in the dashboard
type CatalogTypeV2Icon string

// ConditionGroupPayloadV2 defines model for ConditionGroupPayloadV2.
type ConditionGroupPayloadV2 struct {
	// Conditions All conditions in this list must be satisfied for the group to be satisfied
	Conditions []ConditionPayloadV2 `json:"conditions"`
}

// ConditionGroupV2 defines model for ConditionGroupV2.
type ConditionGroupV2 struct {
	// Conditions All conditions in this list must be satisfied for the group to be satisfied
	Conditions []ConditionV3 `json:"conditions"`
}

// ConditionOperationV2 defines model for ConditionOperationV2.
type ConditionOperationV2 struct {
	// Label Human readable label to be displayed for user to select
	Label string `json:"label"`

	// Value Unique identifier for this option
	Value string `json:"value"`
}

// ConditionOperationV3 defines model for ConditionOperationV3.
type ConditionOperationV3 struct {
	// Label Human readable label to be displayed for user to select
	Label string `json:"label"`

	// Value Unique identifier for this option
	Value string `json:"value"`
}

// ConditionPayloadV2 defines model for ConditionPayloadV2.
type ConditionPayloadV2 struct {
	// Operation The name of the operation on the subject
	Operation string `json:"operation"`

	// ParamBindings List of parameter bindings
	ParamBindings []EngineParamBindingPayloadV2 `json:"param_bindings"`

	// Subject The reference of the subject in the trigger scope
	Subject string `json:"subject"`
}

// ConditionSubjectV2 defines model for ConditionSubjectV2.
type ConditionSubjectV2 struct {
	// Label Human readable identifier for the subject
	Label string `json:"label"`

	// Reference Reference into the scope for the value of the subject
	Reference string `json:"reference"`
}

// ConditionSubjectV3 defines model for ConditionSubjectV3.
type ConditionSubjectV3 struct {
	// Label Human readable identifier for the subject
	Label string `json:"label"`

	// Reference Reference into the scope for the value of the subject
	Reference string `json:"reference"`
}

// ConditionV2 defines model for ConditionV2.
type ConditionV2 struct {
	Operation ConditionOperationV2 `json:"operation"`

	// ParamBindings Bindings for the operation parameters
	ParamBindings []EngineParamBindingV2 `json:"param_bindings"`
	Subject       ConditionSubjectV2     `json:"subject"`
}

// ConditionV3 defines model for ConditionV3.
type ConditionV3 struct {
	Operation ConditionOperationV3 `json:"operation"`

	// ParamBindings Bindings for the operation parameters
	ParamBindings []EngineParamBindingV3 `json:"param_bindings"`
	Subject       ConditionSubjectV3     `json:"subject"`
}

// CreateEntryRequestBody defines model for CreateEntryRequestBody.
type CreateEntryRequestBody struct {
	// Aliases Optional aliases that can be used to reference this entry
	Aliases *[]string `json:"aliases,omitempty"`

	// AttributeValues Values of this entry
	AttributeValues map[string]EngineParamBindingPayloadV2 `json:"attribute_values"`

	// CatalogTypeId ID of this catalog type
	CatalogTypeId string `json:"catalog_type_id"`

	// ExternalId An optional alternative ID for this entry, which is ensured to be unique for the type
	ExternalId *string `json:"external_id,omitempty"`

	// Name Name is the human readable name of this entry
	Name string `json:"name"`

	// Rank When catalog type is ranked, this is used to help order things
	Rank *int32 `json:"rank,omitempty"`
}

// CreateEntryResponseBody defines model for CreateEntryResponseBody.
type CreateEntryResponseBody struct {
	CatalogEntry CatalogEntryV2 `json:"catalog_entry"`
}

// CreateHTTPRequestBody defines model for CreateHTTPRequestBody.
type CreateHTTPRequestBody struct {
	// DeduplicationKey A deduplication key can be provided to uniquely reference this alert from your alert source. If you send an event with the same deduplication_key multiple times, only one alert will be created in incident.io for this alert source config.
	DeduplicationKey *string `json:"deduplication_key,omitempty"`

	// Description Description that optionally adds more detail to title. Supports markdown.
	Description *string `json:"description,omitempty"`

	// Metadata Any additional metadata that you've configured your alert source to parse
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// SourceUrl If applicable, a link to the alert in the upstream system
	SourceUrl *string `json:"source_url,omitempty"`

	// Status Current status of this alert
	Status CreateHTTPRequestBodyStatus `json:"status"`

	// Title Alert title which is used when summarising the alert
	Title string `json:"title"`
}

// CreateHTTPRequestBodyStatus Current status of this alert
type CreateHTTPRequestBodyStatus string

// CreateManagedResourceRequestBody defines model for CreateManagedResourceRequestBody.
type CreateManagedResourceRequestBody struct {
	// Annotations Annotations that track metadata about this resource
	Annotations map[string]string `json:"annotations"`

	// ResourceId The ID of the related resource
	ResourceId string `json:"resource_id"`

	// ResourceType The type of the related resource
	ResourceType CreateManagedResourceRequestBodyResourceType `json:"resource_type"`
}

// CreateManagedResourceRequestBodyResourceType The type of the related resource
type CreateManagedResourceRequestBodyResourceType string

// CreateManagedResourceResponseBody defines model for CreateManagedResourceResponseBody.
type CreateManagedResourceResponseBody struct {
	ManagedResource ManagedResourceV2 `json:"managed_resource"`
}

// CreatePathRequestBody defines model for CreatePathRequestBody.
type CreatePathRequestBody struct {
	// Name The name of this escalation path, for the user's reference.
	Name string `json:"name"`

	// Path The nodes that form the levels and branches of this escalation path.
	Path []EscalationPathNodePayloadV2 `json:"path"`

	// WorkingHours The working hours for this escalation path.
	WorkingHours *[]WeekdayIntervalConfigV2 `json:"working_hours,omitempty"`
}

// CreatePathResponseBody defines model for CreatePathResponseBody.
type CreatePathResponseBody struct {
	EscalationPath EscalationPathV2 `json:"escalation_path"`
}

// CreateRequestBody defines model for CreateRequestBody.
type CreateRequestBody struct {
	// CustomFieldId ID of the custom field this option belongs to
	CustomFieldId string `json:"custom_field_id"`

	// SortKey Sort key used to order the custom field options correctly
	SortKey *int64 `json:"sort_key,omitempty"`

	// Value Human readable name for the custom field option
	Value string `json:"value"`
}

// CreateRequestBody10 defines model for CreateRequestBody10.
type CreateRequestBody10 struct {
	// CustomFieldEntries Set the incident's custom fields to these values
	CustomFieldEntries *[]CustomFieldEntryPayloadV1 `json:"custom_field_entries,omitempty"`

	// Id Unique identifier for the incident
	Id *string `json:"id,omitempty"`

	// IdempotencyKey Unique string used to de-duplicate incident create requests
	IdempotencyKey string `json:"idempotency_key"`

	// IncidentRoleAssignments Assign incident roles to these people
	IncidentRoleAssignments *[]IncidentRoleAssignmentPayloadV2 `json:"incident_role_assignments,omitempty"`

	// IncidentStatusId Incident status to assign to the incident
	IncidentStatusId *string `json:"incident_status_id,omitempty"`

	// IncidentTimestampValues Assign the incident's timestamps to these values
	IncidentTimestampValues *[]IncidentTimestampValuePayloadV2 `json:"incident_timestamp_values,omitempty"`

	// IncidentTypeId Incident type to create this incident as
	IncidentTypeId *string `json:"incident_type_id,omitempty"`

	// Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
	Mode *CreateRequestBody10Mode `json:"mode,omitempty"`

	// Name Explanation of the incident
	Name                         *string                         `json:"name,omitempty"`
	RetrospectiveIncidentOptions *RetrospectiveIncidentOptionsV2 `json:"retrospective_incident_options,omitempty"`

	// SeverityId Severity to create incident as
	SeverityId *string `json:"severity_id,omitempty"`

	// SlackChannelNameOverride Name of the Slack channel to create for this incident
	SlackChannelNameOverride *string `json:"slack_channel_name_override,omitempty"`

	// SlackTeamId Slack Team to create the incident in
	SlackTeamId *string `json:"slack_team_id,omitempty"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`

	// Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
	Visibility CreateRequestBody10Visibility `json:"visibility"`
}

// CreateRequestBody10Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
type CreateRequestBody10Mode string

// CreateRequestBody10Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
type CreateRequestBody10Visibility string

// CreateRequestBody11 defines model for CreateRequestBody11.
type CreateRequestBody11 struct {
	Schedule ScheduleCreatePayloadV2 `json:"schedule"`
}

// CreateRequestBody12 defines model for CreateRequestBody12.
type CreateRequestBody12 struct {
	// Description Description of the severity
	Description string `json:"description"`

	// Name Human readable name of the severity
	Name string `json:"name"`

	// Rank Rank to help sort severities (lower numbers are less severe)
	Rank *int64 `json:"rank,omitempty"`
}

// CreateRequestBody2 defines model for CreateRequestBody2.
type CreateRequestBody2 struct {
	// Description Description of the custom field
	Description string `json:"description"`

	// FieldType Type of custom field
	FieldType CreateRequestBody2FieldType `json:"field_type"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// Required When this custom field must be set during the incident lifecycle. [DEPRECATED: please use required_v2 instead].
	Required *CreateRequestBody2Required `json:"required,omitempty"`

	// RequiredV2 When this custom field must be set during the incident lifecycle.
	RequiredV2 *CreateRequestBody2RequiredV2 `json:"required_v2,omitempty"`

	// ShowBeforeClosure Whether a custom field should be shown in the incident resolve modal. If this custom field is required before resolution, but no value has been set for it, the field will be shown in the resolve modal whatever the value of this setting.
	ShowBeforeClosure bool `json:"show_before_closure"`

	// ShowBeforeCreation Whether a custom field should be shown in the incident creation modal. This must be true if the field is always required.
	ShowBeforeCreation bool `json:"show_before_creation"`

	// ShowBeforeUpdate Whether a custom field should be shown in the incident update modal.
	ShowBeforeUpdate bool `json:"show_before_update"`

	// ShowInAnnouncementPost Whether a custom field should be shown in the list of fields as part of the announcement post when set.
	ShowInAnnouncementPost *bool `json:"show_in_announcement_post,omitempty"`
}

// CreateRequestBody2FieldType Type of custom field
type CreateRequestBody2FieldType string

// CreateRequestBody2Required When this custom field must be set during the incident lifecycle. [DEPRECATED: please use required_v2 instead].
type CreateRequestBody2Required string

// CreateRequestBody2RequiredV2 When this custom field must be set during the incident lifecycle.
type CreateRequestBody2RequiredV2 string

// CreateRequestBody3 defines model for CreateRequestBody3.
type CreateRequestBody3 struct {
	// Description Description of the custom field
	Description string `json:"description"`

	// FieldType Type of custom field
	FieldType CreateRequestBody3FieldType `json:"field_type"`

	// Name Human readable name for the custom field
	Name string `json:"name"`
}

// CreateRequestBody3FieldType Type of custom field
type CreateRequestBody3FieldType string

// CreateRequestBody4 defines model for CreateRequestBody4.
type CreateRequestBody4 struct {
	// IncidentId ID of the incident to add an attachment to
	IncidentId string `json:"incident_id"`
	Resource   struct {
		// ExternalId ID of the resource in the external system
		ExternalId string `json:"external_id"`

		// ResourceType E.g. PagerDuty: the external system that holds the resource
		ResourceType CreateRequestBody4ResourceResourceType `json:"resource_type"`
	} `json:"resource"`
}

// CreateRequestBody4ResourceResourceType E.g. PagerDuty: the external system that holds the resource
type CreateRequestBody4ResourceResourceType string

// CreateRequestBody5 defines model for CreateRequestBody5.
type CreateRequestBody5 struct {
	IncidentId string `json:"incident_id"`
	UserId     string `json:"user_id"`
}

// CreateRequestBody6 defines model for CreateRequestBody6.
type CreateRequestBody6 struct {
	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Instructions Provided to whoever is nominated for the role. Note that this will be empty for the 'reporter' role.
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// Required DEPRECATED: this will always be false.
	Required bool `json:"required"`

	// Shortform Short human readable name for Slack. Note that this will be empty for the 'reporter' role.
	Shortform string `json:"shortform"`
}

// CreateRequestBody7 defines model for CreateRequestBody7.
type CreateRequestBody7 struct {
	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Instructions Provided to whoever is nominated for the role. Note that this will be empty for the 'reporter' role.
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// Shortform Short human readable name for Slack. Note that this will be empty for the 'reporter' role.
	Shortform string `json:"shortform"`
}

// CreateRequestBody8 defines model for CreateRequestBody8.
type CreateRequestBody8 struct {
	// Category Whether the status should be considered 'live' (now renamed to active), 'learning' (now renamed to post-incident) or 'closed'. The triage and declined statuses cannot be created or modified.
	Category CreateRequestBody8Category `json:"category"`

	// Description Rich text description of the incident status
	Description string `json:"description"`

	// Name Unique name of this status
	Name string `json:"name"`
}

// CreateRequestBody8Category Whether the status should be considered 'live' (now renamed to active), 'learning' (now renamed to post-incident) or 'closed'. The triage and declined statuses cannot be created or modified.
type CreateRequestBody8Category string

// CreateRequestBody9 defines model for CreateRequestBody9.
type CreateRequestBody9 struct {
	// CustomFieldEntries Set the incident's custom fields to these values
	CustomFieldEntries *[]CustomFieldEntryPayloadV1 `json:"custom_field_entries,omitempty"`

	// IdempotencyKey Unique string used to de-duplicate incident create requests
	IdempotencyKey string `json:"idempotency_key"`

	// IncidentRoleAssignments Assign incident roles to these people
	IncidentRoleAssignments *[]IncidentRoleAssignmentPayloadV1 `json:"incident_role_assignments,omitempty"`

	// IncidentTypeId Incident type to create this incident as
	IncidentTypeId *string `json:"incident_type_id,omitempty"`

	// Mode Whether the incident is real or test
	Mode *CreateRequestBody9Mode `json:"mode,omitempty"`

	// Name Explanation of the incident
	Name *string `json:"name,omitempty"`

	// SeverityId Severity to create incident as
	SeverityId *string `json:"severity_id,omitempty"`

	// SlackTeamId ID of the Slack team / workspace. This is only required if you are using a Slack Enterprise Grid with multiple teams.
	SlackTeamId *string `json:"slack_team_id,omitempty"`

	// SourceMessageChannelId Channel ID of the source message, if this incident was created from one
	SourceMessageChannelId *string `json:"source_message_channel_id,omitempty"`

	// SourceMessageTimestamp Timestamp of the source message, if this incident was created from one
	SourceMessageTimestamp *string `json:"source_message_timestamp,omitempty"`

	// Status Current status of the incident
	Status *CreateRequestBody9Status `json:"status,omitempty"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`

	// Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
	Visibility CreateRequestBody9Visibility `json:"visibility"`
}

// CreateRequestBody9Mode Whether the incident is real or test
type CreateRequestBody9Mode string

// CreateRequestBody9Status Current status of the incident
type CreateRequestBody9Status string

// CreateRequestBody9Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
type CreateRequestBody9Visibility string

// CreateResponseBody defines model for CreateResponseBody.
type CreateResponseBody struct {
	IncidentAttachment IncidentAttachmentV1 `json:"incident_attachment"`
}

// CreateResponseBody2 defines model for CreateResponseBody2.
type CreateResponseBody2 struct {
	IncidentMembership IncidentMembership `json:"incident_membership"`
}

// CreateTypeRequestBody defines model for CreateTypeRequestBody.
type CreateTypeRequestBody struct {
	// Annotations Annotations that can track metadata about this type
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Categories What categories is this type considered part of
	Categories *[]CreateTypeRequestBodyCategories `json:"categories,omitempty"`

	// Color Sets the display color of this type in the dashboard
	Color *CreateTypeRequestBodyColor `json:"color,omitempty"`

	// Description Human readble description of this type
	Description string `json:"description"`

	// Icon Sets the display icon of this type in the dashboard
	Icon *CreateTypeRequestBodyIcon `json:"icon,omitempty"`

	// Name Name is the human readable name of this type
	Name string `json:"name"`

	// Ranked If this type should be ranked
	Ranked *bool `json:"ranked,omitempty"`

	// SourceRepoUrl The url of the external repository where this type is managed
	SourceRepoUrl *string `json:"source_repo_url,omitempty"`

	// TypeName The type name of this catalog type, to be used when defining attributes. This is immutable once a CatalogType has been created. For non-externally sync types, it must follow the pattern Custom["SomeName "]
	TypeName *string `json:"type_name,omitempty"`
}

// CreateTypeRequestBodyCategories defines model for CreateTypeRequestBody.Categories.
type CreateTypeRequestBodyCategories string

// CreateTypeRequestBodyColor Sets the display color of this type in the dashboard
type CreateTypeRequestBodyColor string

// CreateTypeRequestBodyIcon Sets the display icon of this type in the dashboard
type CreateTypeRequestBodyIcon string

// CreateTypeResponseBody defines model for CreateTypeResponseBody.
type CreateTypeResponseBody struct {
	CatalogType CatalogTypeV2 `json:"catalog_type"`
}

// CreateWorkflowRequestBody defines model for CreateWorkflowRequestBody.
type CreateWorkflowRequestBody struct {
	// Annotations Annotations that track metadata about this resource
	Annotations *map[string]string `json:"annotations,omitempty"`

	// ConditionGroups List of conditions to apply to the workflow
	ConditionGroups []ConditionGroupPayloadV2 `json:"condition_groups"`

	// ContinueOnStepError Whether to continue executing the workflow if a step fails
	ContinueOnStepError bool           `json:"continue_on_step_error"`
	Delay               *WorkflowDelay `json:"delay,omitempty"`

	// Expressions The expressions used in the workflow
	Expressions []ExpressionPayloadV2 `json:"expressions"`

	// Folder Folder to display the workflow in
	Folder *string `json:"folder,omitempty"`

	// IncludePrivateIncidents Whether to include private incidents
	IncludePrivateIncidents bool `json:"include_private_incidents"`

	// Name The human-readable name of the workflow
	Name string `json:"name"`

	// OnceFor Once For strategy to apply to this workflow
	OnceFor []string `json:"once_for"`

	// RunsOnIncidentModes Which modes of incident this should run on (defaults to just standard incidents)
	RunsOnIncidentModes []CreateWorkflowRequestBodyRunsOnIncidentModes `json:"runs_on_incident_modes"`

	// RunsOnIncidents Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
	RunsOnIncidents CreateWorkflowRequestBodyRunsOnIncidents `json:"runs_on_incidents"`

	// State The state of the workflow (e.g. is it draft, or disabled)
	State *CreateWorkflowRequestBodyState `json:"state,omitempty"`

	// Steps List of step to execute as part of the workflow
	Steps []StepConfigPayload `json:"steps"`

	// Trigger Trigger to set on the workflow
	Trigger string `json:"trigger"`
}

// CreateWorkflowRequestBodyRunsOnIncidentModes defines model for CreateWorkflowRequestBody.RunsOnIncidentModes.
type CreateWorkflowRequestBodyRunsOnIncidentModes string

// CreateWorkflowRequestBodyRunsOnIncidents Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
type CreateWorkflowRequestBodyRunsOnIncidents string

// CreateWorkflowRequestBodyState The state of the workflow (e.g. is it draft, or disabled)
type CreateWorkflowRequestBodyState string

// CustomFieldEntryPayloadV1 defines model for CustomFieldEntryPayloadV1.
type CustomFieldEntryPayloadV1 struct {
	// CustomFieldId ID of the custom field this entry is linked against
	CustomFieldId string `json:"custom_field_id"`

	// Values List of values to associate with this entry. Use an empty array to unset the value of the custom field.
	Values []CustomFieldValuePayloadV1 `json:"values"`
}

// CustomFieldEntryV1 defines model for CustomFieldEntryV1.
type CustomFieldEntryV1 struct {
	CustomField CustomFieldTypeInfoV1 `json:"custom_field"`

	// Values List of custom field values set on this entry
	Values []CustomFieldValueV1 `json:"values"`
}

// CustomFieldOptionV1 defines model for CustomFieldOptionV1.
type CustomFieldOptionV1 struct {
	// CustomFieldId ID of the custom field this option belongs to
	CustomFieldId string `json:"custom_field_id"`

	// Id Unique identifier for the custom field option
	Id string `json:"id"`

	// SortKey Sort key used to order the custom field options correctly
	SortKey int64 `json:"sort_key"`

	// Value Human readable name for the custom field option
	Value string `json:"value"`
}

// CustomFieldTypeInfoV1 defines model for CustomFieldTypeInfoV1.
type CustomFieldTypeInfoV1 struct {
	// Description Description of the custom field
	Description string `json:"description"`

	// FieldType Type of custom field
	FieldType CustomFieldTypeInfoV1FieldType `json:"field_type"`

	// Id Unique identifier for the custom field
	Id string `json:"id"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// Options What options are available for this custom field, if this field has options
	Options []CustomFieldOptionV1 `json:"options"`
}

// CustomFieldTypeInfoV1FieldType Type of custom field
type CustomFieldTypeInfoV1FieldType string

// CustomFieldV1 defines model for CustomFieldV1.
type CustomFieldV1 struct {
	// CatalogTypeId For catalog fields, the ID of the associated catalog type
	CatalogTypeId *string `json:"catalog_type_id,omitempty"`

	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the custom field
	Description string `json:"description"`

	// FieldType Type of custom field
	FieldType CustomFieldV1FieldType `json:"field_type"`

	// Id Unique identifier for the custom field
	Id string `json:"id"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// Options What options are available for this custom field, if this field has options
	Options []CustomFieldOptionV1 `json:"options"`

	// Required When this custom field must be set during the incident lifecycle. [DEPRECATED: please use required_v2 instead].
	Required *CustomFieldV1Required `json:"required,omitempty"`

	// RequiredV2 When this custom field must be set during the incident lifecycle.
	RequiredV2 *CustomFieldV1RequiredV2 `json:"required_v2,omitempty"`

	// ShowBeforeClosure Whether a custom field should be shown in the incident resolve modal. If this custom field is required before resolution, but no value has been set for it, the field will be shown in the resolve modal whatever the value of this setting.
	ShowBeforeClosure bool `json:"show_before_closure"`

	// ShowBeforeCreation Whether a custom field should be shown in the incident creation modal. This must be true if the field is always required.
	ShowBeforeCreation bool `json:"show_before_creation"`

	// ShowBeforeUpdate Whether a custom field should be shown in the incident update modal.
	ShowBeforeUpdate bool `json:"show_before_update"`

	// ShowInAnnouncementPost Whether a custom field should be shown in the list of fields as part of the announcement post when set.
	ShowInAnnouncementPost *bool `json:"show_in_announcement_post,omitempty"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CustomFieldV1FieldType Type of custom field
type CustomFieldV1FieldType string

// CustomFieldV1Required When this custom field must be set during the incident lifecycle. [DEPRECATED: please use required_v2 instead].
type CustomFieldV1Required string

// CustomFieldV1RequiredV2 When this custom field must be set during the incident lifecycle.
type CustomFieldV1RequiredV2 string

// CustomFieldV2 defines model for CustomFieldV2.
type CustomFieldV2 struct {
	// CatalogTypeId For catalog fields, the ID of the associated catalog type
	CatalogTypeId *string `json:"catalog_type_id,omitempty"`

	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the custom field
	Description string `json:"description"`

	// FieldType Type of custom field
	FieldType CustomFieldV2FieldType `json:"field_type"`

	// Id Unique identifier for the custom field
	Id string `json:"id"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// CustomFieldV2FieldType Type of custom field
type CustomFieldV2FieldType string

// CustomFieldValuePayloadV1 defines model for CustomFieldValuePayloadV1.
type CustomFieldValuePayloadV1 struct {
	// Id Unique identifier for the custom field value
	Id *string `json:"id,omitempty"`

	// ValueCatalogEntryId ID of the catalog entry. You can also use an ExternalID or an Alias of the catalog entry.
	ValueCatalogEntryId *string `json:"value_catalog_entry_id,omitempty"`

	// ValueLink If the custom field type is 'link', this will contain the value assigned.
	ValueLink *string `json:"value_link,omitempty"`

	// ValueNumeric If the custom field type is 'numeric', this will contain the value assigned.
	ValueNumeric *string `json:"value_numeric,omitempty"`

	// ValueOptionId ID of the custom field option
	ValueOptionId *string `json:"value_option_id,omitempty"`

	// ValueText If the custom field type is 'text', this will contain the value assigned.
	ValueText *string `json:"value_text,omitempty"`

	// ValueTimestamp Deprecated: please use incident timestamp values instead
	ValueTimestamp *string `json:"value_timestamp,omitempty"`
}

// CustomFieldValueV1 defines model for CustomFieldValueV1.
type CustomFieldValueV1 struct {
	ValueCatalogEntry *EmbeddedCatalogEntryV1 `json:"value_catalog_entry,omitempty"`

	// ValueLink If the custom field type is 'link', this will contain the value assigned.
	ValueLink *string `json:"value_link,omitempty"`

	// ValueNumeric If the custom field type is 'numeric', this will contain the value assigned.
	ValueNumeric *string              `json:"value_numeric,omitempty"`
	ValueOption  *CustomFieldOptionV1 `json:"value_option,omitempty"`

	// ValueText If the custom field type is 'text', this will contain the value assigned.
	ValueText *string `json:"value_text,omitempty"`
}

// EditRequestBody defines model for EditRequestBody.
type EditRequestBody struct {
	Incident IncidentEditPayloadV2 `json:"incident"`

	// NotifyIncidentChannel Should we send Slack channel notifications to inform responders of this update? Note that this won't work if the Slack channel has already been archived.
	NotifyIncidentChannel bool `json:"notify_incident_channel"`
}

// EmbeddedCatalogEntryV1 defines model for EmbeddedCatalogEntryV1.
type EmbeddedCatalogEntryV1 struct {
	// Aliases Optional aliases that can be used to reference this entry
	Aliases *[]string `json:"aliases,omitempty"`

	// ExternalId An optional alternative ID for this entry, which is ensured to be unique for the type
	ExternalId *string `json:"external_id,omitempty"`

	// Id ID of this catalog entry
	Id string `json:"id"`

	// Name Name is the human readable name of this entry
	Name string `json:"name"`
}

// EngineParamBindingPayloadV2 defines model for EngineParamBindingPayloadV2.
type EngineParamBindingPayloadV2 struct {
	// ArrayValue If set, this is the array value of the step parameter
	ArrayValue *[]EngineParamBindingValuePayloadV2 `json:"array_value,omitempty"`
	Value      *EngineParamBindingValuePayloadV2   `json:"value,omitempty"`
}

// EngineParamBindingV2 defines model for EngineParamBindingV2.
type EngineParamBindingV2 struct {
	// ArrayValue If array_value is set, this helps render the values
	ArrayValue *[]EngineParamBindingValueV2 `json:"array_value,omitempty"`
	Value      *EngineParamBindingValueV2   `json:"value,omitempty"`
}

// EngineParamBindingV3 defines model for EngineParamBindingV3.
type EngineParamBindingV3 struct {
	// ArrayValue If array_value is set, this helps render the values
	ArrayValue *[]EngineParamBindingValueV3 `json:"array_value,omitempty"`
	Value      *EngineParamBindingValueV3   `json:"value,omitempty"`
}

// EngineParamBindingValuePayloadV2 defines model for EngineParamBindingValuePayloadV2.
type EngineParamBindingValuePayloadV2 struct {
	// Literal If set, this is the literal value of the step parameter
	Literal *string `json:"literal,omitempty"`

	// Reference If set, this is the reference into the trigger scope that is the value of this parameter
	Reference *string `json:"reference,omitempty"`
}

// EngineParamBindingValueV2 defines model for EngineParamBindingValueV2.
type EngineParamBindingValueV2 struct {
	// Label Human readable label to be displayed for user to select
	Label string `json:"label"`

	// Literal If set, this is the literal value of the step parameter
	Literal *string `json:"literal,omitempty"`

	// Reference If set, this is the reference into the trigger scope that is the value of this parameter
	Reference *string `json:"reference,omitempty"`
}

// EngineParamBindingValueV3 defines model for EngineParamBindingValueV3.
type EngineParamBindingValueV3 struct {
	// Label Human readable label to be displayed for user to select
	Label string `json:"label"`

	// Literal If set, this is the literal value of the step parameter
	Literal *string `json:"literal,omitempty"`

	// Reference If set, this is the reference into the trigger scope that is the value of this parameter
	Reference *string `json:"reference,omitempty"`
}

// EngineReferenceV2 defines model for EngineReferenceV2.
type EngineReferenceV2 struct {
	// Array If true, the reference can refer to 0 to many items
	Array bool `json:"array"`

	// Key The key of the field this is a reference to
	Key string `json:"key"`

	// Label Human readable label for the field (with context)
	Label string `json:"label"`

	// Type The type of this resource in the engine
	Type string `json:"type"`
}

// EscalationPathNodeIfElsePayloadV2 defines model for EscalationPathNodeIfElsePayloadV2.
type EscalationPathNodeIfElsePayloadV2 struct {
	// Conditions The condition that defines which branch to take
	Conditions *[]ConditionPayloadV2 `json:"conditions,omitempty"`

	// ElsePath The nodes that form the levels if our condition is not met
	ElsePath []EscalationPathNodePayloadV2 `json:"else_path"`

	// ThenPath The nodes that form the levels if our condition is met
	ThenPath []EscalationPathNodePayloadV2 `json:"then_path"`
}

// EscalationPathNodeIfElseV2 defines model for EscalationPathNodeIfElseV2.
type EscalationPathNodeIfElseV2 struct {
	// Conditions The condition that defines which branch to take
	Conditions []ConditionV2 `json:"conditions"`

	// ElsePath The nodes that form the levels if our condition is not met
	ElsePath []EscalationPathNodeV2 `json:"else_path"`

	// ThenPath The nodes that form the levels if our condition is met
	ThenPath []EscalationPathNodeV2 `json:"then_path"`
}

// EscalationPathNodeLevelV2 defines model for EscalationPathNodeLevelV2.
type EscalationPathNodeLevelV2 struct {
	// Targets The targets for this level
	Targets []EscalationPathTargetV2 `json:"targets"`

	// TimeToAckIntervalCondition If the time to ack is relative to a time window, this defines whether we move when the window is active or inactive
	TimeToAckIntervalCondition *EscalationPathNodeLevelV2TimeToAckIntervalCondition `json:"time_to_ack_interval_condition,omitempty"`

	// TimeToAckSeconds How long should we wait for this level to acknowledge before escalating?
	TimeToAckSeconds *int64 `json:"time_to_ack_seconds,omitempty"`

	// TimeToAckWeekdayIntervalConfigId If the time to ack is relative to a time window, this identifies which window it is relative to
	TimeToAckWeekdayIntervalConfigId *string `json:"time_to_ack_weekday_interval_config_id,omitempty"`
}

// EscalationPathNodeLevelV2TimeToAckIntervalCondition If the time to ack is relative to a time window, this defines whether we move when the window is active or inactive
type EscalationPathNodeLevelV2TimeToAckIntervalCondition string

// EscalationPathNodePayloadV2 defines model for EscalationPathNodePayloadV2.
type EscalationPathNodePayloadV2 struct {
	// Id Unique internal ID of the escalation path node
	Id     string                             `json:"id"`
	IfElse *EscalationPathNodeIfElsePayloadV2 `json:"if_else,omitempty"`
	Level  *EscalationPathNodeLevelV2         `json:"level,omitempty"`
	Repeat *EscalationPathNodeRepeatV2        `json:"repeat,omitempty"`

	// Type The type of this node: level or branch
	Type EscalationPathNodePayloadV2Type `json:"type"`
}

// EscalationPathNodePayloadV2Type The type of this node: level or branch
type EscalationPathNodePayloadV2Type string

// EscalationPathNodeRepeatV2 defines model for EscalationPathNodeRepeatV2.
type EscalationPathNodeRepeatV2 struct {
	// RepeatTimes How many times to repeat these steps
	RepeatTimes int64 `json:"repeat_times"`

	// ToNode Which node ID we begin repeating from
	ToNode string `json:"to_node"`
}

// EscalationPathNodeV2 defines model for EscalationPathNodeV2.
type EscalationPathNodeV2 struct {
	// Id Unique internal ID of the escalation path node
	Id     string                      `json:"id"`
	IfElse *EscalationPathNodeIfElseV2 `json:"if_else,omitempty"`
	Level  *EscalationPathNodeLevelV2  `json:"level,omitempty"`
	Repeat *EscalationPathNodeRepeatV2 `json:"repeat,omitempty"`

	// Type The type of this node: level or branch
	Type EscalationPathNodeV2Type `json:"type"`
}

// EscalationPathNodeV2Type The type of this node: level or branch
type EscalationPathNodeV2Type string

// EscalationPathTargetV2 defines model for EscalationPathTargetV2.
type EscalationPathTargetV2 struct {
	// Id Uniquely identifies an entity of this type
	Id string `json:"id"`

	// Type Controls what type of entity this target identifies, such as EscalationPolicy or User
	Type EscalationPathTargetV2Type `json:"type"`

	// Urgency The urgency of this escalation path target
	Urgency EscalationPathTargetV2Urgency `json:"urgency"`
}

// EscalationPathTargetV2Type Controls what type of entity this target identifies, such as EscalationPolicy or User
type EscalationPathTargetV2Type string

// EscalationPathTargetV2Urgency The urgency of this escalation path target
type EscalationPathTargetV2Urgency string

// EscalationPathV2 defines model for EscalationPathV2.
type EscalationPathV2 struct {
	// Id Unique identifier for this escalation path.
	Id string `json:"id"`

	// Name The name of this escalation path, for the user's reference.
	Name string `json:"name"`

	// Path The nodes that form the levels and branches of this escalation path.
	Path []EscalationPathNodeV2 `json:"path"`

	// WorkingHours The working hours for this escalation path.
	WorkingHours *[]WeekdayIntervalConfigV2 `json:"working_hours,omitempty"`
}

// ExpressionBranchPayloadV2 defines model for ExpressionBranchPayloadV2.
type ExpressionBranchPayloadV2 struct {
	// ConditionGroups When one of these condition groups are satisfied, this branch will be evaluated
	ConditionGroups []ConditionGroupPayloadV2   `json:"condition_groups"`
	Result          EngineParamBindingPayloadV2 `json:"result"`
}

// ExpressionBranchV2 defines model for ExpressionBranchV2.
type ExpressionBranchV2 struct {
	// ConditionGroups When one of these condition groups are satisfied, this branch will be evaluated
	ConditionGroups []ConditionGroupV2   `json:"condition_groups"`
	Result          EngineParamBindingV3 `json:"result"`
}

// ExpressionBranchesOptsPayloadV2 defines model for ExpressionBranchesOptsPayloadV2.
type ExpressionBranchesOptsPayloadV2 struct {
	// Branches The branches to apply for this operation
	Branches []ExpressionBranchPayloadV2 `json:"branches"`
	Returns  ReturnsMetaV2               `json:"returns"`
}

// ExpressionBranchesOptsV2 defines model for ExpressionBranchesOptsV2.
type ExpressionBranchesOptsV2 struct {
	// Branches The branches to apply for this operation
	Branches []ExpressionBranchV2 `json:"branches"`
	Returns  ReturnsMetaV2        `json:"returns"`
}

// ExpressionElseBranchPayloadV2 defines model for ExpressionElseBranchPayloadV2.
type ExpressionElseBranchPayloadV2 struct {
	Result EngineParamBindingPayloadV2 `json:"result"`
}

// ExpressionElseBranchV2 defines model for ExpressionElseBranchV2.
type ExpressionElseBranchV2 struct {
	Result EngineParamBindingV3 `json:"result"`
}

// ExpressionFilterOptsPayloadV2 defines model for ExpressionFilterOptsPayloadV2.
type ExpressionFilterOptsPayloadV2 struct {
	// ConditionGroups The condition groups to apply in this filter. Only one group needs to be satisfied for the filter to pass.
	ConditionGroups []ConditionGroupPayloadV2 `json:"condition_groups"`
}

// ExpressionFilterOptsV2 defines model for ExpressionFilterOptsV2.
type ExpressionFilterOptsV2 struct {
	// ConditionGroups The condition groups to apply in this filter. Only one group needs to be satisfied for the filter to pass.
	ConditionGroups []ConditionGroupV2 `json:"condition_groups"`
}

// ExpressionNavigateOptsPayloadV2 defines model for ExpressionNavigateOptsPayloadV2.
type ExpressionNavigateOptsPayloadV2 struct {
	// Reference The reference that you want to navigate to
	Reference string `json:"reference"`
}

// ExpressionNavigateOptsV2 defines model for ExpressionNavigateOptsV2.
type ExpressionNavigateOptsV2 struct {
	// Reference The reference within the scope to navigate to
	Reference string `json:"reference"`

	// ReferenceLabel The name of the reference to navigate to
	ReferenceLabel string `json:"reference_label"`
}

// ExpressionOperationPayloadV2 defines model for ExpressionOperationPayloadV2.
type ExpressionOperationPayloadV2 struct {
	Branches *ExpressionBranchesOptsPayloadV2 `json:"branches,omitempty"`
	Filter   *ExpressionFilterOptsPayloadV2   `json:"filter,omitempty"`
	Navigate *ExpressionNavigateOptsPayloadV2 `json:"navigate,omitempty"`

	// OperationType The type of the operation
	OperationType ExpressionOperationPayloadV2OperationType `json:"operation_type"`
	Parse         *ExpressionParseOptsV2                    `json:"parse,omitempty"`
}

// ExpressionOperationPayloadV2OperationType The type of the operation
type ExpressionOperationPayloadV2OperationType string

// ExpressionOperationV2 defines model for ExpressionOperationV2.
type ExpressionOperationV2 struct {
	Branches *ExpressionBranchesOptsV2 `json:"branches,omitempty"`
	Filter   *ExpressionFilterOptsV2   `json:"filter,omitempty"`
	Navigate *ExpressionNavigateOptsV2 `json:"navigate,omitempty"`

	// OperationType The type of the operation
	OperationType ExpressionOperationV2OperationType `json:"operation_type"`
	Parse         *ExpressionParseOptsV2             `json:"parse,omitempty"`
	Returns       ReturnsMetaV2                      `json:"returns"`
}

// ExpressionOperationV2OperationType The type of the operation
type ExpressionOperationV2OperationType string

// ExpressionParseOptsV2 defines model for ExpressionParseOptsV2.
type ExpressionParseOptsV2 struct {
	Returns ReturnsMetaV2 `json:"returns"`

	// Source Source expression that is evaluated to a result
	Source string `json:"source"`
}

// ExpressionPayloadV2 defines model for ExpressionPayloadV2.
type ExpressionPayloadV2 struct {
	ElseBranch *ExpressionElseBranchPayloadV2 `json:"else_branch,omitempty"`

	// Label The human readable label of the expression
	Label      string                         `json:"label"`
	Operations []ExpressionOperationPayloadV2 `json:"operations"`

	// Reference A short ID that can be used to reference the expression
	Reference string `json:"reference"`

	// RootReference The root reference for this expression (i.e. where the expression starts)
	RootReference string `json:"root_reference"`
}

// ExpressionV2 defines model for ExpressionV2.
type ExpressionV2 struct {
	ElseBranch *ExpressionElseBranchV2 `json:"else_branch,omitempty"`

	// Label The human readable label of the expression
	Label      string                  `json:"label"`
	Operations []ExpressionOperationV2 `json:"operations"`

	// Reference A short ID that can be used to reference the expression
	Reference string        `json:"reference"`
	Returns   ReturnsMetaV2 `json:"returns"`

	// RootReference The root reference for this expression (i.e. where the expression starts)
	RootReference string `json:"root_reference"`
}

// ExternalIssueReferenceV1 defines model for ExternalIssueReferenceV1.
type ExternalIssueReferenceV1 struct {
	// IssueName Human readable ID for the issue
	IssueName *string `json:"issue_name,omitempty"`

	// IssuePermalink URL linking directly to the action in the issue tracker
	IssuePermalink *string `json:"issue_permalink,omitempty"`

	// Provider ID of the issue tracker provider
	Provider *ExternalIssueReferenceV1Provider `json:"provider,omitempty"`
}

// ExternalIssueReferenceV1Provider ID of the issue tracker provider
type ExternalIssueReferenceV1Provider string

// ExternalIssueReferenceV2 defines model for ExternalIssueReferenceV2.
type ExternalIssueReferenceV2 struct {
	// IssueName Human readable ID for the issue
	IssueName string `json:"issue_name"`

	// IssuePermalink URL linking directly to the action in the issue tracker
	IssuePermalink string `json:"issue_permalink"`

	// Provider ID of the issue tracker provider
	Provider ExternalIssueReferenceV2Provider `json:"provider"`
}

// ExternalIssueReferenceV2Provider ID of the issue tracker provider
type ExternalIssueReferenceV2Provider string

// ExternalResourceV1 defines model for ExternalResourceV1.
type ExternalResourceV1 struct {
	// ExternalId ID of the resource in the external system
	ExternalId string `json:"external_id"`

	// Permalink URL of the resource
	Permalink string `json:"permalink"`

	// ResourceType E.g. PagerDuty: the external system that holds the resource
	ResourceType ExternalResourceV1ResourceType `json:"resource_type"`

	// Title Title of resource
	Title string `json:"title"`
}

// ExternalResourceV1ResourceType E.g. PagerDuty: the external system that holds the resource
type ExternalResourceV1ResourceType string

// FollowUpPriorityV2 defines model for FollowUpPriorityV2.
type FollowUpPriorityV2 struct {
	// Description Description of the follow-up priority option
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the follow-up priority option
	Id string `json:"id"`

	// Name Name of the follow-up priority option
	Name string `json:"name"`

	// Rank Rank is used to order the follow-up priority options correctly
	Rank int64 `json:"rank"`
}

// FollowUpV2 defines model for FollowUpV2.
type FollowUpV2 struct {
	Assignee *UserV1 `json:"assignee,omitempty"`

	// CompletedAt When the follow-up was completed
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// CreatedAt When the follow-up was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the follow-up
	Description            *string                   `json:"description,omitempty"`
	ExternalIssueReference *ExternalIssueReferenceV2 `json:"external_issue_reference,omitempty"`

	// Id Unique identifier for the follow-up
	Id string `json:"id"`

	// IncidentId Unique identifier of the incident the follow-up belongs to
	IncidentId string              `json:"incident_id"`
	Priority   *FollowUpPriorityV2 `json:"priority,omitempty"`

	// Status Status of the follow-up
	Status FollowUpV2Status `json:"status"`

	// Title Title of the follow-up
	Title string `json:"title"`

	// UpdatedAt When the follow-up was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// FollowUpV2Status Status of the follow-up
type FollowUpV2Status string

// IdentityResponseBody defines model for IdentityResponseBody.
type IdentityResponseBody struct {
	Identity IdentityV1 `json:"identity"`
}

// IdentityV1 defines model for IdentityV1.
type IdentityV1 struct {
	// DashboardUrl The dashboard URL for this organisation
	DashboardUrl string `json:"dashboard_url"`

	// Name The name assigned to the current API Key
	Name string `json:"name"`

	// Roles Which roles have been enabled for this key
	Roles []IdentityV1Roles `json:"roles"`
}

// IdentityV1Roles defines model for IdentityV1.Roles.
type IdentityV1Roles string

// IncidentAttachmentV1 defines model for IncidentAttachmentV1.
type IncidentAttachmentV1 struct {
	// Id Unique identifier of this incident membership
	Id string `json:"id"`

	// IncidentId Unique identifier of the incident
	IncidentId string             `json:"incident_id"`
	Resource   ExternalResourceV1 `json:"resource"`
}

// IncidentDurationMetricV2 defines model for IncidentDurationMetricV2.
type IncidentDurationMetricV2 struct {
	// Id Unique ID of this incident duration metric
	Id string `json:"id"`

	// Name Unique name of this duration metric
	Name string `json:"name"`
}

// IncidentDurationMetricWithValueV2 defines model for IncidentDurationMetricWithValueV2.
type IncidentDurationMetricWithValueV2 struct {
	DurationMetric IncidentDurationMetricV2 `json:"duration_metric"`

	// ValueSeconds The calculated durations for this metric
	ValueSeconds *int64 `json:"value_seconds,omitempty"`
}

// IncidentEditPayloadV2 defines model for IncidentEditPayloadV2.
type IncidentEditPayloadV2 struct {
	// CallUrl The call URL attached to this incident
	CallUrl *string `json:"call_url,omitempty"`

	// CustomFieldEntries Set the incident's custom fields to these values
	CustomFieldEntries *[]CustomFieldEntryPayloadV1 `json:"custom_field_entries,omitempty"`

	// IncidentRoleAssignments Assign incident roles to these people
	IncidentRoleAssignments *[]IncidentRoleAssignmentPayloadV2 `json:"incident_role_assignments,omitempty"`

	// IncidentStatusId Incident status to change incident to (you can only change an incident from one active status to another, any other lifecycle changes must be taken via the app.)
	IncidentStatusId *string `json:"incident_status_id,omitempty"`

	// IncidentTimestampValues Assign the incident's timestamps to these values
	IncidentTimestampValues *[]IncidentTimestampValuePayloadV2 `json:"incident_timestamp_values,omitempty"`

	// Name Explanation of the incident
	Name *string `json:"name,omitempty"`

	// SeverityId Severity to change incident to
	SeverityId *string `json:"severity_id,omitempty"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`
}

// IncidentMembership defines model for IncidentMembership.
type IncidentMembership struct {
	// CreatedAt When the membership was created
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier of this incident membership
	Id string `json:"id"`

	// IncidentId Unique identifier of the incident
	IncidentId string `json:"incident_id"`

	// UpdatedAt When the membership was last updated
	UpdatedAt time.Time `json:"updated_at"`
	User      UserV1    `json:"user"`
}

// IncidentRoleAssignmentPayloadV1 defines model for IncidentRoleAssignmentPayloadV1.
type IncidentRoleAssignmentPayloadV1 struct {
	Assignee UserReferencePayloadV1 `json:"assignee"`

	// IncidentRoleId Unique ID of an incident role. Note that the 'reporter' role can only be assigned when creating an incident.
	IncidentRoleId string `json:"incident_role_id"`
}

// IncidentRoleAssignmentPayloadV2 defines model for IncidentRoleAssignmentPayloadV2.
type IncidentRoleAssignmentPayloadV2 struct {
	Assignee *UserReferencePayloadV1 `json:"assignee,omitempty"`

	// IncidentRoleId Unique ID of an incident role
	IncidentRoleId string `json:"incident_role_id"`
}

// IncidentRoleAssignmentV1 defines model for IncidentRoleAssignmentV1.
type IncidentRoleAssignmentV1 struct {
	Assignee *UserV1        `json:"assignee,omitempty"`
	Role     IncidentRoleV1 `json:"role"`
}

// IncidentRoleV1 defines model for IncidentRoleV1.
type IncidentRoleV1 struct {
	// CreatedAt When the role was created
	CreatedAt time.Time `json:"created_at"`

	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Id Unique identifier for the role
	Id string `json:"id"`

	// Instructions Provided to whoever is nominated for the role. Note that this will be empty for the 'reporter' role.
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// Required DEPRECATED: this will always be false.
	Required *bool `json:"required,omitempty"`

	// RoleType Type of incident role
	RoleType IncidentRoleV1RoleType `json:"role_type"`

	// Shortform Short human readable name for Slack. Note that this will be empty for the 'reporter' role.
	Shortform string `json:"shortform"`

	// UpdatedAt When the role was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// IncidentRoleV1RoleType Type of incident role
type IncidentRoleV1RoleType string

// IncidentRoleV2 defines model for IncidentRoleV2.
type IncidentRoleV2 struct {
	// CreatedAt When the role was created
	CreatedAt time.Time `json:"created_at"`

	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Id Unique identifier for the role
	Id string `json:"id"`

	// Instructions Provided to whoever is nominated for the role. Note that this will be empty for the 'reporter' role.
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// RoleType Type of incident role
	RoleType IncidentRoleV2RoleType `json:"role_type"`

	// Shortform Short human readable name for Slack. Note that this will be empty for the 'reporter' role.
	Shortform string `json:"shortform"`

	// UpdatedAt When the role was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// IncidentRoleV2RoleType Type of incident role
type IncidentRoleV2RoleType string

// IncidentStatusV1 defines model for IncidentStatusV1.
type IncidentStatusV1 struct {
	// Category What category of status it is. All statuses apart from live (renamed in the app to Active) and learning (renamed in the app to Post-incident) are managed by incident.io and cannot be configured
	Category  IncidentStatusV1Category `json:"category"`
	CreatedAt time.Time                `json:"created_at"`

	// Description Rich text description of the incident status
	Description string `json:"description"`

	// Id Unique ID of this incident status
	Id string `json:"id"`

	// Name Unique name of this status
	Name string `json:"name"`

	// Rank Order of this incident status
	Rank      int64     `json:"rank"`
	UpdatedAt time.Time `json:"updated_at"`
}

// IncidentStatusV1Category What category of status it is. All statuses apart from live (renamed in the app to Active) and learning (renamed in the app to Post-incident) are managed by incident.io and cannot be configured
type IncidentStatusV1Category string

// IncidentTimestampV1 defines model for IncidentTimestampV1.
type IncidentTimestampV1 struct {
	// LastOccurredAt When this last occurred, if it did
	LastOccurredAt *time.Time `json:"last_occurred_at,omitempty"`

	// Name Name of the lifecycle event
	Name string `json:"name"`
}

// IncidentTimestampV2 defines model for IncidentTimestampV2.
type IncidentTimestampV2 struct {
	// Id Unique ID of this incident timestamp
	Id string `json:"id"`

	// Name Unique name of this timestamp
	Name string `json:"name"`

	// Rank Order in which this timestamp should be shown
	Rank int64 `json:"rank"`
}

// IncidentTimestampValuePayloadV2 defines model for IncidentTimestampValuePayloadV2.
type IncidentTimestampValuePayloadV2 struct {
	// IncidentTimestampId The id of the incident timestamp that this incident timestamp value is associated with.
	IncidentTimestampId string `json:"incident_timestamp_id"`

	// Value The current value of this timestamp, for this incident
	Value *time.Time `json:"value,omitempty"`
}

// IncidentTimestampValueV2 defines model for IncidentTimestampValueV2.
type IncidentTimestampValueV2 struct {
	// Value The current value of this timestamp, for this incident
	Value *time.Time `json:"value,omitempty"`
}

// IncidentTimestampWithValueV2 defines model for IncidentTimestampWithValueV2.
type IncidentTimestampWithValueV2 struct {
	IncidentTimestamp IncidentTimestampV2       `json:"incident_timestamp"`
	Value             *IncidentTimestampValueV2 `json:"value,omitempty"`
}

// IncidentTypeV1 defines model for IncidentTypeV1.
type IncidentTypeV1 struct {
	// CreateInTriage Whether incidents of this must always, or can optionally, be created in triage
	CreateInTriage IncidentTypeV1CreateInTriage `json:"create_in_triage"`

	// CreatedAt When this resource was created
	CreatedAt time.Time `json:"created_at"`

	// Description What is this incident type for?
	Description string `json:"description"`

	// Id Unique identifier for this Incident Type
	Id string `json:"id"`

	// IsDefault The default Incident Type is used when no other type is explicitly specified
	IsDefault bool `json:"is_default"`

	// Name The name of this Incident Type
	Name string `json:"name"`

	// PrivateIncidentsOnly Should all incidents created with this Incident Type be private?
	PrivateIncidentsOnly bool `json:"private_incidents_only"`

	// UpdatedAt When this resource was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// IncidentTypeV1CreateInTriage Whether incidents of this must always, or can optionally, be created in triage
type IncidentTypeV1CreateInTriage string

// IncidentUpdateV2 defines model for IncidentUpdateV2.
type IncidentUpdateV2 struct {
	// CreatedAt When the update was created
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for this incident update
	Id string `json:"id"`

	// IncidentId The incident this update relates to
	IncidentId string `json:"incident_id"`

	// MergedIntoIncidentId The ID of the incident that this incident was merged into, if it was merged in to another incident
	MergedIntoIncidentId *string `json:"merged_into_incident_id,omitempty"`

	// Message Message that explains the context behind the update
	Message           *string          `json:"message,omitempty"`
	NewIncidentStatus IncidentStatusV1 `json:"new_incident_status"`
	NewSeverity       *SeverityV2      `json:"new_severity,omitempty"`
	Updater           ActorV2          `json:"updater"`
}

// IncidentV1 defines model for IncidentV1.
type IncidentV1 struct {
	// CallUrl The call URL attached to this incident
	CallUrl *string `json:"call_url,omitempty"`

	// CreatedAt When the incident was created
	CreatedAt time.Time `json:"created_at"`
	Creator   ActorV2   `json:"creator"`

	// CustomFieldEntries Custom field entries for this incident
	CustomFieldEntries []CustomFieldEntryV1 `json:"custom_field_entries"`

	// Id Unique identifier for the incident
	Id string `json:"id"`

	// IncidentRoleAssignments A list of who is assigned to each role for this incident
	IncidentRoleAssignments []IncidentRoleAssignmentV1 `json:"incident_role_assignments"`
	IncidentType            *IncidentTypeV1            `json:"incident_type,omitempty"`

	// Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
	Mode IncidentV1Mode `json:"mode"`

	// Name Explanation of the incident
	Name string `json:"name"`

	// Permalink A permanent link to the homepage for this incident
	Permalink *string `json:"permalink,omitempty"`

	// PostmortemDocumentUrl Description of the incident
	PostmortemDocumentUrl *string `json:"postmortem_document_url,omitempty"`

	// Reference Reference to this incident, as displayed across the product
	Reference string      `json:"reference"`
	Severity  *SeverityV2 `json:"severity,omitempty"`

	// SlackChannelId ID of the Slack channel in the organisation Slack workspace. Note that the channel is sometimes created asynchronously, so may not be present when the incident is just created.
	SlackChannelId string `json:"slack_channel_id"`

	// SlackChannelName Name of the slack channel
	SlackChannelName *string `json:"slack_channel_name,omitempty"`

	// SlackTeamId ID of the Slack team / workspace. This is only required if you are using a Slack Enterprise Grid with multiple teams.
	SlackTeamId string `json:"slack_team_id"`

	// Status Current status of the incident
	Status IncidentV1Status `json:"status"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`

	// Timestamps Incident lifecycle events and when they last occurred
	Timestamps *[]IncidentTimestampV1 `json:"timestamps,omitempty"`

	// UpdatedAt When the incident was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
	Visibility IncidentV1Visibility `json:"visibility"`
}

// IncidentV1Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
type IncidentV1Mode string

// IncidentV1Status Current status of the incident
type IncidentV1Status string

// IncidentV1Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
type IncidentV1Visibility string

// IncidentV2 defines model for IncidentV2.
type IncidentV2 struct {
	// CallUrl The call URL attached to this incident
	CallUrl *string `json:"call_url,omitempty"`

	// CreatedAt When the incident was created
	CreatedAt time.Time `json:"created_at"`
	Creator   ActorV2   `json:"creator"`

	// CustomFieldEntries Custom field entries for this incident
	CustomFieldEntries []CustomFieldEntryV1 `json:"custom_field_entries"`

	// DurationMetrics Incident duration metrics and their measurements for this incident
	DurationMetrics        *[]IncidentDurationMetricWithValueV2 `json:"duration_metrics,omitempty"`
	ExternalIssueReference *ExternalIssueReferenceV2            `json:"external_issue_reference,omitempty"`

	// Id Unique identifier for the incident
	Id string `json:"id"`

	// IncidentRoleAssignments A list of who is assigned to each role for this incident
	IncidentRoleAssignments []IncidentRoleAssignmentV1 `json:"incident_role_assignments"`
	IncidentStatus          IncidentStatusV1           `json:"incident_status"`

	// IncidentTimestampValues Incident lifecycle events and when they occurred
	IncidentTimestampValues *[]IncidentTimestampWithValueV2 `json:"incident_timestamp_values,omitempty"`
	IncidentType            *IncidentTypeV1                 `json:"incident_type,omitempty"`

	// Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
	Mode IncidentV2Mode `json:"mode"`

	// Name Explanation of the incident
	Name string `json:"name"`

	// Permalink A permanent link to the homepage for this incident
	Permalink *string `json:"permalink,omitempty"`

	// PostmortemDocumentUrl Description of the incident
	PostmortemDocumentUrl *string `json:"postmortem_document_url,omitempty"`

	// Reference Reference to this incident, as displayed across the product
	Reference string      `json:"reference"`
	Severity  *SeverityV2 `json:"severity,omitempty"`

	// SlackChannelId ID of the Slack channel in the organisation Slack workspace. Note that the channel is sometimes created asynchronously, so may not be present when the incident is just created.
	SlackChannelId string `json:"slack_channel_id"`

	// SlackChannelName Name of the slack channel
	SlackChannelName *string `json:"slack_channel_name,omitempty"`

	// SlackTeamId ID of the Slack team / workspace. This is only required if you are using a Slack Enterprise Grid with multiple teams.
	SlackTeamId string `json:"slack_team_id"`

	// Summary Detailed description of the incident
	Summary *string `json:"summary,omitempty"`

	// UpdatedAt When the incident was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
	Visibility IncidentV2Visibility `json:"visibility"`

	// WorkloadMinutesLate Amount of time spent on the incident in late hours
	WorkloadMinutesLate *float64 `json:"workload_minutes_late,omitempty"`

	// WorkloadMinutesSleeping Amount of time spent on the incident in sleeping hours
	WorkloadMinutesSleeping *float64 `json:"workload_minutes_sleeping,omitempty"`

	// WorkloadMinutesTotal Amount of time spent on the incident in total
	WorkloadMinutesTotal *float64 `json:"workload_minutes_total,omitempty"`

	// WorkloadMinutesWorking Amount of time spent on the incident in working hours
	WorkloadMinutesWorking *float64 `json:"workload_minutes_working,omitempty"`
}

// IncidentV2Mode Whether the incident is real, a test, a tutorial, or importing as a retrospective incident
type IncidentV2Mode string

// IncidentV2Visibility Whether the incident should be open to anyone in your Slack workspace (public), or invite-only (private). For more information on Private Incidents see our [help centre](https://help.incident.io/en/articles/5947963-can-we-mark-incidents-as-sensitive-and-restrict-access).
type IncidentV2Visibility string

// ListEntriesResponseBody defines model for ListEntriesResponseBody.
type ListEntriesResponseBody struct {
	CatalogEntries []CatalogEntryV2     `json:"catalog_entries"`
	CatalogType    CatalogTypeV2        `json:"catalog_type"`
	PaginationMeta PaginationMetaResult `json:"pagination_meta"`
}

// ListResourcesResponseBody defines model for ListResourcesResponseBody.
type ListResourcesResponseBody struct {
	Resources []CatalogResourceV2 `json:"resources"`
}

// ListResponseBody defines model for ListResponseBody.
type ListResponseBody struct {
	Actions []ActionV1 `json:"actions"`
}

// ListResponseBody10 defines model for ListResponseBody10.
type ListResponseBody10 struct {
	IncidentStatuses []IncidentStatusV1 `json:"incident_statuses"`
}

// ListResponseBody11 defines model for ListResponseBody11.
type ListResponseBody11 struct {
	IncidentTimestamps []IncidentTimestampV2 `json:"incident_timestamps"`
}

// ListResponseBody12 defines model for ListResponseBody12.
type ListResponseBody12 struct {
	IncidentTypes []IncidentTypeV1 `json:"incident_types"`
}

// ListResponseBody13 defines model for ListResponseBody13.
type ListResponseBody13 struct {
	IncidentUpdates []IncidentUpdateV2    `json:"incident_updates"`
	PaginationMeta  *PaginationMetaResult `json:"pagination_meta,omitempty"`
}

// ListResponseBody14 defines model for ListResponseBody14.
type ListResponseBody14 struct {
	Incidents      []IncidentV1                   `json:"incidents"`
	PaginationMeta *PaginationMetaResultWithTotal `json:"pagination_meta,omitempty"`
}

// ListResponseBody15 defines model for ListResponseBody15.
type ListResponseBody15 struct {
	Incidents      []IncidentV2                   `json:"incidents"`
	PaginationMeta *PaginationMetaResultWithTotal `json:"pagination_meta,omitempty"`
}

// ListResponseBody16 defines model for ListResponseBody16.
type ListResponseBody16 struct {
	PaginationMeta *PaginationMetaResultWithTotal `json:"pagination_meta,omitempty"`
	Schedules      []ScheduleV2                   `json:"schedules"`
}

// ListResponseBody17 defines model for ListResponseBody17.
type ListResponseBody17 struct {
	Severities []SeverityV2 `json:"severities"`
}

// ListResponseBody18 defines model for ListResponseBody18.
type ListResponseBody18 struct {
	PaginationMeta PaginationMetaResult `json:"pagination_meta"`
	Users          []UserWithRolesV2    `json:"users"`
}

// ListResponseBody2 defines model for ListResponseBody2.
type ListResponseBody2 struct {
	Actions []ActionV2 `json:"actions"`
}

// ListResponseBody3 defines model for ListResponseBody3.
type ListResponseBody3 struct {
	CustomFieldOptions []CustomFieldOptionV1 `json:"custom_field_options"`
	PaginationMeta     PaginationMetaResult  `json:"pagination_meta"`
}

// ListResponseBody4 defines model for ListResponseBody4.
type ListResponseBody4 struct {
	CustomFields []CustomFieldV1 `json:"custom_fields"`
}

// ListResponseBody5 defines model for ListResponseBody5.
type ListResponseBody5 struct {
	CustomFields []CustomFieldV2 `json:"custom_fields"`
}

// ListResponseBody6 defines model for ListResponseBody6.
type ListResponseBody6 struct {
	FollowUps []FollowUpV2 `json:"follow_ups"`
}

// ListResponseBody7 defines model for ListResponseBody7.
type ListResponseBody7 struct {
	IncidentAttachments []IncidentAttachmentV1 `json:"incident_attachments"`
}

// ListResponseBody8 defines model for ListResponseBody8.
type ListResponseBody8 struct {
	IncidentRoles []IncidentRoleV1 `json:"incident_roles"`
}

// ListResponseBody9 defines model for ListResponseBody9.
type ListResponseBody9 struct {
	IncidentRoles []IncidentRoleV2 `json:"incident_roles"`
}

// ListScheduleEntriesResponseBody defines model for ListScheduleEntriesResponseBody.
type ListScheduleEntriesResponseBody struct {
	PaginationMeta  *AfterPaginationMetaResultV2 `json:"pagination_meta,omitempty"`
	ScheduleEntries ScheduleEntriesListPayloadV2 `json:"schedule_entries"`
}

// ListTypesResponseBody defines model for ListTypesResponseBody.
type ListTypesResponseBody struct {
	CatalogTypes []CatalogTypeV2 `json:"catalog_types"`
}

// ListWorkflowsResponseBody defines model for ListWorkflowsResponseBody.
type ListWorkflowsResponseBody struct {
	Workflows []WorkflowSlim `json:"workflows"`
}

// ManagedResourceV2 defines model for ManagedResourceV2.
type ManagedResourceV2 struct {
	// Annotations Annotations that track metadata about this resource
	Annotations map[string]string `json:"annotations"`

	// ManagedBy How is this resource managed
	ManagedBy ManagedResourceV2ManagedBy `json:"managed_by"`

	// ResourceId The ID of the related resource
	ResourceId string `json:"resource_id"`

	// ResourceType The type of the related resource
	ResourceType ManagedResourceV2ResourceType `json:"resource_type"`

	// SourceUrl The url of the external repository where this resource is managed (if there is one)
	SourceUrl *string `json:"source_url,omitempty"`
}

// ManagedResourceV2ManagedBy How is this resource managed
type ManagedResourceV2ManagedBy string

// ManagedResourceV2ResourceType The type of the related resource
type ManagedResourceV2ResourceType string

// ManagementMetaV2 defines model for ManagementMetaV2.
type ManagementMetaV2 struct {
	// Annotations Annotations that track metadata about this resource
	Annotations map[string]string `json:"annotations"`

	// ManagedBy How is this resource managed
	ManagedBy ManagementMetaV2ManagedBy `json:"managed_by"`

	// SourceUrl The url of the external repository where this resource is managed (if there is one)
	SourceUrl *string `json:"source_url,omitempty"`
}

// ManagementMetaV2ManagedBy How is this resource managed
type ManagementMetaV2ManagedBy string

// PaginationMetaResult defines model for PaginationMetaResult.
type PaginationMetaResult struct {
	// After If provided, pass this as the 'after' param to load the next page
	After *string `json:"after,omitempty"`

	// PageSize What was the maximum number of results requested
	PageSize int64 `json:"page_size"`
}

// PaginationMetaResultWithTotal defines model for PaginationMetaResultWithTotal.
type PaginationMetaResultWithTotal struct {
	// After If provided, pass this as the 'after' param to load the next page
	After *string `json:"after,omitempty"`

	// PageSize What was the maximum number of results requested
	PageSize int64 `json:"page_size"`

	// TotalRecordCount How many matching records were there in total, if known
	TotalRecordCount *int64 `json:"total_record_count,omitempty"`
}

// RBACRoleV2 defines model for RBACRoleV2.
type RBACRoleV2 struct {
	// Description Description of the purpose for the RBAC role
	Description *string `json:"description,omitempty"`

	// Id Unique identifier of the RBAC role
	Id string `json:"id"`

	// Name Name of the RBAC role
	Name string `json:"name"`

	// Slug Unique human-readable slug for the RBAC role
	Slug string `json:"slug"`
}

// RetrospectiveIncidentOptionsV2 defines model for RetrospectiveIncidentOptionsV2.
type RetrospectiveIncidentOptionsV2 struct {
	// PostmortemDocumentUrl If the incident mode is 'retrospective', pass the URL of the postmortem to attach it to the incident
	PostmortemDocumentUrl *string `json:"postmortem_document_url,omitempty"`

	// SlackChannelId If the incident mode is 'retrospective', pass the ID of a Slack channel in your workspace to attach the incident to an existing channel, rather than creating a new one
	SlackChannelId *string `json:"slack_channel_id,omitempty"`
}

// ReturnsMetaV2 defines model for ReturnsMetaV2.
type ReturnsMetaV2 struct {
	// Array Whether the return value should be single or multi-value
	Array bool `json:"array"`

	// Type Expected return type of this expression (what to try casting the result to)
	Type string `json:"type"`
}

// ScheduleConfigCreatePayloadV2 defines model for ScheduleConfigCreatePayloadV2.
type ScheduleConfigCreatePayloadV2 struct {
	Rotations *[]ScheduleRotationCreatePayloadV2 `json:"rotations,omitempty"`
}

// ScheduleConfigUpdatePayloadV2 defines model for ScheduleConfigUpdatePayloadV2.
type ScheduleConfigUpdatePayloadV2 struct {
	Rotations *[]ScheduleRotationUpdatePayloadV2 `json:"rotations,omitempty"`
}

// ScheduleConfigV2 defines model for ScheduleConfigV2.
type ScheduleConfigV2 struct {
	// Rotations Rotas in this schedule
	Rotations []ScheduleRotationV2 `json:"rotations"`
}

// ScheduleCreatePayloadV2 defines model for ScheduleCreatePayloadV2.
type ScheduleCreatePayloadV2 struct {
	// Annotations Annotations that can track metadata about the schedule
	Annotations *map[string]string             `json:"annotations,omitempty"`
	Config      *ScheduleConfigCreatePayloadV2 `json:"config,omitempty"`

	// Name Name of the schedule
	Name *string `json:"name,omitempty"`

	// Timezone Timezone of the schedule
	Timezone *string `json:"timezone,omitempty"`
}

// ScheduleEntriesListPayloadV2 defines model for ScheduleEntriesListPayloadV2.
type ScheduleEntriesListPayloadV2 struct {
	Final     []ScheduleEntryV2 `json:"final"`
	Overrides []ScheduleEntryV2 `json:"overrides"`
	Scheduled []ScheduleEntryV2 `json:"scheduled"`
}

// ScheduleEntryV2 defines model for ScheduleEntryV2.
type ScheduleEntryV2 struct {
	EndAt time.Time `json:"end_at"`

	// EntryId Unique identifier of the schedule entry
	EntryId *string `json:"entry_id,omitempty"`

	// Fingerprint A unique identifier for this entry, used to determine a unique shift
	Fingerprint *string `json:"fingerprint,omitempty"`

	// LayerId If present, the layer this entry applies to on the rota
	LayerId *string `json:"layer_id,omitempty"`

	// RotationId If present, the rotation this entry applies to on the schedule
	RotationId *string   `json:"rotation_id,omitempty"`
	StartAt    time.Time `json:"start_at"`
	User       *UserV1   `json:"user,omitempty"`
}

// ScheduleLayerCreatePayloadV2 defines model for ScheduleLayerCreatePayloadV2.
type ScheduleLayerCreatePayloadV2 struct {
	// Id Unique identifier of the layer
	Id *string `json:"id,omitempty"`

	// Name Name of the layer
	Name string `json:"name"`
}

// ScheduleLayerV2 defines model for ScheduleLayerV2.
type ScheduleLayerV2 struct {
	// Id Unique identifier of the layer
	Id *string `json:"id,omitempty"`

	// Name Name of the layer
	Name *string `json:"name,omitempty"`
}

// ScheduleRotationCreatePayloadV2 defines model for ScheduleRotationCreatePayloadV2.
type ScheduleRotationCreatePayloadV2 struct {
	EffectiveFrom   *time.Time                    `json:"effective_from,omitempty"`
	HandoverStartAt *time.Time                    `json:"handover_start_at,omitempty"`
	Handovers       *[]ScheduleRotationHandoverV2 `json:"handovers,omitempty"`

	// Id Unique identifier of the rotation
	Id     *string                         `json:"id,omitempty"`
	Layers *[]ScheduleLayerCreatePayloadV2 `json:"layers,omitempty"`

	// Name Name of the rotation
	Name            string                    `json:"name"`
	Users           *[]UserReferencePayloadV1 `json:"users,omitempty"`
	WorkingInterval *[]WeekdayIntervalV2      `json:"working_interval,omitempty"`
}

// ScheduleRotationHandoverV2 defines model for ScheduleRotationHandoverV2.
type ScheduleRotationHandoverV2 struct {
	Interval     *int64                                  `json:"interval,omitempty"`
	IntervalType *ScheduleRotationHandoverV2IntervalType `json:"interval_type,omitempty"`
}

// ScheduleRotationHandoverV2IntervalType defines model for ScheduleRotationHandoverV2.IntervalType.
type ScheduleRotationHandoverV2IntervalType string

// ScheduleRotationUpdatePayloadV2 defines model for ScheduleRotationUpdatePayloadV2.
type ScheduleRotationUpdatePayloadV2 struct {
	EffectiveFrom   *time.Time                    `json:"effective_from,omitempty"`
	HandoverStartAt *time.Time                    `json:"handover_start_at,omitempty"`
	Handovers       *[]ScheduleRotationHandoverV2 `json:"handovers,omitempty"`

	// Id Unique identifier of the rotation
	Id     *string            `json:"id,omitempty"`
	Layers *[]ScheduleLayerV2 `json:"layers,omitempty"`

	// Name Name of the rotation
	Name            *string                                           `json:"name,omitempty"`
	Users           *[]UserReferencePayloadV1                         `json:"users,omitempty"`
	WorkingInterval *[]ScheduleRotationWorkingIntervalUpdatePayloadV2 `json:"working_interval,omitempty"`
}

// ScheduleRotationV2 defines model for ScheduleRotationV2.
type ScheduleRotationV2 struct {
	// EffectiveFrom When this rotation config will be effective from
	EffectiveFrom *time.Time `json:"effective_from,omitempty"`

	// HandoverStartAt Defines the next moment we'll trigger a handover
	HandoverStartAt time.Time `json:"handover_start_at"`

	// Handovers Defines the handover intervals for this rota, in order they should apply
	Handovers []ScheduleRotationHandoverV2 `json:"handovers"`

	// Id Unique internal ID of the rotation
	Id string `json:"id"`

	// Layers Controls how many people are on-call concurrently
	Layers []ScheduleLayerV2 `json:"layers"`

	// Name Human readable name synced from external provider
	Name            string               `json:"name"`
	Users           *[]UserV1            `json:"users,omitempty"`
	WorkingInterval *[]WeekdayIntervalV2 `json:"working_interval,omitempty"`
}

// ScheduleRotationWorkingIntervalUpdatePayloadV2 defines model for ScheduleRotationWorkingIntervalUpdatePayloadV2.
type ScheduleRotationWorkingIntervalUpdatePayloadV2 struct {
	// EndTime End time of the interval, in 24hr format
	EndTime *string `json:"end_time,omitempty"`

	// StartTime Start time of the interval, in 24hr format
	StartTime *string `json:"start_time,omitempty"`

	// Weekday Weekday this interval applies to
	Weekday *ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday `json:"weekday,omitempty"`
}

// ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday Weekday this interval applies to
type ScheduleRotationWorkingIntervalUpdatePayloadV2Weekday string

// ScheduleUpdatePayloadV2 defines model for ScheduleUpdatePayloadV2.
type ScheduleUpdatePayloadV2 struct {
	// Annotations Annotations that can track metadata about the schedule
	Annotations *map[string]string             `json:"annotations,omitempty"`
	Config      *ScheduleConfigUpdatePayloadV2 `json:"config,omitempty"`

	// Name Name of the schedule
	Name *string `json:"name,omitempty"`

	// Timezone Timezone of the schedule
	Timezone *string `json:"timezone,omitempty"`
}

// ScheduleV2 defines model for ScheduleV2.
type ScheduleV2 struct {
	// Annotations Annotations that track metadata about this resource
	Annotations map[string]string `json:"annotations"`
	Config      *ScheduleConfigV2 `json:"config,omitempty"`
	CreatedAt   time.Time         `json:"created_at"`

	// CurrentShifts Shifts that are on-going for this schedule, if a native schedule
	CurrentShifts *[]ScheduleEntryV2 `json:"current_shifts,omitempty"`

	// Id Unique internal ID of the schedule
	Id string `json:"id"`

	// Name Human readable name synced from external provider
	Name string `json:"name"`

	// Timezone Timezone of the schedule, as interpreted at the point of generating the report
	Timezone  string    `json:"timezone"`
	UpdatedAt time.Time `json:"updated_at"`
}

// SeverityV2 defines model for SeverityV2.
type SeverityV2 struct {
	// CreatedAt When the action was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the severity
	Description string `json:"description"`

	// Id Unique identifier of the severity
	Id string `json:"id"`

	// Name Human readable name of the severity
	Name string `json:"name"`

	// Rank Rank to help sort severities (lower numbers are less severe)
	Rank int64 `json:"rank"`

	// UpdatedAt When the action was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// ShowEntryResponseBody defines model for ShowEntryResponseBody.
type ShowEntryResponseBody struct {
	CatalogEntry CatalogEntryV2 `json:"catalog_entry"`
	CatalogType  CatalogTypeV2  `json:"catalog_type"`
}

// ShowResponseBody defines model for ShowResponseBody.
type ShowResponseBody struct {
	Action ActionV1 `json:"action"`
}

// ShowResponseBody10 defines model for ShowResponseBody10.
type ShowResponseBody10 struct {
	IncidentTimestamp IncidentTimestampV2 `json:"incident_timestamp"`
}

// ShowResponseBody11 defines model for ShowResponseBody11.
type ShowResponseBody11 struct {
	IncidentType IncidentTypeV1 `json:"incident_type"`
}

// ShowResponseBody12 defines model for ShowResponseBody12.
type ShowResponseBody12 struct {
	Incident IncidentV1 `json:"incident"`
}

// ShowResponseBody13 defines model for ShowResponseBody13.
type ShowResponseBody13 struct {
	Incident IncidentV2 `json:"incident"`
}

// ShowResponseBody14 defines model for ShowResponseBody14.
type ShowResponseBody14 struct {
	Schedule ScheduleV2 `json:"schedule"`
}

// ShowResponseBody15 defines model for ShowResponseBody15.
type ShowResponseBody15 struct {
	Severity SeverityV2 `json:"severity"`
}

// ShowResponseBody16 defines model for ShowResponseBody16.
type ShowResponseBody16 struct {
	User UserWithRolesV2 `json:"user"`
}

// ShowResponseBody2 defines model for ShowResponseBody2.
type ShowResponseBody2 struct {
	Action ActionV2 `json:"action"`
}

// ShowResponseBody3 defines model for ShowResponseBody3.
type ShowResponseBody3 struct {
	CustomFieldOption CustomFieldOptionV1 `json:"custom_field_option"`
}

// ShowResponseBody4 defines model for ShowResponseBody4.
type ShowResponseBody4 struct {
	CustomField CustomFieldV1 `json:"custom_field"`
}

// ShowResponseBody5 defines model for ShowResponseBody5.
type ShowResponseBody5 struct {
	CustomField CustomFieldV2 `json:"custom_field"`
}

// ShowResponseBody6 defines model for ShowResponseBody6.
type ShowResponseBody6 struct {
	FollowUp FollowUpV2 `json:"follow_up"`
}

// ShowResponseBody7 defines model for ShowResponseBody7.
type ShowResponseBody7 struct {
	IncidentRole IncidentRoleV1 `json:"incident_role"`
}

// ShowResponseBody8 defines model for ShowResponseBody8.
type ShowResponseBody8 struct {
	IncidentRole IncidentRoleV2 `json:"incident_role"`
}

// ShowResponseBody9 defines model for ShowResponseBody9.
type ShowResponseBody9 struct {
	IncidentStatus IncidentStatusV1 `json:"incident_status"`
}

// ShowWorkflowResponseBody defines model for ShowWorkflowResponseBody.
type ShowWorkflowResponseBody struct {
	ManagementMeta ManagementMetaV2 `json:"management_meta"`
	Workflow       Workflow         `json:"workflow"`
}

// StepConfig defines model for StepConfig.
type StepConfig struct {
	// ForEach Reference to the loop variable to run this step over
	ForEach *string `json:"for_each,omitempty"`

	// Id Unique ID of this step in a workflow
	Id string `json:"id"`

	// Label Human readable identifier for this step
	Label string `json:"label"`

	// Name Unique name of the step in the engine
	Name string `json:"name"`

	// ParamBindings Bindings for the step parameters
	ParamBindings []EngineParamBindingV3 `json:"param_bindings"`
}

// StepConfigPayload defines model for StepConfigPayload.
type StepConfigPayload struct {
	// ForEach Reference to an expression that returns resources to run this step over
	ForEach *string `json:"for_each,omitempty"`

	// Id Unique ID of this step in a workflow. This must be a valid ULID.
	Id string `json:"id"`

	// Name Unique name of the step in the engine
	Name string `json:"name"`

	// ParamBindings List of parameter bindings
	ParamBindings []EngineParamBindingPayloadV2 `json:"param_bindings"`
}

// StepConfigSlim defines model for StepConfigSlim.
type StepConfigSlim struct {
	// Label Human readable identifier for this step
	Label string `json:"label"`

	// Name Unique name of the step in the engine
	Name string `json:"name"`
}

// TriggerSlim defines model for TriggerSlim.
type TriggerSlim struct {
	// Label Human readable identifier for this trigger
	Label string `json:"label"`

	// Name Unique name of the trigger
	Name string `json:"name"`
}

// UpdateEntryRequestBody defines model for UpdateEntryRequestBody.
type UpdateEntryRequestBody struct {
	// Aliases Optional aliases that can be used to reference this entry
	Aliases *[]string `json:"aliases,omitempty"`

	// AttributeValues Values of this entry
	AttributeValues map[string]EngineParamBindingPayloadV2 `json:"attribute_values"`

	// ExternalId An optional alternative ID for this entry, which is ensured to be unique for the type
	ExternalId *string `json:"external_id,omitempty"`

	// Name Name is the human readable name of this entry
	Name string `json:"name"`

	// Rank When catalog type is ranked, this is used to help order things
	Rank *int32 `json:"rank,omitempty"`
}

// UpdateRequestBody defines model for UpdateRequestBody.
type UpdateRequestBody struct {
	// SortKey Sort key used to order the custom field options correctly
	SortKey int64 `json:"sort_key"`

	// Value Human readable name for the custom field option
	Value string `json:"value"`
}

// UpdateRequestBody2 defines model for UpdateRequestBody2.
type UpdateRequestBody2 struct {
	// Description Description of the custom field
	Description string `json:"description"`

	// Name Human readable name for the custom field
	Name string `json:"name"`

	// Required When this custom field must be set during the incident lifecycle. [DEPRECATED: please use required_v2 instead].
	Required *UpdateRequestBody2Required `json:"required,omitempty"`

	// RequiredV2 When this custom field must be set during the incident lifecycle.
	RequiredV2 *UpdateRequestBody2RequiredV2 `json:"required_v2,omitempty"`

	// ShowBeforeClosure Whether a custom field should be shown in the incident resolve modal. If this custom field is required before resolution, but no value has been set for it, the field will be shown in the resolve modal whatever the value of this setting.
	ShowBeforeClosure bool `json:"show_before_closure"`

	// ShowBeforeCreation Whether a custom field should be shown in the incident creation modal. This must be true if the field is always required.
	ShowBeforeCreation bool `json:"show_before_creation"`

	// ShowBeforeUpdate Whether a custom field should be shown in the incident update modal.
	ShowBeforeUpdate bool `json:"show_before_update"`

	// ShowInAnnouncementPost Whether a custom field should be shown in the list of fields as part of the announcement post when set.
	ShowInAnnouncementPost *bool `json:"show_in_announcement_post,omitempty"`
}

// UpdateRequestBody2Required When this custom field must be set during the incident lifecycle. [DEPRECATED: please use required_v2 instead].
type UpdateRequestBody2Required string

// UpdateRequestBody2RequiredV2 When this custom field must be set during the incident lifecycle.
type UpdateRequestBody2RequiredV2 string

// UpdateRequestBody3 defines model for UpdateRequestBody3.
type UpdateRequestBody3 struct {
	// Description Description of the custom field
	Description string `json:"description"`

	// Name Human readable name for the custom field
	Name string `json:"name"`
}

// UpdateRequestBody4 defines model for UpdateRequestBody4.
type UpdateRequestBody4 struct {
	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Instructions Provided to whoever is nominated for the role. Note that this will be empty for the 'reporter' role.
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// Required DEPRECATED: this will always be false.
	Required *bool `json:"required,omitempty"`

	// Shortform Short human readable name for Slack. Note that this will be empty for the 'reporter' role.
	Shortform string `json:"shortform"`
}

// UpdateRequestBody5 defines model for UpdateRequestBody5.
type UpdateRequestBody5 struct {
	// Description Describes the purpose of the role
	Description string `json:"description"`

	// Instructions Provided to whoever is nominated for the role. Note that this will be empty for the 'reporter' role.
	Instructions string `json:"instructions"`

	// Name Human readable name of the incident role
	Name string `json:"name"`

	// Shortform Short human readable name for Slack. Note that this will be empty for the 'reporter' role.
	Shortform string `json:"shortform"`
}

// UpdateRequestBody6 defines model for UpdateRequestBody6.
type UpdateRequestBody6 struct {
	// Description Rich text description of the incident status
	Description string `json:"description"`

	// Name Unique name of this status
	Name string `json:"name"`
}

// UpdateRequestBody7 defines model for UpdateRequestBody7.
type UpdateRequestBody7 struct {
	Schedule ScheduleUpdatePayloadV2 `json:"schedule"`
}

// UpdateTypeRequestBody defines model for UpdateTypeRequestBody.
type UpdateTypeRequestBody struct {
	// Annotations Annotations that can track metadata about this type
	Annotations *map[string]string `json:"annotations,omitempty"`

	// Categories What categories is this type considered part of
	Categories *[]UpdateTypeRequestBodyCategories `json:"categories,omitempty"`

	// Color Sets the display color of this type in the dashboard
	Color *UpdateTypeRequestBodyColor `json:"color,omitempty"`

	// Description Human readble description of this type
	Description string `json:"description"`

	// Icon Sets the display icon of this type in the dashboard
	Icon *UpdateTypeRequestBodyIcon `json:"icon,omitempty"`

	// Name Name is the human readable name of this type
	Name string `json:"name"`

	// Ranked If this type should be ranked
	Ranked *bool `json:"ranked,omitempty"`

	// SourceRepoUrl The url of the external repository where this type is managed
	SourceRepoUrl *string `json:"source_repo_url,omitempty"`
}

// UpdateTypeRequestBodyCategories defines model for UpdateTypeRequestBody.Categories.
type UpdateTypeRequestBodyCategories string

// UpdateTypeRequestBodyColor Sets the display color of this type in the dashboard
type UpdateTypeRequestBodyColor string

// UpdateTypeRequestBodyIcon Sets the display icon of this type in the dashboard
type UpdateTypeRequestBodyIcon string

// UpdateTypeSchemaRequestBody defines model for UpdateTypeSchemaRequestBody.
type UpdateTypeSchemaRequestBody struct {
	Attributes []CatalogTypeAttributePayloadV2 `json:"attributes"`
	Version    int64                           `json:"version"`
}

// UpdateWorkflowRequestBody defines model for UpdateWorkflowRequestBody.
type UpdateWorkflowRequestBody struct {
	// Annotations Annotations that track metadata about this resource
	Annotations *map[string]string `json:"annotations,omitempty"`

	// ConditionGroups List of conditions to apply to the workflow
	ConditionGroups []ConditionGroupPayloadV2 `json:"condition_groups"`

	// ContinueOnStepError Whether to continue executing the workflow if a step fails
	ContinueOnStepError bool           `json:"continue_on_step_error"`
	Delay               *WorkflowDelay `json:"delay,omitempty"`

	// Expressions The expressions used in the workflow
	Expressions []ExpressionPayloadV2 `json:"expressions"`

	// Folder Folder to display the workflow in
	Folder *string `json:"folder,omitempty"`

	// IncludePrivateIncidents Whether to include private incidents
	IncludePrivateIncidents bool `json:"include_private_incidents"`

	// Name The human-readable name of the workflow
	Name string `json:"name"`

	// OnceFor Once For strategy to apply to this workflow
	OnceFor []string `json:"once_for"`

	// RunsOnIncidentModes Which modes of incident this should run on (defaults to just standard incidents)
	RunsOnIncidentModes []UpdateWorkflowRequestBodyRunsOnIncidentModes `json:"runs_on_incident_modes"`

	// RunsOnIncidents Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
	RunsOnIncidents UpdateWorkflowRequestBodyRunsOnIncidents `json:"runs_on_incidents"`

	// State The state of the workflow (e.g. is it draft, or disabled)
	State *UpdateWorkflowRequestBodyState `json:"state,omitempty"`

	// Steps List of step to execute as part of the workflow
	Steps []StepConfigPayload `json:"steps"`
}

// UpdateWorkflowRequestBodyRunsOnIncidentModes defines model for UpdateWorkflowRequestBody.RunsOnIncidentModes.
type UpdateWorkflowRequestBodyRunsOnIncidentModes string

// UpdateWorkflowRequestBodyRunsOnIncidents Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
type UpdateWorkflowRequestBodyRunsOnIncidents string

// UpdateWorkflowRequestBodyState The state of the workflow (e.g. is it draft, or disabled)
type UpdateWorkflowRequestBodyState string

// UserReferencePayloadV1 defines model for UserReferencePayloadV1.
type UserReferencePayloadV1 struct {
	// Email The user's email address, matching the email on their Slack account
	Email *string `json:"email,omitempty"`

	// Id The incident.io ID of a user
	Id *string `json:"id,omitempty"`

	// SlackUserId The ID of the user's Slack account.
	SlackUserId *string `json:"slack_user_id,omitempty"`
}

// UserV1 defines model for UserV1.
type UserV1 struct {
	// Email Email address of the user.
	Email *string `json:"email,omitempty"`

	// Id Unique identifier of the user
	Id string `json:"id"`

	// Name Name of the user
	Name string `json:"name"`

	// Role DEPRECATED: Role of the user as of March 9th 2023, this value is no longer updated.
	Role UserV1Role `json:"role"`

	// SlackUserId Slack ID of the user
	SlackUserId *string `json:"slack_user_id,omitempty"`
}

// UserV1Role DEPRECATED: Role of the user as of March 9th 2023, this value is no longer updated.
type UserV1Role string

// UserWithRolesV2 defines model for UserWithRolesV2.
type UserWithRolesV2 struct {
	BaseRole    RBACRoleV2   `json:"base_role"`
	CustomRoles []RBACRoleV2 `json:"custom_roles"`

	// Email Email address of the user.
	Email *string `json:"email,omitempty"`

	// Id Unique identifier of the user
	Id string `json:"id"`

	// Name Name of the user
	Name string `json:"name"`

	// Role DEPRECATED: Role of the user as of March 9th 2023, this value is no longer updated.
	Role UserWithRolesV2Role `json:"role"`

	// SlackUserId Slack ID of the user
	SlackUserId *string `json:"slack_user_id,omitempty"`
}

// UserWithRolesV2Role DEPRECATED: Role of the user as of March 9th 2023, this value is no longer updated.
type UserWithRolesV2Role string

// WeekdayIntervalConfigV2 defines model for WeekdayIntervalConfigV2.
type WeekdayIntervalConfigV2 struct {
	// Id The unique identifier for this set of working intervals
	Id string `json:"id"`

	// Name A human readable label for this set of working intervals
	Name string `json:"name"`

	// Timezone How to interpret all the intervals
	Timezone         string              `json:"timezone"`
	WeekdayIntervals []WeekdayIntervalV2 `json:"weekday_intervals"`
}

// WeekdayIntervalV2 defines model for WeekdayIntervalV2.
type WeekdayIntervalV2 struct {
	// EndTime End time of the interval, in 24hr format
	EndTime string `json:"end_time"`

	// StartTime Start time of the interval, in 24hr format
	StartTime string `json:"start_time"`

	// Weekday Weekday this interval applies to
	Weekday string `json:"weekday"`
}

// Workflow defines model for Workflow.
type Workflow struct {
	// ConditionGroups Conditions that apply to the workflow trigger
	ConditionGroups []ConditionGroupV2 `json:"condition_groups"`

	// ContinueOnStepError Whether to continue executing the workflow if a step fails
	ContinueOnStepError bool           `json:"continue_on_step_error"`
	Delay               *WorkflowDelay `json:"delay,omitempty"`

	// Expressions Expressions that make variables available in the scope
	Expressions []ExpressionV2 `json:"expressions"`

	// Folder Folder to display the workflow in
	Folder *string `json:"folder,omitempty"`

	// Id Unique identifier for the workflow
	Id string `json:"id"`

	// IncludePrivateIncidents Whether to include private incidents
	IncludePrivateIncidents bool `json:"include_private_incidents"`

	// Name The human-readable name of the workflow
	Name string `json:"name"`

	// OnceFor This workflow will run 'once for' a list of references
	OnceFor []EngineReferenceV2 `json:"once_for"`

	// RunsFrom The time from which this workflow will run on incidents
	RunsFrom *time.Time `json:"runs_from,omitempty"`

	// RunsOnIncidentModes Which modes of incident this should run on (defaults to just standard incidents)
	RunsOnIncidentModes []WorkflowRunsOnIncidentModes `json:"runs_on_incident_modes"`

	// RunsOnIncidents Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
	RunsOnIncidents WorkflowRunsOnIncidents `json:"runs_on_incidents"`

	// State The state of the workflow (e.g. is it draft, or disabled)
	State WorkflowState `json:"state"`

	// Steps Steps that are executed as part of the workflow
	Steps   []StepConfig `json:"steps"`
	Trigger TriggerSlim  `json:"trigger"`

	// Version Revision of the workflow, uniquely identifying its version
	Version int64 `json:"version"`
}

// WorkflowRunsOnIncidentModes defines model for Workflow.RunsOnIncidentModes.
type WorkflowRunsOnIncidentModes string

// WorkflowRunsOnIncidents Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
type WorkflowRunsOnIncidents string

// WorkflowState The state of the workflow (e.g. is it draft, or disabled)
type WorkflowState string

// WorkflowDelay defines model for WorkflowDelay.
type WorkflowDelay struct {
	// ConditionsApplyOverDelay If this workflow is delayed, whether the conditions should be rechecked between trigger firing and execution
	ConditionsApplyOverDelay bool `json:"conditions_apply_over_delay"`

	// ForSeconds Delay in seconds between trigger firing and running the workflow
	ForSeconds int64 `json:"for_seconds"`
}

// WorkflowSlim defines model for WorkflowSlim.
type WorkflowSlim struct {
	// ConditionGroups Conditions that apply to the workflow trigger
	ConditionGroups []ConditionGroupV2 `json:"condition_groups"`

	// ContinueOnStepError Whether to continue executing the workflow if a step fails
	ContinueOnStepError bool           `json:"continue_on_step_error"`
	Delay               *WorkflowDelay `json:"delay,omitempty"`

	// Expressions Expressions that make variables available in the scope
	Expressions []ExpressionV2 `json:"expressions"`

	// Folder Folder to display the workflow in
	Folder *string `json:"folder,omitempty"`

	// Id Unique identifier for the workflow
	Id string `json:"id"`

	// IncludePrivateIncidents Whether to include private incidents
	IncludePrivateIncidents bool `json:"include_private_incidents"`

	// Name The human-readable name of the workflow
	Name string `json:"name"`

	// OnceFor This workflow will run 'once for' a list of references
	OnceFor []EngineReferenceV2 `json:"once_for"`

	// RunsFrom The time from which this workflow will run on incidents
	RunsFrom *time.Time `json:"runs_from,omitempty"`

	// RunsOnIncidentModes Which modes of incident this should run on (defaults to just standard incidents)
	RunsOnIncidentModes []WorkflowSlimRunsOnIncidentModes `json:"runs_on_incident_modes"`

	// RunsOnIncidents Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
	RunsOnIncidents WorkflowSlimRunsOnIncidents `json:"runs_on_incidents"`

	// State The state of the workflow (e.g. is it draft, or disabled)
	State WorkflowSlimState `json:"state"`

	// Steps Steps that are executed as part of the workflow
	Steps   []StepConfigSlim `json:"steps"`
	Trigger TriggerSlim      `json:"trigger"`

	// Version Revision of the workflow, uniquely identifying its version
	Version int64 `json:"version"`
}

// WorkflowSlimRunsOnIncidentModes defines model for WorkflowSlim.RunsOnIncidentModes.
type WorkflowSlimRunsOnIncidentModes string

// WorkflowSlimRunsOnIncidents Which incidents should the workflow be applied to? (newly_created or newly_created_and_active)
type WorkflowSlimRunsOnIncidents string

// WorkflowSlimState The state of the workflow (e.g. is it draft, or disabled)
type WorkflowSlimState string

// ActionsV1ListParams defines parameters for ActionsV1List.
type ActionsV1ListParams struct {
	// IncidentId Find actions related to this incident
	IncidentId *string `form:"incident_id,omitempty" json:"incident_id,omitempty"`

	// IsFollowUp Filter to actions marked as being follow up actions
	IsFollowUp *bool `form:"is_follow_up,omitempty" json:"is_follow_up,omitempty"`

	// IncidentMode Filter to actions from incidents of the given mode. If not set, only actions from `real` incidents are returned
	IncidentMode *ActionsV1ListParamsIncidentMode `form:"incident_mode,omitempty" json:"incident_mode,omitempty"`
}

// ActionsV1ListParamsIncidentMode defines parameters for ActionsV1List.
type ActionsV1ListParamsIncidentMode string

// CustomFieldOptionsV1ListParams defines parameters for CustomFieldOptionsV1List.
type CustomFieldOptionsV1ListParams struct {
	// PageSize number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After A custom field option's ID. This endpoint will return a list of custom field options created after this option.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// CustomFieldId The custom field to list options for.
	CustomFieldId string `form:"custom_field_id" json:"custom_field_id"`
}

// IncidentAttachmentsV1ListParams defines parameters for IncidentAttachmentsV1List.
type IncidentAttachmentsV1ListParams struct {
	// IncidentId Incident that this attachment is against
	IncidentId *string `form:"incident_id,omitempty" json:"incident_id,omitempty"`

	// ExternalId ID of the resource in the external system
	ExternalId *string `form:"external_id,omitempty" json:"external_id,omitempty"`

	// ResourceType E.g. PagerDuty: the external system that holds the resource
	ResourceType *IncidentAttachmentsV1ListParamsResourceType `form:"resource_type,omitempty" json:"resource_type,omitempty"`
}

// IncidentAttachmentsV1ListParamsResourceType defines parameters for IncidentAttachmentsV1List.
type IncidentAttachmentsV1ListParamsResourceType string

// IncidentsV1ListParams defines parameters for IncidentsV1List.
type IncidentsV1ListParams struct {
	// PageSize Integer number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An record's ID. This endpoint will return a list of records after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Status Filter for incidents in these statuses
	Status *[]string `form:"status,omitempty" json:"status,omitempty"`
}

// ActionsV2ListParams defines parameters for ActionsV2List.
type ActionsV2ListParams struct {
	// IncidentId Find actions related to this incident
	IncidentId *string `form:"incident_id,omitempty" json:"incident_id,omitempty"`

	// IncidentMode Filter to actions from incidents of the given mode. If not set, only actions from `standard` and `retrospective` incidents are returned
	IncidentMode *ActionsV2ListParamsIncidentMode `form:"incident_mode,omitempty" json:"incident_mode,omitempty"`
}

// ActionsV2ListParamsIncidentMode defines parameters for ActionsV2List.
type ActionsV2ListParamsIncidentMode string

// AlertEventsV2CreateHTTPParams defines parameters for AlertEventsV2CreateHTTP.
type AlertEventsV2CreateHTTPParams struct {
	// Token Token used to authenticate the request, generated when configuring the alert source. Will be consumed via a URL query string parameter
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// CatalogV2ListEntriesParams defines parameters for CatalogV2ListEntries.
type CatalogV2ListEntriesParams struct {
	// CatalogTypeId ID of this catalog type
	CatalogTypeId string `form:"catalog_type_id" json:"catalog_type_id"`

	// PageSize Integer number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An record's ID. This endpoint will return a list of records after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// FollowUpsV2ListParams defines parameters for FollowUpsV2List.
type FollowUpsV2ListParams struct {
	// IncidentId Find follow-ups related to this incident
	IncidentId *string `form:"incident_id,omitempty" json:"incident_id,omitempty"`

	// IncidentMode Filter to follow-ups from incidents of the given mode. If not set, only follow-ups from `standard` and `retrospective` incidents are returned
	IncidentMode *FollowUpsV2ListParamsIncidentMode `form:"incident_mode,omitempty" json:"incident_mode,omitempty"`
}

// FollowUpsV2ListParamsIncidentMode defines parameters for FollowUpsV2List.
type FollowUpsV2ListParamsIncidentMode string

// IncidentUpdatesV2ListParams defines parameters for IncidentUpdatesV2List.
type IncidentUpdatesV2ListParams struct {
	// IncidentId Incident whose updates you want to list
	IncidentId *string `form:"incident_id,omitempty" json:"incident_id,omitempty"`

	// PageSize Integer number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An record's ID. This endpoint will return a list of records after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// IncidentsV2ListParams defines parameters for IncidentsV2List.
type IncidentsV2ListParams struct {
	// PageSize number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An incident's ID. This endpoint will return a list of incidents after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Status Filter on incident status. The accepted operators are 'one_of', or 'not_in'.
	Status *map[string][]string `form:"status,omitempty" json:"status,omitempty"`

	// StatusCategory Filter on the category of the incidents status. The accepted operators are 'one_of', or 'not_in'. If this is not provided, this value defaults to `{"one_of": ["triage", "active", "post-incident", "closed"] }`, meaning that canceled, declined and merged incidents are not included.
	StatusCategory *map[string][]string `form:"status_category,omitempty" json:"status_category,omitempty"`

	// CreatedAt Filter on incident created at timestamp. The accepted operators are 'gte', 'lte' and 'date_range'.
	CreatedAt *map[string][]string `form:"created_at,omitempty" json:"created_at,omitempty"`

	// Severity Filter on incident severity. The accepted operators are 'one_of', 'not_in', 'gte', 'lte'.
	Severity *map[string][]string `form:"severity,omitempty" json:"severity,omitempty"`

	// IncidentType Filter on incident type. The accepted operators are 'one_of, or 'not_in'.
	IncidentType *map[string][]string `form:"incident_type,omitempty" json:"incident_type,omitempty"`

	// IncidentRole Filter on an incident role. Role ID should be sent, followed by the operator and values. The accepted operators are 'one_of', 'is_blank'.
	IncidentRole *map[string]map[string][]string `form:"incident_role,omitempty" json:"incident_role,omitempty"`

	// CustomField Filter on an incident custom field. Custom field ID should be sent, followed by the operator and values. Accepted operator will depend on the custom field type.
	CustomField *map[string]map[string][]string `form:"custom_field,omitempty" json:"custom_field,omitempty"`

	// Mode Filter on incident mode. The accepted operator is 'one_of'.  If this is not provided, this value defaults to `{"one_of": ["standard", "retrospective"] }`, meaning that test and tutorial incidents are not included.
	Mode *map[string][]string `form:"mode,omitempty" json:"mode,omitempty"`
}

// SchedulesV2ListScheduleEntriesParams defines parameters for SchedulesV2ListScheduleEntries.
type SchedulesV2ListScheduleEntriesParams struct {
	// ScheduleId The ID of the schedule to get entries for.
	ScheduleId string `form:"schedule_id" json:"schedule_id"`

	// EntryWindowStart The start of the window to get entries for.
	EntryWindowStart *time.Time `form:"entry_window_start,omitempty" json:"entry_window_start,omitempty"`

	// EntryWindowEnd The end of the window to get entries for.
	EntryWindowEnd *time.Time `form:"entry_window_end,omitempty" json:"entry_window_end,omitempty"`
}

// SchedulesV2ListParams defines parameters for SchedulesV2List.
type SchedulesV2ListParams struct {
	// PageSize number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After A schedule's ID. This endpoint will return a list of schedules after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// UsersV2ListParams defines parameters for UsersV2List.
type UsersV2ListParams struct {
	// Email Filter by email address
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// SlackUserId Filter by Slack user ID
	SlackUserId *string `form:"slack_user_id,omitempty" json:"slack_user_id,omitempty"`

	// PageSize Integer number of records to return
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// After An record's ID. This endpoint will return a list of records after this ID in relation to the API response order.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// CustomFieldOptionsV1CreateJSONRequestBody defines body for CustomFieldOptionsV1Create for application/json ContentType.
type CustomFieldOptionsV1CreateJSONRequestBody = CreateRequestBody

// CustomFieldOptionsV1UpdateJSONRequestBody defines body for CustomFieldOptionsV1Update for application/json ContentType.
type CustomFieldOptionsV1UpdateJSONRequestBody = UpdateRequestBody

// CustomFieldsV1CreateJSONRequestBody defines body for CustomFieldsV1Create for application/json ContentType.
type CustomFieldsV1CreateJSONRequestBody = CreateRequestBody2

// CustomFieldsV1UpdateJSONRequestBody defines body for CustomFieldsV1Update for application/json ContentType.
type CustomFieldsV1UpdateJSONRequestBody = UpdateRequestBody2

// IncidentAttachmentsV1CreateJSONRequestBody defines body for IncidentAttachmentsV1Create for application/json ContentType.
type IncidentAttachmentsV1CreateJSONRequestBody = CreateRequestBody4

// IncidentMembershipsV1CreateJSONRequestBody defines body for IncidentMembershipsV1Create for application/json ContentType.
type IncidentMembershipsV1CreateJSONRequestBody = CreateRequestBody5

// IncidentMembershipsV1RevokeJSONRequestBody defines body for IncidentMembershipsV1Revoke for application/json ContentType.
type IncidentMembershipsV1RevokeJSONRequestBody = CreateRequestBody5

// IncidentRolesV1CreateJSONRequestBody defines body for IncidentRolesV1Create for application/json ContentType.
type IncidentRolesV1CreateJSONRequestBody = CreateRequestBody6

// IncidentRolesV1UpdateJSONRequestBody defines body for IncidentRolesV1Update for application/json ContentType.
type IncidentRolesV1UpdateJSONRequestBody = UpdateRequestBody4

// IncidentStatusesV1CreateJSONRequestBody defines body for IncidentStatusesV1Create for application/json ContentType.
type IncidentStatusesV1CreateJSONRequestBody = CreateRequestBody8

// IncidentStatusesV1UpdateJSONRequestBody defines body for IncidentStatusesV1Update for application/json ContentType.
type IncidentStatusesV1UpdateJSONRequestBody = UpdateRequestBody6

// IncidentsV1CreateJSONRequestBody defines body for IncidentsV1Create for application/json ContentType.
type IncidentsV1CreateJSONRequestBody = CreateRequestBody9

// SeveritiesV1CreateJSONRequestBody defines body for SeveritiesV1Create for application/json ContentType.
type SeveritiesV1CreateJSONRequestBody = CreateRequestBody12

// SeveritiesV1UpdateJSONRequestBody defines body for SeveritiesV1Update for application/json ContentType.
type SeveritiesV1UpdateJSONRequestBody = CreateRequestBody12

// AlertEventsV2CreateHTTPJSONRequestBody defines body for AlertEventsV2CreateHTTP for application/json ContentType.
type AlertEventsV2CreateHTTPJSONRequestBody = CreateHTTPRequestBody

// CatalogV2CreateEntryJSONRequestBody defines body for CatalogV2CreateEntry for application/json ContentType.
type CatalogV2CreateEntryJSONRequestBody = CreateEntryRequestBody

// CatalogV2UpdateEntryJSONRequestBody defines body for CatalogV2UpdateEntry for application/json ContentType.
type CatalogV2UpdateEntryJSONRequestBody = UpdateEntryRequestBody

// CatalogV2CreateTypeJSONRequestBody defines body for CatalogV2CreateType for application/json ContentType.
type CatalogV2CreateTypeJSONRequestBody = CreateTypeRequestBody

// CatalogV2UpdateTypeJSONRequestBody defines body for CatalogV2UpdateType for application/json ContentType.
type CatalogV2UpdateTypeJSONRequestBody = UpdateTypeRequestBody

// CatalogV2UpdateTypeSchemaJSONRequestBody defines body for CatalogV2UpdateTypeSchema for application/json ContentType.
type CatalogV2UpdateTypeSchemaJSONRequestBody = UpdateTypeSchemaRequestBody

// CustomFieldsV2CreateJSONRequestBody defines body for CustomFieldsV2Create for application/json ContentType.
type CustomFieldsV2CreateJSONRequestBody = CreateRequestBody3

// CustomFieldsV2UpdateJSONRequestBody defines body for CustomFieldsV2Update for application/json ContentType.
type CustomFieldsV2UpdateJSONRequestBody = UpdateRequestBody3

// EscalationsV2CreatePathJSONRequestBody defines body for EscalationsV2CreatePath for application/json ContentType.
type EscalationsV2CreatePathJSONRequestBody = CreatePathRequestBody

// EscalationsV2UpdatePathJSONRequestBody defines body for EscalationsV2UpdatePath for application/json ContentType.
type EscalationsV2UpdatePathJSONRequestBody = CreatePathRequestBody

// IncidentRolesV2CreateJSONRequestBody defines body for IncidentRolesV2Create for application/json ContentType.
type IncidentRolesV2CreateJSONRequestBody = CreateRequestBody7

// IncidentRolesV2UpdateJSONRequestBody defines body for IncidentRolesV2Update for application/json ContentType.
type IncidentRolesV2UpdateJSONRequestBody = UpdateRequestBody5

// IncidentsV2CreateJSONRequestBody defines body for IncidentsV2Create for application/json ContentType.
type IncidentsV2CreateJSONRequestBody = CreateRequestBody10

// IncidentsV2EditJSONRequestBody defines body for IncidentsV2Edit for application/json ContentType.
type IncidentsV2EditJSONRequestBody = EditRequestBody

// ManagedResourcesV2CreateManagedResourceJSONRequestBody defines body for ManagedResourcesV2CreateManagedResource for application/json ContentType.
type ManagedResourcesV2CreateManagedResourceJSONRequestBody = CreateManagedResourceRequestBody

// SchedulesV2CreateJSONRequestBody defines body for SchedulesV2Create for application/json ContentType.
type SchedulesV2CreateJSONRequestBody = CreateRequestBody11

// SchedulesV2UpdateJSONRequestBody defines body for SchedulesV2Update for application/json ContentType.
type SchedulesV2UpdateJSONRequestBody = UpdateRequestBody7

// WorkflowsV2CreateWorkflowJSONRequestBody defines body for WorkflowsV2CreateWorkflow for application/json ContentType.
type WorkflowsV2CreateWorkflowJSONRequestBody = CreateWorkflowRequestBody

// WorkflowsV2UpdateWorkflowJSONRequestBody defines body for WorkflowsV2UpdateWorkflow for application/json ContentType.
type WorkflowsV2UpdateWorkflowJSONRequestBody = UpdateWorkflowRequestBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ActionsV1List request
	ActionsV1List(ctx context.Context, params *ActionsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsV1Show request
	ActionsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1List request
	CustomFieldOptionsV1List(ctx context.Context, params *CustomFieldOptionsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1Create request with any body
	CustomFieldOptionsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldOptionsV1Create(ctx context.Context, body CustomFieldOptionsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1Delete request
	CustomFieldOptionsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1Show request
	CustomFieldOptionsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldOptionsV1Update request with any body
	CustomFieldOptionsV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldOptionsV1Update(ctx context.Context, id string, body CustomFieldOptionsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1List request
	CustomFieldsV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1Create request with any body
	CustomFieldsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsV1Create(ctx context.Context, body CustomFieldsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1Delete request
	CustomFieldsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1Show request
	CustomFieldsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV1Update request with any body
	CustomFieldsV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsV1Update(ctx context.Context, id string, body CustomFieldsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UtilitiesV1Identity request
	UtilitiesV1Identity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentAttachmentsV1List request
	IncidentAttachmentsV1List(ctx context.Context, params *IncidentAttachmentsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentAttachmentsV1Create request with any body
	IncidentAttachmentsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentAttachmentsV1Create(ctx context.Context, body IncidentAttachmentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentAttachmentsV1Delete request
	IncidentAttachmentsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentMembershipsV1Create request with any body
	IncidentMembershipsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentMembershipsV1Create(ctx context.Context, body IncidentMembershipsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentMembershipsV1Revoke request with any body
	IncidentMembershipsV1RevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentMembershipsV1Revoke(ctx context.Context, body IncidentMembershipsV1RevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1List request
	IncidentRolesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1Create request with any body
	IncidentRolesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentRolesV1Create(ctx context.Context, body IncidentRolesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1Delete request
	IncidentRolesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1Show request
	IncidentRolesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV1Update request with any body
	IncidentRolesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentRolesV1Update(ctx context.Context, id string, body IncidentRolesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1List request
	IncidentStatusesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1Create request with any body
	IncidentStatusesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentStatusesV1Create(ctx context.Context, body IncidentStatusesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1Delete request
	IncidentStatusesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1Show request
	IncidentStatusesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentStatusesV1Update request with any body
	IncidentStatusesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentStatusesV1Update(ctx context.Context, id string, body IncidentStatusesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentTypesV1List request
	IncidentTypesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentTypesV1Show request
	IncidentTypesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV1List request
	IncidentsV1List(ctx context.Context, params *IncidentsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV1Create request with any body
	IncidentsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsV1Create(ctx context.Context, body IncidentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV1Show request
	IncidentsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UtilitiesV1OpenAPI request
	UtilitiesV1OpenAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UtilitiesV1OpenAPIV3 request
	UtilitiesV1OpenAPIV3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1List request
	SeveritiesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1Create request with any body
	SeveritiesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SeveritiesV1Create(ctx context.Context, body SeveritiesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1Delete request
	SeveritiesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1Show request
	SeveritiesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SeveritiesV1Update request with any body
	SeveritiesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SeveritiesV1Update(ctx context.Context, id string, body SeveritiesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsV2List request
	ActionsV2List(ctx context.Context, params *ActionsV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionsV2Show request
	ActionsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AlertEventsV2CreateHTTP request with any body
	AlertEventsV2CreateHTTPWithBody(ctx context.Context, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AlertEventsV2CreateHTTP(ctx context.Context, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, body AlertEventsV2CreateHTTPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ListEntries request
	CatalogV2ListEntries(ctx context.Context, params *CatalogV2ListEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2CreateEntry request with any body
	CatalogV2CreateEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2CreateEntry(ctx context.Context, body CatalogV2CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2DestroyEntry request
	CatalogV2DestroyEntry(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ShowEntry request
	CatalogV2ShowEntry(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2UpdateEntry request with any body
	CatalogV2UpdateEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2UpdateEntry(ctx context.Context, id string, body CatalogV2UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ListResources request
	CatalogV2ListResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ListTypes request
	CatalogV2ListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2CreateType request with any body
	CatalogV2CreateTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2CreateType(ctx context.Context, body CatalogV2CreateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2DestroyType request
	CatalogV2DestroyType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2ShowType request
	CatalogV2ShowType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2UpdateType request with any body
	CatalogV2UpdateTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2UpdateType(ctx context.Context, id string, body CatalogV2UpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CatalogV2UpdateTypeSchema request with any body
	CatalogV2UpdateTypeSchemaWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CatalogV2UpdateTypeSchema(ctx context.Context, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV2List request
	CustomFieldsV2List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV2Create request with any body
	CustomFieldsV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsV2Create(ctx context.Context, body CustomFieldsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV2Delete request
	CustomFieldsV2Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV2Show request
	CustomFieldsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CustomFieldsV2Update request with any body
	CustomFieldsV2UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CustomFieldsV2Update(ctx context.Context, id string, body CustomFieldsV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EscalationsV2CreatePath request with any body
	EscalationsV2CreatePathWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EscalationsV2CreatePath(ctx context.Context, body EscalationsV2CreatePathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EscalationsV2DestroyPath request
	EscalationsV2DestroyPath(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EscalationsV2ShowPath request
	EscalationsV2ShowPath(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EscalationsV2UpdatePath request with any body
	EscalationsV2UpdatePathWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EscalationsV2UpdatePath(ctx context.Context, id string, body EscalationsV2UpdatePathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FollowUpsV2List request
	FollowUpsV2List(ctx context.Context, params *FollowUpsV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FollowUpsV2Show request
	FollowUpsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV2List request
	IncidentRolesV2List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV2Create request with any body
	IncidentRolesV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentRolesV2Create(ctx context.Context, body IncidentRolesV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV2Delete request
	IncidentRolesV2Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV2Show request
	IncidentRolesV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentRolesV2Update request with any body
	IncidentRolesV2UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentRolesV2Update(ctx context.Context, id string, body IncidentRolesV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentTimestampsV2List request
	IncidentTimestampsV2List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentTimestampsV2Show request
	IncidentTimestampsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentUpdatesV2List request
	IncidentUpdatesV2List(ctx context.Context, params *IncidentUpdatesV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV2List request
	IncidentsV2List(ctx context.Context, params *IncidentsV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV2Create request with any body
	IncidentsV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsV2Create(ctx context.Context, body IncidentsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV2Show request
	IncidentsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IncidentsV2Edit request with any body
	IncidentsV2EditWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IncidentsV2Edit(ctx context.Context, id string, body IncidentsV2EditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ManagedResourcesV2CreateManagedResource request with any body
	ManagedResourcesV2CreateManagedResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ManagedResourcesV2CreateManagedResource(ctx context.Context, body ManagedResourcesV2CreateManagedResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulesV2ListScheduleEntries request
	SchedulesV2ListScheduleEntries(ctx context.Context, params *SchedulesV2ListScheduleEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulesV2List request
	SchedulesV2List(ctx context.Context, params *SchedulesV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulesV2Create request with any body
	SchedulesV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SchedulesV2Create(ctx context.Context, body SchedulesV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulesV2Destroy request
	SchedulesV2Destroy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulesV2Show request
	SchedulesV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulesV2Update request with any body
	SchedulesV2UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SchedulesV2Update(ctx context.Context, id string, body SchedulesV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersV2List request
	UsersV2List(ctx context.Context, params *UsersV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersV2Show request
	UsersV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsV2ListWorkflows request
	WorkflowsV2ListWorkflows(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsV2CreateWorkflow request with any body
	WorkflowsV2CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsV2CreateWorkflow(ctx context.Context, body WorkflowsV2CreateWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsV2DestroyWorkflow request
	WorkflowsV2DestroyWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsV2ShowWorkflow request
	WorkflowsV2ShowWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsV2UpdateWorkflow request with any body
	WorkflowsV2UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkflowsV2UpdateWorkflow(ctx context.Context, id string, body WorkflowsV2UpdateWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ActionsV1List(ctx context.Context, params *ActionsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsV1ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1List(ctx context.Context, params *CustomFieldOptionsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1Create(ctx context.Context, body CustomFieldOptionsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldOptionsV1Update(ctx context.Context, id string, body CustomFieldOptionsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldOptionsV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1Create(ctx context.Context, body CustomFieldsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV1Update(ctx context.Context, id string, body CustomFieldsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UtilitiesV1Identity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUtilitiesV1IdentityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentAttachmentsV1List(ctx context.Context, params *IncidentAttachmentsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentAttachmentsV1ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentAttachmentsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentAttachmentsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentAttachmentsV1Create(ctx context.Context, body IncidentAttachmentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentAttachmentsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentAttachmentsV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentAttachmentsV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentMembershipsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentMembershipsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentMembershipsV1Create(ctx context.Context, body IncidentMembershipsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentMembershipsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentMembershipsV1RevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentMembershipsV1RevokeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentMembershipsV1Revoke(ctx context.Context, body IncidentMembershipsV1RevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentMembershipsV1RevokeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1Create(ctx context.Context, body IncidentRolesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV1Update(ctx context.Context, id string, body IncidentRolesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1Create(ctx context.Context, body IncidentStatusesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentStatusesV1Update(ctx context.Context, id string, body IncidentStatusesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentStatusesV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentTypesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentTypesV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentTypesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentTypesV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV1List(ctx context.Context, params *IncidentsV1ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV1ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV1Create(ctx context.Context, body IncidentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UtilitiesV1OpenAPI(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUtilitiesV1OpenAPIRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UtilitiesV1OpenAPIV3(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUtilitiesV1OpenAPIV3Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1Create(ctx context.Context, body SeveritiesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SeveritiesV1Update(ctx context.Context, id string, body SeveritiesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSeveritiesV1UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsV2List(ctx context.Context, params *ActionsV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsV2ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionsV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertEventsV2CreateHTTPWithBody(ctx context.Context, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertEventsV2CreateHTTPRequestWithBody(c.Server, alertSourceConfigId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AlertEventsV2CreateHTTP(ctx context.Context, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, body AlertEventsV2CreateHTTPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertEventsV2CreateHTTPRequest(c.Server, alertSourceConfigId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ListEntries(ctx context.Context, params *CatalogV2ListEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ListEntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2CreateEntryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2CreateEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2CreateEntry(ctx context.Context, body CatalogV2CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2CreateEntryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2DestroyEntry(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2DestroyEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ShowEntry(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ShowEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateEntry(ctx context.Context, id string, body CatalogV2UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateEntryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ListResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ListResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ListTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ListTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2CreateTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2CreateTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2CreateType(ctx context.Context, body CatalogV2CreateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2CreateTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2DestroyType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2DestroyTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2ShowType(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2ShowTypeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateTypeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateTypeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateType(ctx context.Context, id string, body CatalogV2UpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateTypeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateTypeSchemaWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateTypeSchemaRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CatalogV2UpdateTypeSchema(ctx context.Context, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCatalogV2UpdateTypeSchemaRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV2List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV2ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV2CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV2Create(ctx context.Context, body CustomFieldsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV2CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV2Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV2DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV2UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV2UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CustomFieldsV2Update(ctx context.Context, id string, body CustomFieldsV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCustomFieldsV2UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EscalationsV2CreatePathWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEscalationsV2CreatePathRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EscalationsV2CreatePath(ctx context.Context, body EscalationsV2CreatePathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEscalationsV2CreatePathRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EscalationsV2DestroyPath(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEscalationsV2DestroyPathRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EscalationsV2ShowPath(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEscalationsV2ShowPathRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EscalationsV2UpdatePathWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEscalationsV2UpdatePathRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EscalationsV2UpdatePath(ctx context.Context, id string, body EscalationsV2UpdatePathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEscalationsV2UpdatePathRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FollowUpsV2List(ctx context.Context, params *FollowUpsV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFollowUpsV2ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FollowUpsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFollowUpsV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV2List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV2ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV2CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV2Create(ctx context.Context, body IncidentRolesV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV2CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV2Delete(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV2DeleteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV2UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV2UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentRolesV2Update(ctx context.Context, id string, body IncidentRolesV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentRolesV2UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentTimestampsV2List(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentTimestampsV2ListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentTimestampsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentTimestampsV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentUpdatesV2List(ctx context.Context, params *IncidentUpdatesV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentUpdatesV2ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2List(ctx context.Context, params *IncidentsV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2Create(ctx context.Context, body IncidentsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2EditWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2EditRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IncidentsV2Edit(ctx context.Context, id string, body IncidentsV2EditJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIncidentsV2EditRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagedResourcesV2CreateManagedResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagedResourcesV2CreateManagedResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ManagedResourcesV2CreateManagedResource(ctx context.Context, body ManagedResourcesV2CreateManagedResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewManagedResourcesV2CreateManagedResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesV2ListScheduleEntries(ctx context.Context, params *SchedulesV2ListScheduleEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesV2ListScheduleEntriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesV2List(ctx context.Context, params *SchedulesV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesV2ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesV2CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesV2CreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesV2Create(ctx context.Context, body SchedulesV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesV2CreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesV2Destroy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesV2DestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesV2UpdateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesV2UpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesV2Update(ctx context.Context, id string, body SchedulesV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesV2UpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersV2List(ctx context.Context, params *UsersV2ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersV2ListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersV2Show(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersV2ShowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsV2ListWorkflows(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsV2ListWorkflowsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsV2CreateWorkflowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsV2CreateWorkflowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsV2CreateWorkflow(ctx context.Context, body WorkflowsV2CreateWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsV2CreateWorkflowRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsV2DestroyWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsV2DestroyWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsV2ShowWorkflow(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsV2ShowWorkflowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsV2UpdateWorkflowWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsV2UpdateWorkflowRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsV2UpdateWorkflow(ctx context.Context, id string, body WorkflowsV2UpdateWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsV2UpdateWorkflowRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewActionsV1ListRequest generates requests for ActionsV1List
func NewActionsV1ListRequest(server string, params *ActionsV1ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncidentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsFollowUp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_follow_up", runtime.ParamLocationQuery, *params.IsFollowUp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentMode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_mode", runtime.ParamLocationQuery, *params.IncidentMode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionsV1ShowRequest generates requests for ActionsV1Show
func NewActionsV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldOptionsV1ListRequest generates requests for CustomFieldOptionsV1List
func NewCustomFieldOptionsV1ListRequest(server string, params *CustomFieldOptionsV1ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_field_id", runtime.ParamLocationQuery, params.CustomFieldId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldOptionsV1CreateRequest calls the generic CustomFieldOptionsV1Create builder with application/json body
func NewCustomFieldOptionsV1CreateRequest(server string, body CustomFieldOptionsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldOptionsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomFieldOptionsV1CreateRequestWithBody generates requests for CustomFieldOptionsV1Create with any type of body
func NewCustomFieldOptionsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldOptionsV1DeleteRequest generates requests for CustomFieldOptionsV1Delete
func NewCustomFieldOptionsV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldOptionsV1ShowRequest generates requests for CustomFieldOptionsV1Show
func NewCustomFieldOptionsV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldOptionsV1UpdateRequest calls the generic CustomFieldOptionsV1Update builder with application/json body
func NewCustomFieldOptionsV1UpdateRequest(server string, id string, body CustomFieldOptionsV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldOptionsV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCustomFieldOptionsV1UpdateRequestWithBody generates requests for CustomFieldOptionsV1Update with any type of body
func NewCustomFieldOptionsV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_field_options/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsV1ListRequest generates requests for CustomFieldsV1List
func NewCustomFieldsV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV1CreateRequest calls the generic CustomFieldsV1Create builder with application/json body
func NewCustomFieldsV1CreateRequest(server string, body CustomFieldsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomFieldsV1CreateRequestWithBody generates requests for CustomFieldsV1Create with any type of body
func NewCustomFieldsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsV1DeleteRequest generates requests for CustomFieldsV1Delete
func NewCustomFieldsV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV1ShowRequest generates requests for CustomFieldsV1Show
func NewCustomFieldsV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV1UpdateRequest calls the generic CustomFieldsV1Update builder with application/json body
func NewCustomFieldsV1UpdateRequest(server string, id string, body CustomFieldsV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCustomFieldsV1UpdateRequestWithBody generates requests for CustomFieldsV1Update with any type of body
func NewCustomFieldsV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUtilitiesV1IdentityRequest generates requests for UtilitiesV1Identity
func NewUtilitiesV1IdentityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/identity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentAttachmentsV1ListRequest generates requests for IncidentAttachmentsV1List
func NewIncidentAttachmentsV1ListRequest(server string, params *IncidentAttachmentsV1ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_attachments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncidentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExternalId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_type", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentAttachmentsV1CreateRequest calls the generic IncidentAttachmentsV1Create builder with application/json body
func NewIncidentAttachmentsV1CreateRequest(server string, body IncidentAttachmentsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentAttachmentsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentAttachmentsV1CreateRequestWithBody generates requests for IncidentAttachmentsV1Create with any type of body
func NewIncidentAttachmentsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_attachments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentAttachmentsV1DeleteRequest generates requests for IncidentAttachmentsV1Delete
func NewIncidentAttachmentsV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_attachments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentMembershipsV1CreateRequest calls the generic IncidentMembershipsV1Create builder with application/json body
func NewIncidentMembershipsV1CreateRequest(server string, body IncidentMembershipsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentMembershipsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentMembershipsV1CreateRequestWithBody generates requests for IncidentMembershipsV1Create with any type of body
func NewIncidentMembershipsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_memberships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentMembershipsV1RevokeRequest calls the generic IncidentMembershipsV1Revoke builder with application/json body
func NewIncidentMembershipsV1RevokeRequest(server string, body IncidentMembershipsV1RevokeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentMembershipsV1RevokeRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentMembershipsV1RevokeRequestWithBody generates requests for IncidentMembershipsV1Revoke with any type of body
func NewIncidentMembershipsV1RevokeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_memberships/actions/revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentRolesV1ListRequest generates requests for IncidentRolesV1List
func NewIncidentRolesV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV1CreateRequest calls the generic IncidentRolesV1Create builder with application/json body
func NewIncidentRolesV1CreateRequest(server string, body IncidentRolesV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentRolesV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentRolesV1CreateRequestWithBody generates requests for IncidentRolesV1Create with any type of body
func NewIncidentRolesV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentRolesV1DeleteRequest generates requests for IncidentRolesV1Delete
func NewIncidentRolesV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV1ShowRequest generates requests for IncidentRolesV1Show
func NewIncidentRolesV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV1UpdateRequest calls the generic IncidentRolesV1Update builder with application/json body
func NewIncidentRolesV1UpdateRequest(server string, id string, body IncidentRolesV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentRolesV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIncidentRolesV1UpdateRequestWithBody generates requests for IncidentRolesV1Update with any type of body
func NewIncidentRolesV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentStatusesV1ListRequest generates requests for IncidentStatusesV1List
func NewIncidentStatusesV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentStatusesV1CreateRequest calls the generic IncidentStatusesV1Create builder with application/json body
func NewIncidentStatusesV1CreateRequest(server string, body IncidentStatusesV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentStatusesV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentStatusesV1CreateRequestWithBody generates requests for IncidentStatusesV1Create with any type of body
func NewIncidentStatusesV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentStatusesV1DeleteRequest generates requests for IncidentStatusesV1Delete
func NewIncidentStatusesV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentStatusesV1ShowRequest generates requests for IncidentStatusesV1Show
func NewIncidentStatusesV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentStatusesV1UpdateRequest calls the generic IncidentStatusesV1Update builder with application/json body
func NewIncidentStatusesV1UpdateRequest(server string, id string, body IncidentStatusesV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentStatusesV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIncidentStatusesV1UpdateRequestWithBody generates requests for IncidentStatusesV1Update with any type of body
func NewIncidentStatusesV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_statuses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentTypesV1ListRequest generates requests for IncidentTypesV1List
func NewIncidentTypesV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentTypesV1ShowRequest generates requests for IncidentTypesV1Show
func NewIncidentTypesV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incident_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV1ListRequest generates requests for IncidentsV1List
func NewIncidentsV1ListRequest(server string, params *IncidentsV1ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV1CreateRequest calls the generic IncidentsV1Create builder with application/json body
func NewIncidentsV1CreateRequest(server string, body IncidentsV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsV1CreateRequestWithBody generates requests for IncidentsV1Create with any type of body
func NewIncidentsV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsV1ShowRequest generates requests for IncidentsV1Show
func NewIncidentsV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUtilitiesV1OpenAPIRequest generates requests for UtilitiesV1OpenAPI
func NewUtilitiesV1OpenAPIRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUtilitiesV1OpenAPIV3Request generates requests for UtilitiesV1OpenAPIV3
func NewUtilitiesV1OpenAPIV3Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/openapiV3.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeveritiesV1ListRequest generates requests for SeveritiesV1List
func NewSeveritiesV1ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeveritiesV1CreateRequest calls the generic SeveritiesV1Create builder with application/json body
func NewSeveritiesV1CreateRequest(server string, body SeveritiesV1CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSeveritiesV1CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSeveritiesV1CreateRequestWithBody generates requests for SeveritiesV1Create with any type of body
func NewSeveritiesV1CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSeveritiesV1DeleteRequest generates requests for SeveritiesV1Delete
func NewSeveritiesV1DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeveritiesV1ShowRequest generates requests for SeveritiesV1Show
func NewSeveritiesV1ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSeveritiesV1UpdateRequest calls the generic SeveritiesV1Update builder with application/json body
func NewSeveritiesV1UpdateRequest(server string, id string, body SeveritiesV1UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSeveritiesV1UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSeveritiesV1UpdateRequestWithBody generates requests for SeveritiesV1Update with any type of body
func NewSeveritiesV1UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/severities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionsV2ListRequest generates requests for ActionsV2List
func NewActionsV2ListRequest(server string, params *ActionsV2ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncidentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentMode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_mode", runtime.ParamLocationQuery, *params.IncidentMode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionsV2ShowRequest generates requests for ActionsV2Show
func NewActionsV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAlertEventsV2CreateHTTPRequest calls the generic AlertEventsV2CreateHTTP builder with application/json body
func NewAlertEventsV2CreateHTTPRequest(server string, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, body AlertEventsV2CreateHTTPJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAlertEventsV2CreateHTTPRequestWithBody(server, alertSourceConfigId, params, "application/json", bodyReader)
}

// NewAlertEventsV2CreateHTTPRequestWithBody generates requests for AlertEventsV2CreateHTTP with any type of body
func NewAlertEventsV2CreateHTTPRequestWithBody(server string, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alert_source_config_id", runtime.ParamLocationPath, alertSourceConfigId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/alert_events/http/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2ListEntriesRequest generates requests for CatalogV2ListEntries
func NewCatalogV2ListEntriesRequest(server string, params *CatalogV2ListEntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalog_type_id", runtime.ParamLocationQuery, params.CatalogTypeId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2CreateEntryRequest calls the generic CatalogV2CreateEntry builder with application/json body
func NewCatalogV2CreateEntryRequest(server string, body CatalogV2CreateEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2CreateEntryRequestWithBody(server, "application/json", bodyReader)
}

// NewCatalogV2CreateEntryRequestWithBody generates requests for CatalogV2CreateEntry with any type of body
func NewCatalogV2CreateEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2DestroyEntryRequest generates requests for CatalogV2DestroyEntry
func NewCatalogV2DestroyEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2ShowEntryRequest generates requests for CatalogV2ShowEntry
func NewCatalogV2ShowEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2UpdateEntryRequest calls the generic CatalogV2UpdateEntry builder with application/json body
func NewCatalogV2UpdateEntryRequest(server string, id string, body CatalogV2UpdateEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2UpdateEntryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCatalogV2UpdateEntryRequestWithBody generates requests for CatalogV2UpdateEntry with any type of body
func NewCatalogV2UpdateEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2ListResourcesRequest generates requests for CatalogV2ListResources
func NewCatalogV2ListResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2ListTypesRequest generates requests for CatalogV2ListTypes
func NewCatalogV2ListTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2CreateTypeRequest calls the generic CatalogV2CreateType builder with application/json body
func NewCatalogV2CreateTypeRequest(server string, body CatalogV2CreateTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2CreateTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewCatalogV2CreateTypeRequestWithBody generates requests for CatalogV2CreateType with any type of body
func NewCatalogV2CreateTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2DestroyTypeRequest generates requests for CatalogV2DestroyType
func NewCatalogV2DestroyTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2ShowTypeRequest generates requests for CatalogV2ShowType
func NewCatalogV2ShowTypeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCatalogV2UpdateTypeRequest calls the generic CatalogV2UpdateType builder with application/json body
func NewCatalogV2UpdateTypeRequest(server string, id string, body CatalogV2UpdateTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2UpdateTypeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCatalogV2UpdateTypeRequestWithBody generates requests for CatalogV2UpdateType with any type of body
func NewCatalogV2UpdateTypeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCatalogV2UpdateTypeSchemaRequest calls the generic CatalogV2UpdateTypeSchema builder with application/json body
func NewCatalogV2UpdateTypeSchemaRequest(server string, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCatalogV2UpdateTypeSchemaRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCatalogV2UpdateTypeSchemaRequestWithBody generates requests for CatalogV2UpdateTypeSchema with any type of body
func NewCatalogV2UpdateTypeSchemaRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catalog_types/%s/actions/update_schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsV2ListRequest generates requests for CustomFieldsV2List
func NewCustomFieldsV2ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV2CreateRequest calls the generic CustomFieldsV2Create builder with application/json body
func NewCustomFieldsV2CreateRequest(server string, body CustomFieldsV2CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsV2CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewCustomFieldsV2CreateRequestWithBody generates requests for CustomFieldsV2Create with any type of body
func NewCustomFieldsV2CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/custom_fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCustomFieldsV2DeleteRequest generates requests for CustomFieldsV2Delete
func NewCustomFieldsV2DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV2ShowRequest generates requests for CustomFieldsV2Show
func NewCustomFieldsV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCustomFieldsV2UpdateRequest calls the generic CustomFieldsV2Update builder with application/json body
func NewCustomFieldsV2UpdateRequest(server string, id string, body CustomFieldsV2UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCustomFieldsV2UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCustomFieldsV2UpdateRequestWithBody generates requests for CustomFieldsV2Update with any type of body
func NewCustomFieldsV2UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/custom_fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEscalationsV2CreatePathRequest calls the generic EscalationsV2CreatePath builder with application/json body
func NewEscalationsV2CreatePathRequest(server string, body EscalationsV2CreatePathJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEscalationsV2CreatePathRequestWithBody(server, "application/json", bodyReader)
}

// NewEscalationsV2CreatePathRequestWithBody generates requests for EscalationsV2CreatePath with any type of body
func NewEscalationsV2CreatePathRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/escalation_paths")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEscalationsV2DestroyPathRequest generates requests for EscalationsV2DestroyPath
func NewEscalationsV2DestroyPathRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/escalation_paths/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEscalationsV2ShowPathRequest generates requests for EscalationsV2ShowPath
func NewEscalationsV2ShowPathRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/escalation_paths/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEscalationsV2UpdatePathRequest calls the generic EscalationsV2UpdatePath builder with application/json body
func NewEscalationsV2UpdatePathRequest(server string, id string, body EscalationsV2UpdatePathJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEscalationsV2UpdatePathRequestWithBody(server, id, "application/json", bodyReader)
}

// NewEscalationsV2UpdatePathRequestWithBody generates requests for EscalationsV2UpdatePath with any type of body
func NewEscalationsV2UpdatePathRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/escalation_paths/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFollowUpsV2ListRequest generates requests for FollowUpsV2List
func NewFollowUpsV2ListRequest(server string, params *FollowUpsV2ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/follow_ups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncidentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentMode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_mode", runtime.ParamLocationQuery, *params.IncidentMode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFollowUpsV2ShowRequest generates requests for FollowUpsV2Show
func NewFollowUpsV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/follow_ups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV2ListRequest generates requests for IncidentRolesV2List
func NewIncidentRolesV2ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV2CreateRequest calls the generic IncidentRolesV2Create builder with application/json body
func NewIncidentRolesV2CreateRequest(server string, body IncidentRolesV2CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentRolesV2CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentRolesV2CreateRequestWithBody generates requests for IncidentRolesV2Create with any type of body
func NewIncidentRolesV2CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentRolesV2DeleteRequest generates requests for IncidentRolesV2Delete
func NewIncidentRolesV2DeleteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV2ShowRequest generates requests for IncidentRolesV2Show
func NewIncidentRolesV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentRolesV2UpdateRequest calls the generic IncidentRolesV2Update builder with application/json body
func NewIncidentRolesV2UpdateRequest(server string, id string, body IncidentRolesV2UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentRolesV2UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIncidentRolesV2UpdateRequestWithBody generates requests for IncidentRolesV2Update with any type of body
func NewIncidentRolesV2UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentTimestampsV2ListRequest generates requests for IncidentTimestampsV2List
func NewIncidentTimestampsV2ListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_timestamps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentTimestampsV2ShowRequest generates requests for IncidentTimestampsV2Show
func NewIncidentTimestampsV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_timestamps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentUpdatesV2ListRequest generates requests for IncidentUpdatesV2List
func NewIncidentUpdatesV2ListRequest(server string, params *IncidentUpdatesV2ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incident_updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncidentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV2ListRequest generates requests for IncidentsV2List
func NewIncidentsV2ListRequest(server string, params *IncidentsV2ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusCategory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_category", runtime.ParamLocationQuery, *params.StatusCategory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Severity != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_type", runtime.ParamLocationQuery, *params.IncidentType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentRole != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_role", runtime.ParamLocationQuery, *params.IncidentRole); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CustomField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "custom_field", runtime.ParamLocationQuery, *params.CustomField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Mode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV2CreateRequest calls the generic IncidentsV2Create builder with application/json body
func NewIncidentsV2CreateRequest(server string, body IncidentsV2CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsV2CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewIncidentsV2CreateRequestWithBody generates requests for IncidentsV2Create with any type of body
func NewIncidentsV2CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIncidentsV2ShowRequest generates requests for IncidentsV2Show
func NewIncidentsV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIncidentsV2EditRequest calls the generic IncidentsV2Edit builder with application/json body
func NewIncidentsV2EditRequest(server string, id string, body IncidentsV2EditJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIncidentsV2EditRequestWithBody(server, id, "application/json", bodyReader)
}

// NewIncidentsV2EditRequestWithBody generates requests for IncidentsV2Edit with any type of body
func NewIncidentsV2EditRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/incidents/%s/actions/edit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewManagedResourcesV2CreateManagedResourceRequest calls the generic ManagedResourcesV2CreateManagedResource builder with application/json body
func NewManagedResourcesV2CreateManagedResourceRequest(server string, body ManagedResourcesV2CreateManagedResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewManagedResourcesV2CreateManagedResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewManagedResourcesV2CreateManagedResourceRequestWithBody generates requests for ManagedResourcesV2CreateManagedResource with any type of body
func NewManagedResourcesV2CreateManagedResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/managed_resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSchedulesV2ListScheduleEntriesRequest generates requests for SchedulesV2ListScheduleEntries
func NewSchedulesV2ListScheduleEntriesRequest(server string, params *SchedulesV2ListScheduleEntriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/schedule_entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schedule_id", runtime.ParamLocationQuery, params.ScheduleId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.EntryWindowStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entry_window_start", runtime.ParamLocationQuery, *params.EntryWindowStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EntryWindowEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entry_window_end", runtime.ParamLocationQuery, *params.EntryWindowEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSchedulesV2ListRequest generates requests for SchedulesV2List
func NewSchedulesV2ListRequest(server string, params *SchedulesV2ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSchedulesV2CreateRequest calls the generic SchedulesV2Create builder with application/json body
func NewSchedulesV2CreateRequest(server string, body SchedulesV2CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSchedulesV2CreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSchedulesV2CreateRequestWithBody generates requests for SchedulesV2Create with any type of body
func NewSchedulesV2CreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSchedulesV2DestroyRequest generates requests for SchedulesV2Destroy
func NewSchedulesV2DestroyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSchedulesV2ShowRequest generates requests for SchedulesV2Show
func NewSchedulesV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSchedulesV2UpdateRequest calls the generic SchedulesV2Update builder with application/json body
func NewSchedulesV2UpdateRequest(server string, id string, body SchedulesV2UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSchedulesV2UpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSchedulesV2UpdateRequestWithBody generates requests for SchedulesV2Update with any type of body
func NewSchedulesV2UpdateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersV2ListRequest generates requests for UsersV2List
func NewUsersV2ListRequest(server string, params *UsersV2ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SlackUserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slack_user_id", runtime.ParamLocationQuery, *params.SlackUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersV2ShowRequest generates requests for UsersV2Show
func NewUsersV2ShowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsV2ListWorkflowsRequest generates requests for WorkflowsV2ListWorkflows
func NewWorkflowsV2ListWorkflowsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsV2CreateWorkflowRequest calls the generic WorkflowsV2CreateWorkflow builder with application/json body
func NewWorkflowsV2CreateWorkflowRequest(server string, body WorkflowsV2CreateWorkflowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowsV2CreateWorkflowRequestWithBody(server, "application/json", bodyReader)
}

// NewWorkflowsV2CreateWorkflowRequestWithBody generates requests for WorkflowsV2CreateWorkflow with any type of body
func NewWorkflowsV2CreateWorkflowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/workflows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkflowsV2DestroyWorkflowRequest generates requests for WorkflowsV2DestroyWorkflow
func NewWorkflowsV2DestroyWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsV2ShowWorkflowRequest generates requests for WorkflowsV2ShowWorkflow
func NewWorkflowsV2ShowWorkflowRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkflowsV2UpdateWorkflowRequest calls the generic WorkflowsV2UpdateWorkflow builder with application/json body
func NewWorkflowsV2UpdateWorkflowRequest(server string, id string, body WorkflowsV2UpdateWorkflowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkflowsV2UpdateWorkflowRequestWithBody(server, id, "application/json", bodyReader)
}

// NewWorkflowsV2UpdateWorkflowRequestWithBody generates requests for WorkflowsV2UpdateWorkflow with any type of body
func NewWorkflowsV2UpdateWorkflowRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/workflows/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ActionsV1List request
	ActionsV1ListWithResponse(ctx context.Context, params *ActionsV1ListParams, reqEditors ...RequestEditorFn) (*ActionsV1ListResponse, error)

	// ActionsV1Show request
	ActionsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsV1ShowResponse, error)

	// CustomFieldOptionsV1List request
	CustomFieldOptionsV1ListWithResponse(ctx context.Context, params *CustomFieldOptionsV1ListParams, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1ListResponse, error)

	// CustomFieldOptionsV1Create request with any body
	CustomFieldOptionsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1CreateResponse, error)

	CustomFieldOptionsV1CreateWithResponse(ctx context.Context, body CustomFieldOptionsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1CreateResponse, error)

	// CustomFieldOptionsV1Delete request
	CustomFieldOptionsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1DeleteResponse, error)

	// CustomFieldOptionsV1Show request
	CustomFieldOptionsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1ShowResponse, error)

	// CustomFieldOptionsV1Update request with any body
	CustomFieldOptionsV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1UpdateResponse, error)

	CustomFieldOptionsV1UpdateWithResponse(ctx context.Context, id string, body CustomFieldOptionsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1UpdateResponse, error)

	// CustomFieldsV1List request
	CustomFieldsV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomFieldsV1ListResponse, error)

	// CustomFieldsV1Create request with any body
	CustomFieldsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV1CreateResponse, error)

	CustomFieldsV1CreateWithResponse(ctx context.Context, body CustomFieldsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV1CreateResponse, error)

	// CustomFieldsV1Delete request
	CustomFieldsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV1DeleteResponse, error)

	// CustomFieldsV1Show request
	CustomFieldsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV1ShowResponse, error)

	// CustomFieldsV1Update request with any body
	CustomFieldsV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV1UpdateResponse, error)

	CustomFieldsV1UpdateWithResponse(ctx context.Context, id string, body CustomFieldsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV1UpdateResponse, error)

	// UtilitiesV1Identity request
	UtilitiesV1IdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1IdentityResponse, error)

	// IncidentAttachmentsV1List request
	IncidentAttachmentsV1ListWithResponse(ctx context.Context, params *IncidentAttachmentsV1ListParams, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1ListResponse, error)

	// IncidentAttachmentsV1Create request with any body
	IncidentAttachmentsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1CreateResponse, error)

	IncidentAttachmentsV1CreateWithResponse(ctx context.Context, body IncidentAttachmentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1CreateResponse, error)

	// IncidentAttachmentsV1Delete request
	IncidentAttachmentsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1DeleteResponse, error)

	// IncidentMembershipsV1Create request with any body
	IncidentMembershipsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentMembershipsV1CreateResponse, error)

	IncidentMembershipsV1CreateWithResponse(ctx context.Context, body IncidentMembershipsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentMembershipsV1CreateResponse, error)

	// IncidentMembershipsV1Revoke request with any body
	IncidentMembershipsV1RevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentMembershipsV1RevokeResponse, error)

	IncidentMembershipsV1RevokeWithResponse(ctx context.Context, body IncidentMembershipsV1RevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentMembershipsV1RevokeResponse, error)

	// IncidentRolesV1List request
	IncidentRolesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentRolesV1ListResponse, error)

	// IncidentRolesV1Create request with any body
	IncidentRolesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV1CreateResponse, error)

	IncidentRolesV1CreateWithResponse(ctx context.Context, body IncidentRolesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV1CreateResponse, error)

	// IncidentRolesV1Delete request
	IncidentRolesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV1DeleteResponse, error)

	// IncidentRolesV1Show request
	IncidentRolesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV1ShowResponse, error)

	// IncidentRolesV1Update request with any body
	IncidentRolesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV1UpdateResponse, error)

	IncidentRolesV1UpdateWithResponse(ctx context.Context, id string, body IncidentRolesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV1UpdateResponse, error)

	// IncidentStatusesV1List request
	IncidentStatusesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentStatusesV1ListResponse, error)

	// IncidentStatusesV1Create request with any body
	IncidentStatusesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentStatusesV1CreateResponse, error)

	IncidentStatusesV1CreateWithResponse(ctx context.Context, body IncidentStatusesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentStatusesV1CreateResponse, error)

	// IncidentStatusesV1Delete request
	IncidentStatusesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentStatusesV1DeleteResponse, error)

	// IncidentStatusesV1Show request
	IncidentStatusesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentStatusesV1ShowResponse, error)

	// IncidentStatusesV1Update request with any body
	IncidentStatusesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentStatusesV1UpdateResponse, error)

	IncidentStatusesV1UpdateWithResponse(ctx context.Context, id string, body IncidentStatusesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentStatusesV1UpdateResponse, error)

	// IncidentTypesV1List request
	IncidentTypesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentTypesV1ListResponse, error)

	// IncidentTypesV1Show request
	IncidentTypesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentTypesV1ShowResponse, error)

	// IncidentsV1List request
	IncidentsV1ListWithResponse(ctx context.Context, params *IncidentsV1ListParams, reqEditors ...RequestEditorFn) (*IncidentsV1ListResponse, error)

	// IncidentsV1Create request with any body
	IncidentsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV1CreateResponse, error)

	IncidentsV1CreateWithResponse(ctx context.Context, body IncidentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV1CreateResponse, error)

	// IncidentsV1Show request
	IncidentsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsV1ShowResponse, error)

	// UtilitiesV1OpenAPI request
	UtilitiesV1OpenAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1OpenAPIResponse, error)

	// UtilitiesV1OpenAPIV3 request
	UtilitiesV1OpenAPIV3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1OpenAPIV3Response, error)

	// SeveritiesV1List request
	SeveritiesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeveritiesV1ListResponse, error)

	// SeveritiesV1Create request with any body
	SeveritiesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SeveritiesV1CreateResponse, error)

	SeveritiesV1CreateWithResponse(ctx context.Context, body SeveritiesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SeveritiesV1CreateResponse, error)

	// SeveritiesV1Delete request
	SeveritiesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SeveritiesV1DeleteResponse, error)

	// SeveritiesV1Show request
	SeveritiesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SeveritiesV1ShowResponse, error)

	// SeveritiesV1Update request with any body
	SeveritiesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SeveritiesV1UpdateResponse, error)

	SeveritiesV1UpdateWithResponse(ctx context.Context, id string, body SeveritiesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SeveritiesV1UpdateResponse, error)

	// ActionsV2List request
	ActionsV2ListWithResponse(ctx context.Context, params *ActionsV2ListParams, reqEditors ...RequestEditorFn) (*ActionsV2ListResponse, error)

	// ActionsV2Show request
	ActionsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsV2ShowResponse, error)

	// AlertEventsV2CreateHTTP request with any body
	AlertEventsV2CreateHTTPWithBodyWithResponse(ctx context.Context, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertEventsV2CreateHTTPResponse, error)

	AlertEventsV2CreateHTTPWithResponse(ctx context.Context, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, body AlertEventsV2CreateHTTPJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertEventsV2CreateHTTPResponse, error)

	// CatalogV2ListEntries request
	CatalogV2ListEntriesWithResponse(ctx context.Context, params *CatalogV2ListEntriesParams, reqEditors ...RequestEditorFn) (*CatalogV2ListEntriesResponse, error)

	// CatalogV2CreateEntry request with any body
	CatalogV2CreateEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2CreateEntryResponse, error)

	CatalogV2CreateEntryWithResponse(ctx context.Context, body CatalogV2CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2CreateEntryResponse, error)

	// CatalogV2DestroyEntry request
	CatalogV2DestroyEntryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2DestroyEntryResponse, error)

	// CatalogV2ShowEntry request
	CatalogV2ShowEntryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2ShowEntryResponse, error)

	// CatalogV2UpdateEntry request with any body
	CatalogV2UpdateEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateEntryResponse, error)

	CatalogV2UpdateEntryWithResponse(ctx context.Context, id string, body CatalogV2UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateEntryResponse, error)

	// CatalogV2ListResources request
	CatalogV2ListResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CatalogV2ListResourcesResponse, error)

	// CatalogV2ListTypes request
	CatalogV2ListTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CatalogV2ListTypesResponse, error)

	// CatalogV2CreateType request with any body
	CatalogV2CreateTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2CreateTypeResponse, error)

	CatalogV2CreateTypeWithResponse(ctx context.Context, body CatalogV2CreateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2CreateTypeResponse, error)

	// CatalogV2DestroyType request
	CatalogV2DestroyTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2DestroyTypeResponse, error)

	// CatalogV2ShowType request
	CatalogV2ShowTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2ShowTypeResponse, error)

	// CatalogV2UpdateType request with any body
	CatalogV2UpdateTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeResponse, error)

	CatalogV2UpdateTypeWithResponse(ctx context.Context, id string, body CatalogV2UpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeResponse, error)

	// CatalogV2UpdateTypeSchema request with any body
	CatalogV2UpdateTypeSchemaWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeSchemaResponse, error)

	CatalogV2UpdateTypeSchemaWithResponse(ctx context.Context, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeSchemaResponse, error)

	// CustomFieldsV2List request
	CustomFieldsV2ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomFieldsV2ListResponse, error)

	// CustomFieldsV2Create request with any body
	CustomFieldsV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV2CreateResponse, error)

	CustomFieldsV2CreateWithResponse(ctx context.Context, body CustomFieldsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV2CreateResponse, error)

	// CustomFieldsV2Delete request
	CustomFieldsV2DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV2DeleteResponse, error)

	// CustomFieldsV2Show request
	CustomFieldsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV2ShowResponse, error)

	// CustomFieldsV2Update request with any body
	CustomFieldsV2UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV2UpdateResponse, error)

	CustomFieldsV2UpdateWithResponse(ctx context.Context, id string, body CustomFieldsV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV2UpdateResponse, error)

	// EscalationsV2CreatePath request with any body
	EscalationsV2CreatePathWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EscalationsV2CreatePathResponse, error)

	EscalationsV2CreatePathWithResponse(ctx context.Context, body EscalationsV2CreatePathJSONRequestBody, reqEditors ...RequestEditorFn) (*EscalationsV2CreatePathResponse, error)

	// EscalationsV2DestroyPath request
	EscalationsV2DestroyPathWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*EscalationsV2DestroyPathResponse, error)

	// EscalationsV2ShowPath request
	EscalationsV2ShowPathWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*EscalationsV2ShowPathResponse, error)

	// EscalationsV2UpdatePath request with any body
	EscalationsV2UpdatePathWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EscalationsV2UpdatePathResponse, error)

	EscalationsV2UpdatePathWithResponse(ctx context.Context, id string, body EscalationsV2UpdatePathJSONRequestBody, reqEditors ...RequestEditorFn) (*EscalationsV2UpdatePathResponse, error)

	// FollowUpsV2List request
	FollowUpsV2ListWithResponse(ctx context.Context, params *FollowUpsV2ListParams, reqEditors ...RequestEditorFn) (*FollowUpsV2ListResponse, error)

	// FollowUpsV2Show request
	FollowUpsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*FollowUpsV2ShowResponse, error)

	// IncidentRolesV2List request
	IncidentRolesV2ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentRolesV2ListResponse, error)

	// IncidentRolesV2Create request with any body
	IncidentRolesV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV2CreateResponse, error)

	IncidentRolesV2CreateWithResponse(ctx context.Context, body IncidentRolesV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV2CreateResponse, error)

	// IncidentRolesV2Delete request
	IncidentRolesV2DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV2DeleteResponse, error)

	// IncidentRolesV2Show request
	IncidentRolesV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV2ShowResponse, error)

	// IncidentRolesV2Update request with any body
	IncidentRolesV2UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV2UpdateResponse, error)

	IncidentRolesV2UpdateWithResponse(ctx context.Context, id string, body IncidentRolesV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV2UpdateResponse, error)

	// IncidentTimestampsV2List request
	IncidentTimestampsV2ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentTimestampsV2ListResponse, error)

	// IncidentTimestampsV2Show request
	IncidentTimestampsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentTimestampsV2ShowResponse, error)

	// IncidentUpdatesV2List request
	IncidentUpdatesV2ListWithResponse(ctx context.Context, params *IncidentUpdatesV2ListParams, reqEditors ...RequestEditorFn) (*IncidentUpdatesV2ListResponse, error)

	// IncidentsV2List request
	IncidentsV2ListWithResponse(ctx context.Context, params *IncidentsV2ListParams, reqEditors ...RequestEditorFn) (*IncidentsV2ListResponse, error)

	// IncidentsV2Create request with any body
	IncidentsV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV2CreateResponse, error)

	IncidentsV2CreateWithResponse(ctx context.Context, body IncidentsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV2CreateResponse, error)

	// IncidentsV2Show request
	IncidentsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsV2ShowResponse, error)

	// IncidentsV2Edit request with any body
	IncidentsV2EditWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV2EditResponse, error)

	IncidentsV2EditWithResponse(ctx context.Context, id string, body IncidentsV2EditJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV2EditResponse, error)

	// ManagedResourcesV2CreateManagedResource request with any body
	ManagedResourcesV2CreateManagedResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagedResourcesV2CreateManagedResourceResponse, error)

	ManagedResourcesV2CreateManagedResourceWithResponse(ctx context.Context, body ManagedResourcesV2CreateManagedResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagedResourcesV2CreateManagedResourceResponse, error)

	// SchedulesV2ListScheduleEntries request
	SchedulesV2ListScheduleEntriesWithResponse(ctx context.Context, params *SchedulesV2ListScheduleEntriesParams, reqEditors ...RequestEditorFn) (*SchedulesV2ListScheduleEntriesResponse, error)

	// SchedulesV2List request
	SchedulesV2ListWithResponse(ctx context.Context, params *SchedulesV2ListParams, reqEditors ...RequestEditorFn) (*SchedulesV2ListResponse, error)

	// SchedulesV2Create request with any body
	SchedulesV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulesV2CreateResponse, error)

	SchedulesV2CreateWithResponse(ctx context.Context, body SchedulesV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulesV2CreateResponse, error)

	// SchedulesV2Destroy request
	SchedulesV2DestroyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SchedulesV2DestroyResponse, error)

	// SchedulesV2Show request
	SchedulesV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SchedulesV2ShowResponse, error)

	// SchedulesV2Update request with any body
	SchedulesV2UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulesV2UpdateResponse, error)

	SchedulesV2UpdateWithResponse(ctx context.Context, id string, body SchedulesV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulesV2UpdateResponse, error)

	// UsersV2List request
	UsersV2ListWithResponse(ctx context.Context, params *UsersV2ListParams, reqEditors ...RequestEditorFn) (*UsersV2ListResponse, error)

	// UsersV2Show request
	UsersV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersV2ShowResponse, error)

	// WorkflowsV2ListWorkflows request
	WorkflowsV2ListWorkflowsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WorkflowsV2ListWorkflowsResponse, error)

	// WorkflowsV2CreateWorkflow request with any body
	WorkflowsV2CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsV2CreateWorkflowResponse, error)

	WorkflowsV2CreateWorkflowWithResponse(ctx context.Context, body WorkflowsV2CreateWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsV2CreateWorkflowResponse, error)

	// WorkflowsV2DestroyWorkflow request
	WorkflowsV2DestroyWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WorkflowsV2DestroyWorkflowResponse, error)

	// WorkflowsV2ShowWorkflow request
	WorkflowsV2ShowWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WorkflowsV2ShowWorkflowResponse, error)

	// WorkflowsV2UpdateWorkflow request with any body
	WorkflowsV2UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsV2UpdateWorkflowResponse, error)

	WorkflowsV2UpdateWorkflowWithResponse(ctx context.Context, id string, body WorkflowsV2UpdateWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsV2UpdateWorkflowResponse, error)
}

type ActionsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody
}

// Status returns HTTPResponse.Status
func (r ActionsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody
}

// Status returns HTTPResponse.Status
func (r ActionsV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody3
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody3
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody3
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldOptionsV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody3
}

// Status returns HTTPResponse.Status
func (r CustomFieldOptionsV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldOptionsV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody4
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody4
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody4
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody4
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UtilitiesV1IdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityResponseBody
}

// Status returns HTTPResponse.Status
func (r UtilitiesV1IdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UtilitiesV1IdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentAttachmentsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody7
}

// Status returns HTTPResponse.Status
func (r IncidentAttachmentsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentAttachmentsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentAttachmentsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateResponseBody
}

// Status returns HTTPResponse.Status
func (r IncidentAttachmentsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentAttachmentsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentAttachmentsV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IncidentAttachmentsV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentAttachmentsV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentMembershipsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateResponseBody2
}

// Status returns HTTPResponse.Status
func (r IncidentMembershipsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentMembershipsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentMembershipsV1RevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IncidentMembershipsV1RevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentMembershipsV1RevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody8
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody7
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody7
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody7
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody10
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody9
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody9
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentStatusesV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody9
}

// Status returns HTTPResponse.Status
func (r IncidentStatusesV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentStatusesV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentTypesV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody12
}

// Status returns HTTPResponse.Status
func (r IncidentTypesV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentTypesV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentTypesV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody11
}

// Status returns HTTPResponse.Status
func (r IncidentTypesV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentTypesV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody14
}

// Status returns HTTPResponse.Status
func (r IncidentsV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody12
}

// Status returns HTTPResponse.Status
func (r IncidentsV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody12
}

// Status returns HTTPResponse.Status
func (r IncidentsV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UtilitiesV1OpenAPIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r UtilitiesV1OpenAPIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UtilitiesV1OpenAPIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UtilitiesV1OpenAPIV3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r UtilitiesV1OpenAPIV3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UtilitiesV1OpenAPIV3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody17
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody15
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody15
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SeveritiesV1UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody15
}

// Status returns HTTPResponse.Status
func (r SeveritiesV1UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SeveritiesV1UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody2
}

// Status returns HTTPResponse.Status
func (r ActionsV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionsV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody2
}

// Status returns HTTPResponse.Status
func (r ActionsV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionsV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AlertEventsV2CreateHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *AlertResult
}

// Status returns HTTPResponse.Status
func (r AlertEventsV2CreateHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertEventsV2CreateHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ListEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListEntriesResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ListEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ListEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2CreateEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateEntryResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2CreateEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2CreateEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2DestroyEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogV2DestroyEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2DestroyEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ShowEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowEntryResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ShowEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ShowEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2UpdateEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowEntryResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2UpdateEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2UpdateEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ListResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResourcesResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ListResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ListResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ListTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTypesResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ListTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ListTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2CreateTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateTypeResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2CreateTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2CreateTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2DestroyTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CatalogV2DestroyTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2DestroyTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2ShowTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTypeResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2ShowTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2ShowTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2UpdateTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTypeResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2UpdateTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2UpdateTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CatalogV2UpdateTypeSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateTypeResponseBody
}

// Status returns HTTPResponse.Status
func (r CatalogV2UpdateTypeSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CatalogV2UpdateTypeSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody5
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV2CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody5
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV2CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV2CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV2DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV2DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV2DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody5
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CustomFieldsV2UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody5
}

// Status returns HTTPResponse.Status
func (r CustomFieldsV2UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CustomFieldsV2UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EscalationsV2CreatePathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreatePathResponseBody
}

// Status returns HTTPResponse.Status
func (r EscalationsV2CreatePathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EscalationsV2CreatePathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EscalationsV2DestroyPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EscalationsV2DestroyPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EscalationsV2DestroyPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EscalationsV2ShowPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePathResponseBody
}

// Status returns HTTPResponse.Status
func (r EscalationsV2ShowPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EscalationsV2ShowPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EscalationsV2UpdatePathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePathResponseBody
}

// Status returns HTTPResponse.Status
func (r EscalationsV2UpdatePathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EscalationsV2UpdatePathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FollowUpsV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody6
}

// Status returns HTTPResponse.Status
func (r FollowUpsV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FollowUpsV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FollowUpsV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody6
}

// Status returns HTTPResponse.Status
func (r FollowUpsV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FollowUpsV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody9
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV2CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody8
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV2CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV2CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV2DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV2DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV2DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody8
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentRolesV2UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody8
}

// Status returns HTTPResponse.Status
func (r IncidentRolesV2UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentRolesV2UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentTimestampsV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody11
}

// Status returns HTTPResponse.Status
func (r IncidentTimestampsV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentTimestampsV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentTimestampsV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody10
}

// Status returns HTTPResponse.Status
func (r IncidentTimestampsV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentTimestampsV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentUpdatesV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody13
}

// Status returns HTTPResponse.Status
func (r IncidentUpdatesV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentUpdatesV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody15
}

// Status returns HTTPResponse.Status
func (r IncidentsV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV2CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody13
}

// Status returns HTTPResponse.Status
func (r IncidentsV2CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV2CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody13
}

// Status returns HTTPResponse.Status
func (r IncidentsV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IncidentsV2EditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody13
}

// Status returns HTTPResponse.Status
func (r IncidentsV2EditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IncidentsV2EditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ManagedResourcesV2CreateManagedResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateManagedResourceResponseBody
}

// Status returns HTTPResponse.Status
func (r ManagedResourcesV2CreateManagedResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ManagedResourcesV2CreateManagedResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulesV2ListScheduleEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListScheduleEntriesResponseBody
}

// Status returns HTTPResponse.Status
func (r SchedulesV2ListScheduleEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulesV2ListScheduleEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulesV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody16
}

// Status returns HTTPResponse.Status
func (r SchedulesV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulesV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulesV2CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowResponseBody14
}

// Status returns HTTPResponse.Status
func (r SchedulesV2CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulesV2CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulesV2DestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SchedulesV2DestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulesV2DestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulesV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody14
}

// Status returns HTTPResponse.Status
func (r SchedulesV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulesV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulesV2UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody14
}

// Status returns HTTPResponse.Status
func (r SchedulesV2UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulesV2UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersV2ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponseBody18
}

// Status returns HTTPResponse.Status
func (r UsersV2ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersV2ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersV2ShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowResponseBody16
}

// Status returns HTTPResponse.Status
func (r UsersV2ShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersV2ShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsV2ListWorkflowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListWorkflowsResponseBody
}

// Status returns HTTPResponse.Status
func (r WorkflowsV2ListWorkflowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsV2ListWorkflowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsV2CreateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ShowWorkflowResponseBody
}

// Status returns HTTPResponse.Status
func (r WorkflowsV2CreateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsV2CreateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsV2DestroyWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WorkflowsV2DestroyWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsV2DestroyWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsV2ShowWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowWorkflowResponseBody
}

// Status returns HTTPResponse.Status
func (r WorkflowsV2ShowWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsV2ShowWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsV2UpdateWorkflowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ShowWorkflowResponseBody
}

// Status returns HTTPResponse.Status
func (r WorkflowsV2UpdateWorkflowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsV2UpdateWorkflowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ActionsV1ListWithResponse request returning *ActionsV1ListResponse
func (c *ClientWithResponses) ActionsV1ListWithResponse(ctx context.Context, params *ActionsV1ListParams, reqEditors ...RequestEditorFn) (*ActionsV1ListResponse, error) {
	rsp, err := c.ActionsV1List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsV1ListResponse(rsp)
}

// ActionsV1ShowWithResponse request returning *ActionsV1ShowResponse
func (c *ClientWithResponses) ActionsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsV1ShowResponse, error) {
	rsp, err := c.ActionsV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsV1ShowResponse(rsp)
}

// CustomFieldOptionsV1ListWithResponse request returning *CustomFieldOptionsV1ListResponse
func (c *ClientWithResponses) CustomFieldOptionsV1ListWithResponse(ctx context.Context, params *CustomFieldOptionsV1ListParams, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1ListResponse, error) {
	rsp, err := c.CustomFieldOptionsV1List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1ListResponse(rsp)
}

// CustomFieldOptionsV1CreateWithBodyWithResponse request with arbitrary body returning *CustomFieldOptionsV1CreateResponse
func (c *ClientWithResponses) CustomFieldOptionsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1CreateResponse, error) {
	rsp, err := c.CustomFieldOptionsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldOptionsV1CreateWithResponse(ctx context.Context, body CustomFieldOptionsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1CreateResponse, error) {
	rsp, err := c.CustomFieldOptionsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1CreateResponse(rsp)
}

// CustomFieldOptionsV1DeleteWithResponse request returning *CustomFieldOptionsV1DeleteResponse
func (c *ClientWithResponses) CustomFieldOptionsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1DeleteResponse, error) {
	rsp, err := c.CustomFieldOptionsV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1DeleteResponse(rsp)
}

// CustomFieldOptionsV1ShowWithResponse request returning *CustomFieldOptionsV1ShowResponse
func (c *ClientWithResponses) CustomFieldOptionsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1ShowResponse, error) {
	rsp, err := c.CustomFieldOptionsV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1ShowResponse(rsp)
}

// CustomFieldOptionsV1UpdateWithBodyWithResponse request with arbitrary body returning *CustomFieldOptionsV1UpdateResponse
func (c *ClientWithResponses) CustomFieldOptionsV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1UpdateResponse, error) {
	rsp, err := c.CustomFieldOptionsV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldOptionsV1UpdateWithResponse(ctx context.Context, id string, body CustomFieldOptionsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldOptionsV1UpdateResponse, error) {
	rsp, err := c.CustomFieldOptionsV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldOptionsV1UpdateResponse(rsp)
}

// CustomFieldsV1ListWithResponse request returning *CustomFieldsV1ListResponse
func (c *ClientWithResponses) CustomFieldsV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomFieldsV1ListResponse, error) {
	rsp, err := c.CustomFieldsV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1ListResponse(rsp)
}

// CustomFieldsV1CreateWithBodyWithResponse request with arbitrary body returning *CustomFieldsV1CreateResponse
func (c *ClientWithResponses) CustomFieldsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV1CreateResponse, error) {
	rsp, err := c.CustomFieldsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldsV1CreateWithResponse(ctx context.Context, body CustomFieldsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV1CreateResponse, error) {
	rsp, err := c.CustomFieldsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1CreateResponse(rsp)
}

// CustomFieldsV1DeleteWithResponse request returning *CustomFieldsV1DeleteResponse
func (c *ClientWithResponses) CustomFieldsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV1DeleteResponse, error) {
	rsp, err := c.CustomFieldsV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1DeleteResponse(rsp)
}

// CustomFieldsV1ShowWithResponse request returning *CustomFieldsV1ShowResponse
func (c *ClientWithResponses) CustomFieldsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV1ShowResponse, error) {
	rsp, err := c.CustomFieldsV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1ShowResponse(rsp)
}

// CustomFieldsV1UpdateWithBodyWithResponse request with arbitrary body returning *CustomFieldsV1UpdateResponse
func (c *ClientWithResponses) CustomFieldsV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV1UpdateResponse, error) {
	rsp, err := c.CustomFieldsV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldsV1UpdateWithResponse(ctx context.Context, id string, body CustomFieldsV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV1UpdateResponse, error) {
	rsp, err := c.CustomFieldsV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV1UpdateResponse(rsp)
}

// UtilitiesV1IdentityWithResponse request returning *UtilitiesV1IdentityResponse
func (c *ClientWithResponses) UtilitiesV1IdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1IdentityResponse, error) {
	rsp, err := c.UtilitiesV1Identity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUtilitiesV1IdentityResponse(rsp)
}

// IncidentAttachmentsV1ListWithResponse request returning *IncidentAttachmentsV1ListResponse
func (c *ClientWithResponses) IncidentAttachmentsV1ListWithResponse(ctx context.Context, params *IncidentAttachmentsV1ListParams, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1ListResponse, error) {
	rsp, err := c.IncidentAttachmentsV1List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentAttachmentsV1ListResponse(rsp)
}

// IncidentAttachmentsV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentAttachmentsV1CreateResponse
func (c *ClientWithResponses) IncidentAttachmentsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1CreateResponse, error) {
	rsp, err := c.IncidentAttachmentsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentAttachmentsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentAttachmentsV1CreateWithResponse(ctx context.Context, body IncidentAttachmentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1CreateResponse, error) {
	rsp, err := c.IncidentAttachmentsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentAttachmentsV1CreateResponse(rsp)
}

// IncidentAttachmentsV1DeleteWithResponse request returning *IncidentAttachmentsV1DeleteResponse
func (c *ClientWithResponses) IncidentAttachmentsV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentAttachmentsV1DeleteResponse, error) {
	rsp, err := c.IncidentAttachmentsV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentAttachmentsV1DeleteResponse(rsp)
}

// IncidentMembershipsV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentMembershipsV1CreateResponse
func (c *ClientWithResponses) IncidentMembershipsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentMembershipsV1CreateResponse, error) {
	rsp, err := c.IncidentMembershipsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentMembershipsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentMembershipsV1CreateWithResponse(ctx context.Context, body IncidentMembershipsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentMembershipsV1CreateResponse, error) {
	rsp, err := c.IncidentMembershipsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentMembershipsV1CreateResponse(rsp)
}

// IncidentMembershipsV1RevokeWithBodyWithResponse request with arbitrary body returning *IncidentMembershipsV1RevokeResponse
func (c *ClientWithResponses) IncidentMembershipsV1RevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentMembershipsV1RevokeResponse, error) {
	rsp, err := c.IncidentMembershipsV1RevokeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentMembershipsV1RevokeResponse(rsp)
}

func (c *ClientWithResponses) IncidentMembershipsV1RevokeWithResponse(ctx context.Context, body IncidentMembershipsV1RevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentMembershipsV1RevokeResponse, error) {
	rsp, err := c.IncidentMembershipsV1Revoke(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentMembershipsV1RevokeResponse(rsp)
}

// IncidentRolesV1ListWithResponse request returning *IncidentRolesV1ListResponse
func (c *ClientWithResponses) IncidentRolesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentRolesV1ListResponse, error) {
	rsp, err := c.IncidentRolesV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1ListResponse(rsp)
}

// IncidentRolesV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentRolesV1CreateResponse
func (c *ClientWithResponses) IncidentRolesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV1CreateResponse, error) {
	rsp, err := c.IncidentRolesV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentRolesV1CreateWithResponse(ctx context.Context, body IncidentRolesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV1CreateResponse, error) {
	rsp, err := c.IncidentRolesV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1CreateResponse(rsp)
}

// IncidentRolesV1DeleteWithResponse request returning *IncidentRolesV1DeleteResponse
func (c *ClientWithResponses) IncidentRolesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV1DeleteResponse, error) {
	rsp, err := c.IncidentRolesV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1DeleteResponse(rsp)
}

// IncidentRolesV1ShowWithResponse request returning *IncidentRolesV1ShowResponse
func (c *ClientWithResponses) IncidentRolesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV1ShowResponse, error) {
	rsp, err := c.IncidentRolesV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1ShowResponse(rsp)
}

// IncidentRolesV1UpdateWithBodyWithResponse request with arbitrary body returning *IncidentRolesV1UpdateResponse
func (c *ClientWithResponses) IncidentRolesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV1UpdateResponse, error) {
	rsp, err := c.IncidentRolesV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) IncidentRolesV1UpdateWithResponse(ctx context.Context, id string, body IncidentRolesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV1UpdateResponse, error) {
	rsp, err := c.IncidentRolesV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV1UpdateResponse(rsp)
}

// IncidentStatusesV1ListWithResponse request returning *IncidentStatusesV1ListResponse
func (c *ClientWithResponses) IncidentStatusesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentStatusesV1ListResponse, error) {
	rsp, err := c.IncidentStatusesV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1ListResponse(rsp)
}

// IncidentStatusesV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentStatusesV1CreateResponse
func (c *ClientWithResponses) IncidentStatusesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentStatusesV1CreateResponse, error) {
	rsp, err := c.IncidentStatusesV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentStatusesV1CreateWithResponse(ctx context.Context, body IncidentStatusesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentStatusesV1CreateResponse, error) {
	rsp, err := c.IncidentStatusesV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1CreateResponse(rsp)
}

// IncidentStatusesV1DeleteWithResponse request returning *IncidentStatusesV1DeleteResponse
func (c *ClientWithResponses) IncidentStatusesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentStatusesV1DeleteResponse, error) {
	rsp, err := c.IncidentStatusesV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1DeleteResponse(rsp)
}

// IncidentStatusesV1ShowWithResponse request returning *IncidentStatusesV1ShowResponse
func (c *ClientWithResponses) IncidentStatusesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentStatusesV1ShowResponse, error) {
	rsp, err := c.IncidentStatusesV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1ShowResponse(rsp)
}

// IncidentStatusesV1UpdateWithBodyWithResponse request with arbitrary body returning *IncidentStatusesV1UpdateResponse
func (c *ClientWithResponses) IncidentStatusesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentStatusesV1UpdateResponse, error) {
	rsp, err := c.IncidentStatusesV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) IncidentStatusesV1UpdateWithResponse(ctx context.Context, id string, body IncidentStatusesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentStatusesV1UpdateResponse, error) {
	rsp, err := c.IncidentStatusesV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentStatusesV1UpdateResponse(rsp)
}

// IncidentTypesV1ListWithResponse request returning *IncidentTypesV1ListResponse
func (c *ClientWithResponses) IncidentTypesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentTypesV1ListResponse, error) {
	rsp, err := c.IncidentTypesV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentTypesV1ListResponse(rsp)
}

// IncidentTypesV1ShowWithResponse request returning *IncidentTypesV1ShowResponse
func (c *ClientWithResponses) IncidentTypesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentTypesV1ShowResponse, error) {
	rsp, err := c.IncidentTypesV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentTypesV1ShowResponse(rsp)
}

// IncidentsV1ListWithResponse request returning *IncidentsV1ListResponse
func (c *ClientWithResponses) IncidentsV1ListWithResponse(ctx context.Context, params *IncidentsV1ListParams, reqEditors ...RequestEditorFn) (*IncidentsV1ListResponse, error) {
	rsp, err := c.IncidentsV1List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV1ListResponse(rsp)
}

// IncidentsV1CreateWithBodyWithResponse request with arbitrary body returning *IncidentsV1CreateResponse
func (c *ClientWithResponses) IncidentsV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV1CreateResponse, error) {
	rsp, err := c.IncidentsV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV1CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentsV1CreateWithResponse(ctx context.Context, body IncidentsV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV1CreateResponse, error) {
	rsp, err := c.IncidentsV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV1CreateResponse(rsp)
}

// IncidentsV1ShowWithResponse request returning *IncidentsV1ShowResponse
func (c *ClientWithResponses) IncidentsV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsV1ShowResponse, error) {
	rsp, err := c.IncidentsV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV1ShowResponse(rsp)
}

// UtilitiesV1OpenAPIWithResponse request returning *UtilitiesV1OpenAPIResponse
func (c *ClientWithResponses) UtilitiesV1OpenAPIWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1OpenAPIResponse, error) {
	rsp, err := c.UtilitiesV1OpenAPI(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUtilitiesV1OpenAPIResponse(rsp)
}

// UtilitiesV1OpenAPIV3WithResponse request returning *UtilitiesV1OpenAPIV3Response
func (c *ClientWithResponses) UtilitiesV1OpenAPIV3WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UtilitiesV1OpenAPIV3Response, error) {
	rsp, err := c.UtilitiesV1OpenAPIV3(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUtilitiesV1OpenAPIV3Response(rsp)
}

// SeveritiesV1ListWithResponse request returning *SeveritiesV1ListResponse
func (c *ClientWithResponses) SeveritiesV1ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SeveritiesV1ListResponse, error) {
	rsp, err := c.SeveritiesV1List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1ListResponse(rsp)
}

// SeveritiesV1CreateWithBodyWithResponse request with arbitrary body returning *SeveritiesV1CreateResponse
func (c *ClientWithResponses) SeveritiesV1CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SeveritiesV1CreateResponse, error) {
	rsp, err := c.SeveritiesV1CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1CreateResponse(rsp)
}

func (c *ClientWithResponses) SeveritiesV1CreateWithResponse(ctx context.Context, body SeveritiesV1CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SeveritiesV1CreateResponse, error) {
	rsp, err := c.SeveritiesV1Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1CreateResponse(rsp)
}

// SeveritiesV1DeleteWithResponse request returning *SeveritiesV1DeleteResponse
func (c *ClientWithResponses) SeveritiesV1DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SeveritiesV1DeleteResponse, error) {
	rsp, err := c.SeveritiesV1Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1DeleteResponse(rsp)
}

// SeveritiesV1ShowWithResponse request returning *SeveritiesV1ShowResponse
func (c *ClientWithResponses) SeveritiesV1ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SeveritiesV1ShowResponse, error) {
	rsp, err := c.SeveritiesV1Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1ShowResponse(rsp)
}

// SeveritiesV1UpdateWithBodyWithResponse request with arbitrary body returning *SeveritiesV1UpdateResponse
func (c *ClientWithResponses) SeveritiesV1UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SeveritiesV1UpdateResponse, error) {
	rsp, err := c.SeveritiesV1UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1UpdateResponse(rsp)
}

func (c *ClientWithResponses) SeveritiesV1UpdateWithResponse(ctx context.Context, id string, body SeveritiesV1UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SeveritiesV1UpdateResponse, error) {
	rsp, err := c.SeveritiesV1Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSeveritiesV1UpdateResponse(rsp)
}

// ActionsV2ListWithResponse request returning *ActionsV2ListResponse
func (c *ClientWithResponses) ActionsV2ListWithResponse(ctx context.Context, params *ActionsV2ListParams, reqEditors ...RequestEditorFn) (*ActionsV2ListResponse, error) {
	rsp, err := c.ActionsV2List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsV2ListResponse(rsp)
}

// ActionsV2ShowWithResponse request returning *ActionsV2ShowResponse
func (c *ClientWithResponses) ActionsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ActionsV2ShowResponse, error) {
	rsp, err := c.ActionsV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionsV2ShowResponse(rsp)
}

// AlertEventsV2CreateHTTPWithBodyWithResponse request with arbitrary body returning *AlertEventsV2CreateHTTPResponse
func (c *ClientWithResponses) AlertEventsV2CreateHTTPWithBodyWithResponse(ctx context.Context, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AlertEventsV2CreateHTTPResponse, error) {
	rsp, err := c.AlertEventsV2CreateHTTPWithBody(ctx, alertSourceConfigId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertEventsV2CreateHTTPResponse(rsp)
}

func (c *ClientWithResponses) AlertEventsV2CreateHTTPWithResponse(ctx context.Context, alertSourceConfigId string, params *AlertEventsV2CreateHTTPParams, body AlertEventsV2CreateHTTPJSONRequestBody, reqEditors ...RequestEditorFn) (*AlertEventsV2CreateHTTPResponse, error) {
	rsp, err := c.AlertEventsV2CreateHTTP(ctx, alertSourceConfigId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertEventsV2CreateHTTPResponse(rsp)
}

// CatalogV2ListEntriesWithResponse request returning *CatalogV2ListEntriesResponse
func (c *ClientWithResponses) CatalogV2ListEntriesWithResponse(ctx context.Context, params *CatalogV2ListEntriesParams, reqEditors ...RequestEditorFn) (*CatalogV2ListEntriesResponse, error) {
	rsp, err := c.CatalogV2ListEntries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ListEntriesResponse(rsp)
}

// CatalogV2CreateEntryWithBodyWithResponse request with arbitrary body returning *CatalogV2CreateEntryResponse
func (c *ClientWithResponses) CatalogV2CreateEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2CreateEntryResponse, error) {
	rsp, err := c.CatalogV2CreateEntryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2CreateEntryResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2CreateEntryWithResponse(ctx context.Context, body CatalogV2CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2CreateEntryResponse, error) {
	rsp, err := c.CatalogV2CreateEntry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2CreateEntryResponse(rsp)
}

// CatalogV2DestroyEntryWithResponse request returning *CatalogV2DestroyEntryResponse
func (c *ClientWithResponses) CatalogV2DestroyEntryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2DestroyEntryResponse, error) {
	rsp, err := c.CatalogV2DestroyEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2DestroyEntryResponse(rsp)
}

// CatalogV2ShowEntryWithResponse request returning *CatalogV2ShowEntryResponse
func (c *ClientWithResponses) CatalogV2ShowEntryWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2ShowEntryResponse, error) {
	rsp, err := c.CatalogV2ShowEntry(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ShowEntryResponse(rsp)
}

// CatalogV2UpdateEntryWithBodyWithResponse request with arbitrary body returning *CatalogV2UpdateEntryResponse
func (c *ClientWithResponses) CatalogV2UpdateEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateEntryResponse, error) {
	rsp, err := c.CatalogV2UpdateEntryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateEntryResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2UpdateEntryWithResponse(ctx context.Context, id string, body CatalogV2UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateEntryResponse, error) {
	rsp, err := c.CatalogV2UpdateEntry(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateEntryResponse(rsp)
}

// CatalogV2ListResourcesWithResponse request returning *CatalogV2ListResourcesResponse
func (c *ClientWithResponses) CatalogV2ListResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CatalogV2ListResourcesResponse, error) {
	rsp, err := c.CatalogV2ListResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ListResourcesResponse(rsp)
}

// CatalogV2ListTypesWithResponse request returning *CatalogV2ListTypesResponse
func (c *ClientWithResponses) CatalogV2ListTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CatalogV2ListTypesResponse, error) {
	rsp, err := c.CatalogV2ListTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ListTypesResponse(rsp)
}

// CatalogV2CreateTypeWithBodyWithResponse request with arbitrary body returning *CatalogV2CreateTypeResponse
func (c *ClientWithResponses) CatalogV2CreateTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2CreateTypeResponse, error) {
	rsp, err := c.CatalogV2CreateTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2CreateTypeResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2CreateTypeWithResponse(ctx context.Context, body CatalogV2CreateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2CreateTypeResponse, error) {
	rsp, err := c.CatalogV2CreateType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2CreateTypeResponse(rsp)
}

// CatalogV2DestroyTypeWithResponse request returning *CatalogV2DestroyTypeResponse
func (c *ClientWithResponses) CatalogV2DestroyTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2DestroyTypeResponse, error) {
	rsp, err := c.CatalogV2DestroyType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2DestroyTypeResponse(rsp)
}

// CatalogV2ShowTypeWithResponse request returning *CatalogV2ShowTypeResponse
func (c *ClientWithResponses) CatalogV2ShowTypeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CatalogV2ShowTypeResponse, error) {
	rsp, err := c.CatalogV2ShowType(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2ShowTypeResponse(rsp)
}

// CatalogV2UpdateTypeWithBodyWithResponse request with arbitrary body returning *CatalogV2UpdateTypeResponse
func (c *ClientWithResponses) CatalogV2UpdateTypeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeResponse, error) {
	rsp, err := c.CatalogV2UpdateTypeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateTypeResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2UpdateTypeWithResponse(ctx context.Context, id string, body CatalogV2UpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeResponse, error) {
	rsp, err := c.CatalogV2UpdateType(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateTypeResponse(rsp)
}

// CatalogV2UpdateTypeSchemaWithBodyWithResponse request with arbitrary body returning *CatalogV2UpdateTypeSchemaResponse
func (c *ClientWithResponses) CatalogV2UpdateTypeSchemaWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeSchemaResponse, error) {
	rsp, err := c.CatalogV2UpdateTypeSchemaWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateTypeSchemaResponse(rsp)
}

func (c *ClientWithResponses) CatalogV2UpdateTypeSchemaWithResponse(ctx context.Context, id string, body CatalogV2UpdateTypeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*CatalogV2UpdateTypeSchemaResponse, error) {
	rsp, err := c.CatalogV2UpdateTypeSchema(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCatalogV2UpdateTypeSchemaResponse(rsp)
}

// CustomFieldsV2ListWithResponse request returning *CustomFieldsV2ListResponse
func (c *ClientWithResponses) CustomFieldsV2ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CustomFieldsV2ListResponse, error) {
	rsp, err := c.CustomFieldsV2List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV2ListResponse(rsp)
}

// CustomFieldsV2CreateWithBodyWithResponse request with arbitrary body returning *CustomFieldsV2CreateResponse
func (c *ClientWithResponses) CustomFieldsV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV2CreateResponse, error) {
	rsp, err := c.CustomFieldsV2CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV2CreateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldsV2CreateWithResponse(ctx context.Context, body CustomFieldsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV2CreateResponse, error) {
	rsp, err := c.CustomFieldsV2Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV2CreateResponse(rsp)
}

// CustomFieldsV2DeleteWithResponse request returning *CustomFieldsV2DeleteResponse
func (c *ClientWithResponses) CustomFieldsV2DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV2DeleteResponse, error) {
	rsp, err := c.CustomFieldsV2Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV2DeleteResponse(rsp)
}

// CustomFieldsV2ShowWithResponse request returning *CustomFieldsV2ShowResponse
func (c *ClientWithResponses) CustomFieldsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CustomFieldsV2ShowResponse, error) {
	rsp, err := c.CustomFieldsV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV2ShowResponse(rsp)
}

// CustomFieldsV2UpdateWithBodyWithResponse request with arbitrary body returning *CustomFieldsV2UpdateResponse
func (c *ClientWithResponses) CustomFieldsV2UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CustomFieldsV2UpdateResponse, error) {
	rsp, err := c.CustomFieldsV2UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV2UpdateResponse(rsp)
}

func (c *ClientWithResponses) CustomFieldsV2UpdateWithResponse(ctx context.Context, id string, body CustomFieldsV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CustomFieldsV2UpdateResponse, error) {
	rsp, err := c.CustomFieldsV2Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCustomFieldsV2UpdateResponse(rsp)
}

// EscalationsV2CreatePathWithBodyWithResponse request with arbitrary body returning *EscalationsV2CreatePathResponse
func (c *ClientWithResponses) EscalationsV2CreatePathWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EscalationsV2CreatePathResponse, error) {
	rsp, err := c.EscalationsV2CreatePathWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEscalationsV2CreatePathResponse(rsp)
}

func (c *ClientWithResponses) EscalationsV2CreatePathWithResponse(ctx context.Context, body EscalationsV2CreatePathJSONRequestBody, reqEditors ...RequestEditorFn) (*EscalationsV2CreatePathResponse, error) {
	rsp, err := c.EscalationsV2CreatePath(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEscalationsV2CreatePathResponse(rsp)
}

// EscalationsV2DestroyPathWithResponse request returning *EscalationsV2DestroyPathResponse
func (c *ClientWithResponses) EscalationsV2DestroyPathWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*EscalationsV2DestroyPathResponse, error) {
	rsp, err := c.EscalationsV2DestroyPath(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEscalationsV2DestroyPathResponse(rsp)
}

// EscalationsV2ShowPathWithResponse request returning *EscalationsV2ShowPathResponse
func (c *ClientWithResponses) EscalationsV2ShowPathWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*EscalationsV2ShowPathResponse, error) {
	rsp, err := c.EscalationsV2ShowPath(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEscalationsV2ShowPathResponse(rsp)
}

// EscalationsV2UpdatePathWithBodyWithResponse request with arbitrary body returning *EscalationsV2UpdatePathResponse
func (c *ClientWithResponses) EscalationsV2UpdatePathWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EscalationsV2UpdatePathResponse, error) {
	rsp, err := c.EscalationsV2UpdatePathWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEscalationsV2UpdatePathResponse(rsp)
}

func (c *ClientWithResponses) EscalationsV2UpdatePathWithResponse(ctx context.Context, id string, body EscalationsV2UpdatePathJSONRequestBody, reqEditors ...RequestEditorFn) (*EscalationsV2UpdatePathResponse, error) {
	rsp, err := c.EscalationsV2UpdatePath(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEscalationsV2UpdatePathResponse(rsp)
}

// FollowUpsV2ListWithResponse request returning *FollowUpsV2ListResponse
func (c *ClientWithResponses) FollowUpsV2ListWithResponse(ctx context.Context, params *FollowUpsV2ListParams, reqEditors ...RequestEditorFn) (*FollowUpsV2ListResponse, error) {
	rsp, err := c.FollowUpsV2List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFollowUpsV2ListResponse(rsp)
}

// FollowUpsV2ShowWithResponse request returning *FollowUpsV2ShowResponse
func (c *ClientWithResponses) FollowUpsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*FollowUpsV2ShowResponse, error) {
	rsp, err := c.FollowUpsV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFollowUpsV2ShowResponse(rsp)
}

// IncidentRolesV2ListWithResponse request returning *IncidentRolesV2ListResponse
func (c *ClientWithResponses) IncidentRolesV2ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentRolesV2ListResponse, error) {
	rsp, err := c.IncidentRolesV2List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV2ListResponse(rsp)
}

// IncidentRolesV2CreateWithBodyWithResponse request with arbitrary body returning *IncidentRolesV2CreateResponse
func (c *ClientWithResponses) IncidentRolesV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV2CreateResponse, error) {
	rsp, err := c.IncidentRolesV2CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV2CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentRolesV2CreateWithResponse(ctx context.Context, body IncidentRolesV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV2CreateResponse, error) {
	rsp, err := c.IncidentRolesV2Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV2CreateResponse(rsp)
}

// IncidentRolesV2DeleteWithResponse request returning *IncidentRolesV2DeleteResponse
func (c *ClientWithResponses) IncidentRolesV2DeleteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV2DeleteResponse, error) {
	rsp, err := c.IncidentRolesV2Delete(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV2DeleteResponse(rsp)
}

// IncidentRolesV2ShowWithResponse request returning *IncidentRolesV2ShowResponse
func (c *ClientWithResponses) IncidentRolesV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentRolesV2ShowResponse, error) {
	rsp, err := c.IncidentRolesV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV2ShowResponse(rsp)
}

// IncidentRolesV2UpdateWithBodyWithResponse request with arbitrary body returning *IncidentRolesV2UpdateResponse
func (c *ClientWithResponses) IncidentRolesV2UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentRolesV2UpdateResponse, error) {
	rsp, err := c.IncidentRolesV2UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV2UpdateResponse(rsp)
}

func (c *ClientWithResponses) IncidentRolesV2UpdateWithResponse(ctx context.Context, id string, body IncidentRolesV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentRolesV2UpdateResponse, error) {
	rsp, err := c.IncidentRolesV2Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentRolesV2UpdateResponse(rsp)
}

// IncidentTimestampsV2ListWithResponse request returning *IncidentTimestampsV2ListResponse
func (c *ClientWithResponses) IncidentTimestampsV2ListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IncidentTimestampsV2ListResponse, error) {
	rsp, err := c.IncidentTimestampsV2List(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentTimestampsV2ListResponse(rsp)
}

// IncidentTimestampsV2ShowWithResponse request returning *IncidentTimestampsV2ShowResponse
func (c *ClientWithResponses) IncidentTimestampsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentTimestampsV2ShowResponse, error) {
	rsp, err := c.IncidentTimestampsV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentTimestampsV2ShowResponse(rsp)
}

// IncidentUpdatesV2ListWithResponse request returning *IncidentUpdatesV2ListResponse
func (c *ClientWithResponses) IncidentUpdatesV2ListWithResponse(ctx context.Context, params *IncidentUpdatesV2ListParams, reqEditors ...RequestEditorFn) (*IncidentUpdatesV2ListResponse, error) {
	rsp, err := c.IncidentUpdatesV2List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentUpdatesV2ListResponse(rsp)
}

// IncidentsV2ListWithResponse request returning *IncidentsV2ListResponse
func (c *ClientWithResponses) IncidentsV2ListWithResponse(ctx context.Context, params *IncidentsV2ListParams, reqEditors ...RequestEditorFn) (*IncidentsV2ListResponse, error) {
	rsp, err := c.IncidentsV2List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2ListResponse(rsp)
}

// IncidentsV2CreateWithBodyWithResponse request with arbitrary body returning *IncidentsV2CreateResponse
func (c *ClientWithResponses) IncidentsV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV2CreateResponse, error) {
	rsp, err := c.IncidentsV2CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2CreateResponse(rsp)
}

func (c *ClientWithResponses) IncidentsV2CreateWithResponse(ctx context.Context, body IncidentsV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV2CreateResponse, error) {
	rsp, err := c.IncidentsV2Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2CreateResponse(rsp)
}

// IncidentsV2ShowWithResponse request returning *IncidentsV2ShowResponse
func (c *ClientWithResponses) IncidentsV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*IncidentsV2ShowResponse, error) {
	rsp, err := c.IncidentsV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2ShowResponse(rsp)
}

// IncidentsV2EditWithBodyWithResponse request with arbitrary body returning *IncidentsV2EditResponse
func (c *ClientWithResponses) IncidentsV2EditWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IncidentsV2EditResponse, error) {
	rsp, err := c.IncidentsV2EditWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2EditResponse(rsp)
}

func (c *ClientWithResponses) IncidentsV2EditWithResponse(ctx context.Context, id string, body IncidentsV2EditJSONRequestBody, reqEditors ...RequestEditorFn) (*IncidentsV2EditResponse, error) {
	rsp, err := c.IncidentsV2Edit(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIncidentsV2EditResponse(rsp)
}

// ManagedResourcesV2CreateManagedResourceWithBodyWithResponse request with arbitrary body returning *ManagedResourcesV2CreateManagedResourceResponse
func (c *ClientWithResponses) ManagedResourcesV2CreateManagedResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ManagedResourcesV2CreateManagedResourceResponse, error) {
	rsp, err := c.ManagedResourcesV2CreateManagedResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagedResourcesV2CreateManagedResourceResponse(rsp)
}

func (c *ClientWithResponses) ManagedResourcesV2CreateManagedResourceWithResponse(ctx context.Context, body ManagedResourcesV2CreateManagedResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*ManagedResourcesV2CreateManagedResourceResponse, error) {
	rsp, err := c.ManagedResourcesV2CreateManagedResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseManagedResourcesV2CreateManagedResourceResponse(rsp)
}

// SchedulesV2ListScheduleEntriesWithResponse request returning *SchedulesV2ListScheduleEntriesResponse
func (c *ClientWithResponses) SchedulesV2ListScheduleEntriesWithResponse(ctx context.Context, params *SchedulesV2ListScheduleEntriesParams, reqEditors ...RequestEditorFn) (*SchedulesV2ListScheduleEntriesResponse, error) {
	rsp, err := c.SchedulesV2ListScheduleEntries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulesV2ListScheduleEntriesResponse(rsp)
}

// SchedulesV2ListWithResponse request returning *SchedulesV2ListResponse
func (c *ClientWithResponses) SchedulesV2ListWithResponse(ctx context.Context, params *SchedulesV2ListParams, reqEditors ...RequestEditorFn) (*SchedulesV2ListResponse, error) {
	rsp, err := c.SchedulesV2List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulesV2ListResponse(rsp)
}

// SchedulesV2CreateWithBodyWithResponse request with arbitrary body returning *SchedulesV2CreateResponse
func (c *ClientWithResponses) SchedulesV2CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulesV2CreateResponse, error) {
	rsp, err := c.SchedulesV2CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulesV2CreateResponse(rsp)
}

func (c *ClientWithResponses) SchedulesV2CreateWithResponse(ctx context.Context, body SchedulesV2CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulesV2CreateResponse, error) {
	rsp, err := c.SchedulesV2Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulesV2CreateResponse(rsp)
}

// SchedulesV2DestroyWithResponse request returning *SchedulesV2DestroyResponse
func (c *ClientWithResponses) SchedulesV2DestroyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SchedulesV2DestroyResponse, error) {
	rsp, err := c.SchedulesV2Destroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulesV2DestroyResponse(rsp)
}

// SchedulesV2ShowWithResponse request returning *SchedulesV2ShowResponse
func (c *ClientWithResponses) SchedulesV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*SchedulesV2ShowResponse, error) {
	rsp, err := c.SchedulesV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulesV2ShowResponse(rsp)
}

// SchedulesV2UpdateWithBodyWithResponse request with arbitrary body returning *SchedulesV2UpdateResponse
func (c *ClientWithResponses) SchedulesV2UpdateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulesV2UpdateResponse, error) {
	rsp, err := c.SchedulesV2UpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulesV2UpdateResponse(rsp)
}

func (c *ClientWithResponses) SchedulesV2UpdateWithResponse(ctx context.Context, id string, body SchedulesV2UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulesV2UpdateResponse, error) {
	rsp, err := c.SchedulesV2Update(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulesV2UpdateResponse(rsp)
}

// UsersV2ListWithResponse request returning *UsersV2ListResponse
func (c *ClientWithResponses) UsersV2ListWithResponse(ctx context.Context, params *UsersV2ListParams, reqEditors ...RequestEditorFn) (*UsersV2ListResponse, error) {
	rsp, err := c.UsersV2List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersV2ListResponse(rsp)
}

// UsersV2ShowWithResponse request returning *UsersV2ShowResponse
func (c *ClientWithResponses) UsersV2ShowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UsersV2ShowResponse, error) {
	rsp, err := c.UsersV2Show(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersV2ShowResponse(rsp)
}

// WorkflowsV2ListWorkflowsWithResponse request returning *WorkflowsV2ListWorkflowsResponse
func (c *ClientWithResponses) WorkflowsV2ListWorkflowsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WorkflowsV2ListWorkflowsResponse, error) {
	rsp, err := c.WorkflowsV2ListWorkflows(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsV2ListWorkflowsResponse(rsp)
}

// WorkflowsV2CreateWorkflowWithBodyWithResponse request with arbitrary body returning *WorkflowsV2CreateWorkflowResponse
func (c *ClientWithResponses) WorkflowsV2CreateWorkflowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsV2CreateWorkflowResponse, error) {
	rsp, err := c.WorkflowsV2CreateWorkflowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsV2CreateWorkflowResponse(rsp)
}

func (c *ClientWithResponses) WorkflowsV2CreateWorkflowWithResponse(ctx context.Context, body WorkflowsV2CreateWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsV2CreateWorkflowResponse, error) {
	rsp, err := c.WorkflowsV2CreateWorkflow(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsV2CreateWorkflowResponse(rsp)
}

// WorkflowsV2DestroyWorkflowWithResponse request returning *WorkflowsV2DestroyWorkflowResponse
func (c *ClientWithResponses) WorkflowsV2DestroyWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WorkflowsV2DestroyWorkflowResponse, error) {
	rsp, err := c.WorkflowsV2DestroyWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsV2DestroyWorkflowResponse(rsp)
}

// WorkflowsV2ShowWorkflowWithResponse request returning *WorkflowsV2ShowWorkflowResponse
func (c *ClientWithResponses) WorkflowsV2ShowWorkflowWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WorkflowsV2ShowWorkflowResponse, error) {
	rsp, err := c.WorkflowsV2ShowWorkflow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsV2ShowWorkflowResponse(rsp)
}

// WorkflowsV2UpdateWorkflowWithBodyWithResponse request with arbitrary body returning *WorkflowsV2UpdateWorkflowResponse
func (c *ClientWithResponses) WorkflowsV2UpdateWorkflowWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkflowsV2UpdateWorkflowResponse, error) {
	rsp, err := c.WorkflowsV2UpdateWorkflowWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsV2UpdateWorkflowResponse(rsp)
}

func (c *ClientWithResponses) WorkflowsV2UpdateWorkflowWithResponse(ctx context.Context, id string, body WorkflowsV2UpdateWorkflowJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkflowsV2UpdateWorkflowResponse, error) {
	rsp, err := c.WorkflowsV2UpdateWorkflow(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsV2UpdateWorkflowResponse(rsp)
}

// ParseActionsV1ListResponse parses an HTTP response from a ActionsV1ListWithResponse call
func ParseActionsV1ListResponse(rsp *http.Response) (*ActionsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionsV1ShowResponse parses an HTTP response from a ActionsV1ShowWithResponse call
func ParseActionsV1ShowResponse(rsp *http.Response) (*ActionsV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldOptionsV1ListResponse parses an HTTP response from a CustomFieldOptionsV1ListWithResponse call
func ParseCustomFieldOptionsV1ListResponse(rsp *http.Response) (*CustomFieldOptionsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldOptionsV1CreateResponse parses an HTTP response from a CustomFieldOptionsV1CreateWithResponse call
func ParseCustomFieldOptionsV1CreateResponse(rsp *http.Response) (*CustomFieldOptionsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCustomFieldOptionsV1DeleteResponse parses an HTTP response from a CustomFieldOptionsV1DeleteWithResponse call
func ParseCustomFieldOptionsV1DeleteResponse(rsp *http.Response) (*CustomFieldOptionsV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCustomFieldOptionsV1ShowResponse parses an HTTP response from a CustomFieldOptionsV1ShowWithResponse call
func ParseCustomFieldOptionsV1ShowResponse(rsp *http.Response) (*CustomFieldOptionsV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldOptionsV1UpdateResponse parses an HTTP response from a CustomFieldOptionsV1UpdateWithResponse call
func ParseCustomFieldOptionsV1UpdateResponse(rsp *http.Response) (*CustomFieldOptionsV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldOptionsV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV1ListResponse parses an HTTP response from a CustomFieldsV1ListWithResponse call
func ParseCustomFieldsV1ListResponse(rsp *http.Response) (*CustomFieldsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV1CreateResponse parses an HTTP response from a CustomFieldsV1CreateWithResponse call
func ParseCustomFieldsV1CreateResponse(rsp *http.Response) (*CustomFieldsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV1DeleteResponse parses an HTTP response from a CustomFieldsV1DeleteWithResponse call
func ParseCustomFieldsV1DeleteResponse(rsp *http.Response) (*CustomFieldsV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCustomFieldsV1ShowResponse parses an HTTP response from a CustomFieldsV1ShowWithResponse call
func ParseCustomFieldsV1ShowResponse(rsp *http.Response) (*CustomFieldsV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV1UpdateResponse parses an HTTP response from a CustomFieldsV1UpdateWithResponse call
func ParseCustomFieldsV1UpdateResponse(rsp *http.Response) (*CustomFieldsV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUtilitiesV1IdentityResponse parses an HTTP response from a UtilitiesV1IdentityWithResponse call
func ParseUtilitiesV1IdentityResponse(rsp *http.Response) (*UtilitiesV1IdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UtilitiesV1IdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentAttachmentsV1ListResponse parses an HTTP response from a IncidentAttachmentsV1ListWithResponse call
func ParseIncidentAttachmentsV1ListResponse(rsp *http.Response) (*IncidentAttachmentsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentAttachmentsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody7
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentAttachmentsV1CreateResponse parses an HTTP response from a IncidentAttachmentsV1CreateWithResponse call
func ParseIncidentAttachmentsV1CreateResponse(rsp *http.Response) (*IncidentAttachmentsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentAttachmentsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIncidentAttachmentsV1DeleteResponse parses an HTTP response from a IncidentAttachmentsV1DeleteWithResponse call
func ParseIncidentAttachmentsV1DeleteResponse(rsp *http.Response) (*IncidentAttachmentsV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentAttachmentsV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIncidentMembershipsV1CreateResponse parses an HTTP response from a IncidentMembershipsV1CreateWithResponse call
func ParseIncidentMembershipsV1CreateResponse(rsp *http.Response) (*IncidentMembershipsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentMembershipsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateResponseBody2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIncidentMembershipsV1RevokeResponse parses an HTTP response from a IncidentMembershipsV1RevokeWithResponse call
func ParseIncidentMembershipsV1RevokeResponse(rsp *http.Response) (*IncidentMembershipsV1RevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentMembershipsV1RevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIncidentRolesV1ListResponse parses an HTTP response from a IncidentRolesV1ListWithResponse call
func ParseIncidentRolesV1ListResponse(rsp *http.Response) (*IncidentRolesV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV1CreateResponse parses an HTTP response from a IncidentRolesV1CreateWithResponse call
func ParseIncidentRolesV1CreateResponse(rsp *http.Response) (*IncidentRolesV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody7
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV1DeleteResponse parses an HTTP response from a IncidentRolesV1DeleteWithResponse call
func ParseIncidentRolesV1DeleteResponse(rsp *http.Response) (*IncidentRolesV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIncidentRolesV1ShowResponse parses an HTTP response from a IncidentRolesV1ShowWithResponse call
func ParseIncidentRolesV1ShowResponse(rsp *http.Response) (*IncidentRolesV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody7
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV1UpdateResponse parses an HTTP response from a IncidentRolesV1UpdateWithResponse call
func ParseIncidentRolesV1UpdateResponse(rsp *http.Response) (*IncidentRolesV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody7
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentStatusesV1ListResponse parses an HTTP response from a IncidentStatusesV1ListWithResponse call
func ParseIncidentStatusesV1ListResponse(rsp *http.Response) (*IncidentStatusesV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody10
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentStatusesV1CreateResponse parses an HTTP response from a IncidentStatusesV1CreateWithResponse call
func ParseIncidentStatusesV1CreateResponse(rsp *http.Response) (*IncidentStatusesV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIncidentStatusesV1DeleteResponse parses an HTTP response from a IncidentStatusesV1DeleteWithResponse call
func ParseIncidentStatusesV1DeleteResponse(rsp *http.Response) (*IncidentStatusesV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIncidentStatusesV1ShowResponse parses an HTTP response from a IncidentStatusesV1ShowWithResponse call
func ParseIncidentStatusesV1ShowResponse(rsp *http.Response) (*IncidentStatusesV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentStatusesV1UpdateResponse parses an HTTP response from a IncidentStatusesV1UpdateWithResponse call
func ParseIncidentStatusesV1UpdateResponse(rsp *http.Response) (*IncidentStatusesV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentStatusesV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentTypesV1ListResponse parses an HTTP response from a IncidentTypesV1ListWithResponse call
func ParseIncidentTypesV1ListResponse(rsp *http.Response) (*IncidentTypesV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentTypesV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody12
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentTypesV1ShowResponse parses an HTTP response from a IncidentTypesV1ShowWithResponse call
func ParseIncidentTypesV1ShowResponse(rsp *http.Response) (*IncidentTypesV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentTypesV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody11
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV1ListResponse parses an HTTP response from a IncidentsV1ListWithResponse call
func ParseIncidentsV1ListResponse(rsp *http.Response) (*IncidentsV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody14
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV1CreateResponse parses an HTTP response from a IncidentsV1CreateWithResponse call
func ParseIncidentsV1CreateResponse(rsp *http.Response) (*IncidentsV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody12
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV1ShowResponse parses an HTTP response from a IncidentsV1ShowWithResponse call
func ParseIncidentsV1ShowResponse(rsp *http.Response) (*IncidentsV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody12
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUtilitiesV1OpenAPIResponse parses an HTTP response from a UtilitiesV1OpenAPIWithResponse call
func ParseUtilitiesV1OpenAPIResponse(rsp *http.Response) (*UtilitiesV1OpenAPIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UtilitiesV1OpenAPIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUtilitiesV1OpenAPIV3Response parses an HTTP response from a UtilitiesV1OpenAPIV3WithResponse call
func ParseUtilitiesV1OpenAPIV3Response(rsp *http.Response) (*UtilitiesV1OpenAPIV3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UtilitiesV1OpenAPIV3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSeveritiesV1ListResponse parses an HTTP response from a SeveritiesV1ListWithResponse call
func ParseSeveritiesV1ListResponse(rsp *http.Response) (*SeveritiesV1ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody17
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSeveritiesV1CreateResponse parses an HTTP response from a SeveritiesV1CreateWithResponse call
func ParseSeveritiesV1CreateResponse(rsp *http.Response) (*SeveritiesV1CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody15
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSeveritiesV1DeleteResponse parses an HTTP response from a SeveritiesV1DeleteWithResponse call
func ParseSeveritiesV1DeleteResponse(rsp *http.Response) (*SeveritiesV1DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSeveritiesV1ShowResponse parses an HTTP response from a SeveritiesV1ShowWithResponse call
func ParseSeveritiesV1ShowResponse(rsp *http.Response) (*SeveritiesV1ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody15
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSeveritiesV1UpdateResponse parses an HTTP response from a SeveritiesV1UpdateWithResponse call
func ParseSeveritiesV1UpdateResponse(rsp *http.Response) (*SeveritiesV1UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SeveritiesV1UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody15
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionsV2ListResponse parses an HTTP response from a ActionsV2ListWithResponse call
func ParseActionsV2ListResponse(rsp *http.Response) (*ActionsV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionsV2ShowResponse parses an HTTP response from a ActionsV2ShowWithResponse call
func ParseActionsV2ShowResponse(rsp *http.Response) (*ActionsV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionsV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAlertEventsV2CreateHTTPResponse parses an HTTP response from a AlertEventsV2CreateHTTPWithResponse call
func ParseAlertEventsV2CreateHTTPResponse(rsp *http.Response) (*AlertEventsV2CreateHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertEventsV2CreateHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest AlertResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseCatalogV2ListEntriesResponse parses an HTTP response from a CatalogV2ListEntriesWithResponse call
func ParseCatalogV2ListEntriesResponse(rsp *http.Response) (*CatalogV2ListEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ListEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListEntriesResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2CreateEntryResponse parses an HTTP response from a CatalogV2CreateEntryWithResponse call
func ParseCatalogV2CreateEntryResponse(rsp *http.Response) (*CatalogV2CreateEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2CreateEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateEntryResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCatalogV2DestroyEntryResponse parses an HTTP response from a CatalogV2DestroyEntryWithResponse call
func ParseCatalogV2DestroyEntryResponse(rsp *http.Response) (*CatalogV2DestroyEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2DestroyEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogV2ShowEntryResponse parses an HTTP response from a CatalogV2ShowEntryWithResponse call
func ParseCatalogV2ShowEntryResponse(rsp *http.Response) (*CatalogV2ShowEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ShowEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowEntryResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2UpdateEntryResponse parses an HTTP response from a CatalogV2UpdateEntryWithResponse call
func ParseCatalogV2UpdateEntryResponse(rsp *http.Response) (*CatalogV2UpdateEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2UpdateEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowEntryResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2ListResourcesResponse parses an HTTP response from a CatalogV2ListResourcesWithResponse call
func ParseCatalogV2ListResourcesResponse(rsp *http.Response) (*CatalogV2ListResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ListResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResourcesResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2ListTypesResponse parses an HTTP response from a CatalogV2ListTypesWithResponse call
func ParseCatalogV2ListTypesResponse(rsp *http.Response) (*CatalogV2ListTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ListTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTypesResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2CreateTypeResponse parses an HTTP response from a CatalogV2CreateTypeWithResponse call
func ParseCatalogV2CreateTypeResponse(rsp *http.Response) (*CatalogV2CreateTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2CreateTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateTypeResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCatalogV2DestroyTypeResponse parses an HTTP response from a CatalogV2DestroyTypeWithResponse call
func ParseCatalogV2DestroyTypeResponse(rsp *http.Response) (*CatalogV2DestroyTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2DestroyTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCatalogV2ShowTypeResponse parses an HTTP response from a CatalogV2ShowTypeWithResponse call
func ParseCatalogV2ShowTypeResponse(rsp *http.Response) (*CatalogV2ShowTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2ShowTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTypeResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2UpdateTypeResponse parses an HTTP response from a CatalogV2UpdateTypeWithResponse call
func ParseCatalogV2UpdateTypeResponse(rsp *http.Response) (*CatalogV2UpdateTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2UpdateTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTypeResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCatalogV2UpdateTypeSchemaResponse parses an HTTP response from a CatalogV2UpdateTypeSchemaWithResponse call
func ParseCatalogV2UpdateTypeSchemaResponse(rsp *http.Response) (*CatalogV2UpdateTypeSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CatalogV2UpdateTypeSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateTypeResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV2ListResponse parses an HTTP response from a CustomFieldsV2ListWithResponse call
func ParseCustomFieldsV2ListResponse(rsp *http.Response) (*CustomFieldsV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV2CreateResponse parses an HTTP response from a CustomFieldsV2CreateWithResponse call
func ParseCustomFieldsV2CreateResponse(rsp *http.Response) (*CustomFieldsV2CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV2CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV2DeleteResponse parses an HTTP response from a CustomFieldsV2DeleteWithResponse call
func ParseCustomFieldsV2DeleteResponse(rsp *http.Response) (*CustomFieldsV2DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV2DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCustomFieldsV2ShowResponse parses an HTTP response from a CustomFieldsV2ShowWithResponse call
func ParseCustomFieldsV2ShowResponse(rsp *http.Response) (*CustomFieldsV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCustomFieldsV2UpdateResponse parses an HTTP response from a CustomFieldsV2UpdateWithResponse call
func ParseCustomFieldsV2UpdateResponse(rsp *http.Response) (*CustomFieldsV2UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CustomFieldsV2UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEscalationsV2CreatePathResponse parses an HTTP response from a EscalationsV2CreatePathWithResponse call
func ParseEscalationsV2CreatePathResponse(rsp *http.Response) (*EscalationsV2CreatePathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EscalationsV2CreatePathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreatePathResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEscalationsV2DestroyPathResponse parses an HTTP response from a EscalationsV2DestroyPathWithResponse call
func ParseEscalationsV2DestroyPathResponse(rsp *http.Response) (*EscalationsV2DestroyPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EscalationsV2DestroyPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEscalationsV2ShowPathResponse parses an HTTP response from a EscalationsV2ShowPathWithResponse call
func ParseEscalationsV2ShowPathResponse(rsp *http.Response) (*EscalationsV2ShowPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EscalationsV2ShowPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePathResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEscalationsV2UpdatePathResponse parses an HTTP response from a EscalationsV2UpdatePathWithResponse call
func ParseEscalationsV2UpdatePathResponse(rsp *http.Response) (*EscalationsV2UpdatePathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EscalationsV2UpdatePathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePathResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFollowUpsV2ListResponse parses an HTTP response from a FollowUpsV2ListWithResponse call
func ParseFollowUpsV2ListResponse(rsp *http.Response) (*FollowUpsV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FollowUpsV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody6
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFollowUpsV2ShowResponse parses an HTTP response from a FollowUpsV2ShowWithResponse call
func ParseFollowUpsV2ShowResponse(rsp *http.Response) (*FollowUpsV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FollowUpsV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody6
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV2ListResponse parses an HTTP response from a IncidentRolesV2ListWithResponse call
func ParseIncidentRolesV2ListResponse(rsp *http.Response) (*IncidentRolesV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV2CreateResponse parses an HTTP response from a IncidentRolesV2CreateWithResponse call
func ParseIncidentRolesV2CreateResponse(rsp *http.Response) (*IncidentRolesV2CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV2CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV2DeleteResponse parses an HTTP response from a IncidentRolesV2DeleteWithResponse call
func ParseIncidentRolesV2DeleteResponse(rsp *http.Response) (*IncidentRolesV2DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV2DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseIncidentRolesV2ShowResponse parses an HTTP response from a IncidentRolesV2ShowWithResponse call
func ParseIncidentRolesV2ShowResponse(rsp *http.Response) (*IncidentRolesV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentRolesV2UpdateResponse parses an HTTP response from a IncidentRolesV2UpdateWithResponse call
func ParseIncidentRolesV2UpdateResponse(rsp *http.Response) (*IncidentRolesV2UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentRolesV2UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentTimestampsV2ListResponse parses an HTTP response from a IncidentTimestampsV2ListWithResponse call
func ParseIncidentTimestampsV2ListResponse(rsp *http.Response) (*IncidentTimestampsV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentTimestampsV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody11
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentTimestampsV2ShowResponse parses an HTTP response from a IncidentTimestampsV2ShowWithResponse call
func ParseIncidentTimestampsV2ShowResponse(rsp *http.Response) (*IncidentTimestampsV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentTimestampsV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody10
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentUpdatesV2ListResponse parses an HTTP response from a IncidentUpdatesV2ListWithResponse call
func ParseIncidentUpdatesV2ListResponse(rsp *http.Response) (*IncidentUpdatesV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentUpdatesV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody13
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV2ListResponse parses an HTTP response from a IncidentsV2ListWithResponse call
func ParseIncidentsV2ListResponse(rsp *http.Response) (*IncidentsV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody15
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV2CreateResponse parses an HTTP response from a IncidentsV2CreateWithResponse call
func ParseIncidentsV2CreateResponse(rsp *http.Response) (*IncidentsV2CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV2CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody13
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV2ShowResponse parses an HTTP response from a IncidentsV2ShowWithResponse call
func ParseIncidentsV2ShowResponse(rsp *http.Response) (*IncidentsV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody13
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseIncidentsV2EditResponse parses an HTTP response from a IncidentsV2EditWithResponse call
func ParseIncidentsV2EditResponse(rsp *http.Response) (*IncidentsV2EditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IncidentsV2EditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody13
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseManagedResourcesV2CreateManagedResourceResponse parses an HTTP response from a ManagedResourcesV2CreateManagedResourceWithResponse call
func ParseManagedResourcesV2CreateManagedResourceResponse(rsp *http.Response) (*ManagedResourcesV2CreateManagedResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ManagedResourcesV2CreateManagedResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateManagedResourceResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSchedulesV2ListScheduleEntriesResponse parses an HTTP response from a SchedulesV2ListScheduleEntriesWithResponse call
func ParseSchedulesV2ListScheduleEntriesResponse(rsp *http.Response) (*SchedulesV2ListScheduleEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulesV2ListScheduleEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListScheduleEntriesResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSchedulesV2ListResponse parses an HTTP response from a SchedulesV2ListWithResponse call
func ParseSchedulesV2ListResponse(rsp *http.Response) (*SchedulesV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulesV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody16
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSchedulesV2CreateResponse parses an HTTP response from a SchedulesV2CreateWithResponse call
func ParseSchedulesV2CreateResponse(rsp *http.Response) (*SchedulesV2CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulesV2CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowResponseBody14
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSchedulesV2DestroyResponse parses an HTTP response from a SchedulesV2DestroyWithResponse call
func ParseSchedulesV2DestroyResponse(rsp *http.Response) (*SchedulesV2DestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulesV2DestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSchedulesV2ShowResponse parses an HTTP response from a SchedulesV2ShowWithResponse call
func ParseSchedulesV2ShowResponse(rsp *http.Response) (*SchedulesV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulesV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody14
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSchedulesV2UpdateResponse parses an HTTP response from a SchedulesV2UpdateWithResponse call
func ParseSchedulesV2UpdateResponse(rsp *http.Response) (*SchedulesV2UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulesV2UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody14
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersV2ListResponse parses an HTTP response from a UsersV2ListWithResponse call
func ParseUsersV2ListResponse(rsp *http.Response) (*UsersV2ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersV2ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponseBody18
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersV2ShowResponse parses an HTTP response from a UsersV2ShowWithResponse call
func ParseUsersV2ShowResponse(rsp *http.Response) (*UsersV2ShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersV2ShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowResponseBody16
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsV2ListWorkflowsResponse parses an HTTP response from a WorkflowsV2ListWorkflowsWithResponse call
func ParseWorkflowsV2ListWorkflowsResponse(rsp *http.Response) (*WorkflowsV2ListWorkflowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsV2ListWorkflowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListWorkflowsResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsV2CreateWorkflowResponse parses an HTTP response from a WorkflowsV2CreateWorkflowWithResponse call
func ParseWorkflowsV2CreateWorkflowResponse(rsp *http.Response) (*WorkflowsV2CreateWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsV2CreateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ShowWorkflowResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseWorkflowsV2DestroyWorkflowResponse parses an HTTP response from a WorkflowsV2DestroyWorkflowWithResponse call
func ParseWorkflowsV2DestroyWorkflowResponse(rsp *http.Response) (*WorkflowsV2DestroyWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsV2DestroyWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWorkflowsV2ShowWorkflowResponse parses an HTTP response from a WorkflowsV2ShowWorkflowWithResponse call
func ParseWorkflowsV2ShowWorkflowResponse(rsp *http.Response) (*WorkflowsV2ShowWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsV2ShowWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowWorkflowResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkflowsV2UpdateWorkflowResponse parses an HTTP response from a WorkflowsV2UpdateWorkflowWithResponse call
func ParseWorkflowsV2UpdateWorkflowResponse(rsp *http.Response) (*WorkflowsV2UpdateWorkflowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsV2UpdateWorkflowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ShowWorkflowResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
